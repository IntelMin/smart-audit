/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/qrcode@1.5.3";
exports.ids = ["vendor-chunks/qrcode@1.5.3"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/browser.js":
/*!****************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/browser.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const canPromise = __webpack_require__(/*! ./can-promise */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/can-promise.js\");\nconst QRCode = __webpack_require__(/*! ./core/qrcode */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/qrcode.js\");\nconst CanvasRenderer = __webpack_require__(/*! ./renderer/canvas */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/renderer/canvas.js\");\nconst SvgRenderer = __webpack_require__(/*! ./renderer/svg-tag.js */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/renderer/svg-tag.js\");\nfunction renderCanvas(renderFunc, canvas, text, opts, cb) {\n    const args = [].slice.call(arguments, 1);\n    const argsNum = args.length;\n    const isLastArgCb = typeof args[argsNum - 1] === \"function\";\n    if (!isLastArgCb && !canPromise()) {\n        throw new Error(\"Callback required as last argument\");\n    }\n    if (isLastArgCb) {\n        if (argsNum < 2) {\n            throw new Error(\"Too few arguments provided\");\n        }\n        if (argsNum === 2) {\n            cb = text;\n            text = canvas;\n            canvas = opts = undefined;\n        } else if (argsNum === 3) {\n            if (canvas.getContext && typeof cb === \"undefined\") {\n                cb = opts;\n                opts = undefined;\n            } else {\n                cb = opts;\n                opts = text;\n                text = canvas;\n                canvas = undefined;\n            }\n        }\n    } else {\n        if (argsNum < 1) {\n            throw new Error(\"Too few arguments provided\");\n        }\n        if (argsNum === 1) {\n            text = canvas;\n            canvas = opts = undefined;\n        } else if (argsNum === 2 && !canvas.getContext) {\n            opts = text;\n            text = canvas;\n            canvas = undefined;\n        }\n        return new Promise(function(resolve, reject) {\n            try {\n                const data = QRCode.create(text, opts);\n                resolve(renderFunc(data, canvas, opts));\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n    try {\n        const data = QRCode.create(text, opts);\n        cb(null, renderFunc(data, canvas, opts));\n    } catch (e) {\n        cb(e);\n    }\n}\nexports.create = QRCode.create;\nexports.toCanvas = renderCanvas.bind(null, CanvasRenderer.render);\nexports.toDataURL = renderCanvas.bind(null, CanvasRenderer.renderToDataURL);\n// only svg for now.\nexports.toString = renderCanvas.bind(null, function(data, _, opts) {\n    return SvgRenderer.render(data, opts);\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS4zL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2Jyb3dzZXIuanMiLCJtYXBwaW5ncyI6IkFBQ0EsTUFBTUEsYUFBYUMsbUJBQU9BLENBQUM7QUFFM0IsTUFBTUMsU0FBU0QsbUJBQU9BLENBQUM7QUFDdkIsTUFBTUUsaUJBQWlCRixtQkFBT0EsQ0FBQztBQUMvQixNQUFNRyxjQUFjSCxtQkFBT0EsQ0FBQztBQUU1QixTQUFTSSxhQUFjQyxVQUFVLEVBQUVDLE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxJQUFJLEVBQUVDLEVBQUU7SUFDdkQsTUFBTUMsT0FBTyxFQUFFLENBQUNDLEtBQUssQ0FBQ0MsSUFBSSxDQUFDQyxXQUFXO0lBQ3RDLE1BQU1DLFVBQVVKLEtBQUtLLE1BQU07SUFDM0IsTUFBTUMsY0FBYyxPQUFPTixJQUFJLENBQUNJLFVBQVUsRUFBRSxLQUFLO0lBRWpELElBQUksQ0FBQ0UsZUFBZSxDQUFDakIsY0FBYztRQUNqQyxNQUFNLElBQUlrQixNQUFNO0lBQ2xCO0lBRUEsSUFBSUQsYUFBYTtRQUNmLElBQUlGLFVBQVUsR0FBRztZQUNmLE1BQU0sSUFBSUcsTUFBTTtRQUNsQjtRQUVBLElBQUlILFlBQVksR0FBRztZQUNqQkwsS0FBS0Y7WUFDTEEsT0FBT0Q7WUFDUEEsU0FBU0UsT0FBT1U7UUFDbEIsT0FBTyxJQUFJSixZQUFZLEdBQUc7WUFDeEIsSUFBSVIsT0FBT2EsVUFBVSxJQUFJLE9BQU9WLE9BQU8sYUFBYTtnQkFDbERBLEtBQUtEO2dCQUNMQSxPQUFPVTtZQUNULE9BQU87Z0JBQ0xULEtBQUtEO2dCQUNMQSxPQUFPRDtnQkFDUEEsT0FBT0Q7Z0JBQ1BBLFNBQVNZO1lBQ1g7UUFDRjtJQUNGLE9BQU87UUFDTCxJQUFJSixVQUFVLEdBQUc7WUFDZixNQUFNLElBQUlHLE1BQU07UUFDbEI7UUFFQSxJQUFJSCxZQUFZLEdBQUc7WUFDakJQLE9BQU9EO1lBQ1BBLFNBQVNFLE9BQU9VO1FBQ2xCLE9BQU8sSUFBSUosWUFBWSxLQUFLLENBQUNSLE9BQU9hLFVBQVUsRUFBRTtZQUM5Q1gsT0FBT0Q7WUFDUEEsT0FBT0Q7WUFDUEEsU0FBU1k7UUFDWDtRQUVBLE9BQU8sSUFBSUUsUUFBUSxTQUFVQyxPQUFPLEVBQUVDLE1BQU07WUFDMUMsSUFBSTtnQkFDRixNQUFNQyxPQUFPdEIsT0FBT3VCLE1BQU0sQ0FBQ2pCLE1BQU1DO2dCQUNqQ2EsUUFBUWhCLFdBQVdrQixNQUFNakIsUUFBUUU7WUFDbkMsRUFBRSxPQUFPaUIsR0FBRztnQkFDVkgsT0FBT0c7WUFDVDtRQUNGO0lBQ0Y7SUFFQSxJQUFJO1FBQ0YsTUFBTUYsT0FBT3RCLE9BQU91QixNQUFNLENBQUNqQixNQUFNQztRQUNqQ0MsR0FBRyxNQUFNSixXQUFXa0IsTUFBTWpCLFFBQVFFO0lBQ3BDLEVBQUUsT0FBT2lCLEdBQUc7UUFDVmhCLEdBQUdnQjtJQUNMO0FBQ0Y7QUFFQUMsY0FBYyxHQUFHekIsT0FBT3VCLE1BQU07QUFDOUJFLGdCQUFnQixHQUFHdEIsYUFBYXdCLElBQUksQ0FBQyxNQUFNMUIsZUFBZTJCLE1BQU07QUFDaEVILGlCQUFpQixHQUFHdEIsYUFBYXdCLElBQUksQ0FBQyxNQUFNMUIsZUFBZTZCLGVBQWU7QUFFMUUsb0JBQW9CO0FBQ3BCTCxnQkFBZ0IsR0FBR3RCLGFBQWF3QixJQUFJLENBQUMsTUFBTSxTQUFVTCxJQUFJLEVBQUVVLENBQUMsRUFBRXpCLElBQUk7SUFDaEUsT0FBT0wsWUFBWTBCLE1BQU0sQ0FBQ04sTUFBTWY7QUFDbEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbWFydC1hdWRpdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9xcmNvZGVAMS41LjMvbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvYnJvd3Nlci5qcz83YWI1Il0sInNvdXJjZXNDb250ZW50IjpbIlxuY29uc3QgY2FuUHJvbWlzZSA9IHJlcXVpcmUoJy4vY2FuLXByb21pc2UnKVxuXG5jb25zdCBRUkNvZGUgPSByZXF1aXJlKCcuL2NvcmUvcXJjb2RlJylcbmNvbnN0IENhbnZhc1JlbmRlcmVyID0gcmVxdWlyZSgnLi9yZW5kZXJlci9jYW52YXMnKVxuY29uc3QgU3ZnUmVuZGVyZXIgPSByZXF1aXJlKCcuL3JlbmRlcmVyL3N2Zy10YWcuanMnKVxuXG5mdW5jdGlvbiByZW5kZXJDYW52YXMgKHJlbmRlckZ1bmMsIGNhbnZhcywgdGV4dCwgb3B0cywgY2IpIHtcbiAgY29uc3QgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKVxuICBjb25zdCBhcmdzTnVtID0gYXJncy5sZW5ndGhcbiAgY29uc3QgaXNMYXN0QXJnQ2IgPSB0eXBlb2YgYXJnc1thcmdzTnVtIC0gMV0gPT09ICdmdW5jdGlvbidcblxuICBpZiAoIWlzTGFzdEFyZ0NiICYmICFjYW5Qcm9taXNlKCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhbGxiYWNrIHJlcXVpcmVkIGFzIGxhc3QgYXJndW1lbnQnKVxuICB9XG5cbiAgaWYgKGlzTGFzdEFyZ0NiKSB7XG4gICAgaWYgKGFyZ3NOdW0gPCAyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RvbyBmZXcgYXJndW1lbnRzIHByb3ZpZGVkJylcbiAgICB9XG5cbiAgICBpZiAoYXJnc051bSA9PT0gMikge1xuICAgICAgY2IgPSB0ZXh0XG4gICAgICB0ZXh0ID0gY2FudmFzXG4gICAgICBjYW52YXMgPSBvcHRzID0gdW5kZWZpbmVkXG4gICAgfSBlbHNlIGlmIChhcmdzTnVtID09PSAzKSB7XG4gICAgICBpZiAoY2FudmFzLmdldENvbnRleHQgJiYgdHlwZW9mIGNiID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjYiA9IG9wdHNcbiAgICAgICAgb3B0cyA9IHVuZGVmaW5lZFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2IgPSBvcHRzXG4gICAgICAgIG9wdHMgPSB0ZXh0XG4gICAgICAgIHRleHQgPSBjYW52YXNcbiAgICAgICAgY2FudmFzID0gdW5kZWZpbmVkXG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChhcmdzTnVtIDwgMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUb28gZmV3IGFyZ3VtZW50cyBwcm92aWRlZCcpXG4gICAgfVxuXG4gICAgaWYgKGFyZ3NOdW0gPT09IDEpIHtcbiAgICAgIHRleHQgPSBjYW52YXNcbiAgICAgIGNhbnZhcyA9IG9wdHMgPSB1bmRlZmluZWRcbiAgICB9IGVsc2UgaWYgKGFyZ3NOdW0gPT09IDIgJiYgIWNhbnZhcy5nZXRDb250ZXh0KSB7XG4gICAgICBvcHRzID0gdGV4dFxuICAgICAgdGV4dCA9IGNhbnZhc1xuICAgICAgY2FudmFzID0gdW5kZWZpbmVkXG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBRUkNvZGUuY3JlYXRlKHRleHQsIG9wdHMpXG4gICAgICAgIHJlc29sdmUocmVuZGVyRnVuYyhkYXRhLCBjYW52YXMsIG9wdHMpKVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZWplY3QoZSlcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBkYXRhID0gUVJDb2RlLmNyZWF0ZSh0ZXh0LCBvcHRzKVxuICAgIGNiKG51bGwsIHJlbmRlckZ1bmMoZGF0YSwgY2FudmFzLCBvcHRzKSlcbiAgfSBjYXRjaCAoZSkge1xuICAgIGNiKGUpXG4gIH1cbn1cblxuZXhwb3J0cy5jcmVhdGUgPSBRUkNvZGUuY3JlYXRlXG5leHBvcnRzLnRvQ2FudmFzID0gcmVuZGVyQ2FudmFzLmJpbmQobnVsbCwgQ2FudmFzUmVuZGVyZXIucmVuZGVyKVxuZXhwb3J0cy50b0RhdGFVUkwgPSByZW5kZXJDYW52YXMuYmluZChudWxsLCBDYW52YXNSZW5kZXJlci5yZW5kZXJUb0RhdGFVUkwpXG5cbi8vIG9ubHkgc3ZnIGZvciBub3cuXG5leHBvcnRzLnRvU3RyaW5nID0gcmVuZGVyQ2FudmFzLmJpbmQobnVsbCwgZnVuY3Rpb24gKGRhdGEsIF8sIG9wdHMpIHtcbiAgcmV0dXJuIFN2Z1JlbmRlcmVyLnJlbmRlcihkYXRhLCBvcHRzKVxufSlcbiJdLCJuYW1lcyI6WyJjYW5Qcm9taXNlIiwicmVxdWlyZSIsIlFSQ29kZSIsIkNhbnZhc1JlbmRlcmVyIiwiU3ZnUmVuZGVyZXIiLCJyZW5kZXJDYW52YXMiLCJyZW5kZXJGdW5jIiwiY2FudmFzIiwidGV4dCIsIm9wdHMiLCJjYiIsImFyZ3MiLCJzbGljZSIsImNhbGwiLCJhcmd1bWVudHMiLCJhcmdzTnVtIiwibGVuZ3RoIiwiaXNMYXN0QXJnQ2IiLCJFcnJvciIsInVuZGVmaW5lZCIsImdldENvbnRleHQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImRhdGEiLCJjcmVhdGUiLCJlIiwiZXhwb3J0cyIsInRvQ2FudmFzIiwiYmluZCIsInJlbmRlciIsInRvRGF0YVVSTCIsInJlbmRlclRvRGF0YVVSTCIsInRvU3RyaW5nIiwiXyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/browser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/can-promise.js":
/*!********************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/can-promise.js ***!
  \********************************************************************************/
/***/ ((module) => {

"use strict";
eval("// can-promise has a crash in some versions of react native that dont have\n// standard global objects\n// https://github.com/soldair/node-qrcode/issues/157\n\nmodule.exports = function() {\n    return typeof Promise === \"function\" && Promise.prototype && Promise.prototype.then;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS4zL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2Nhbi1wcm9taXNlLmpzIiwibWFwcGluZ3MiOiJBQUFBLDBFQUEwRTtBQUMxRSwwQkFBMEI7QUFDMUIsb0RBQW9EOztBQUVwREEsT0FBT0MsT0FBTyxHQUFHO0lBQ2YsT0FBTyxPQUFPQyxZQUFZLGNBQWNBLFFBQVFDLFNBQVMsSUFBSUQsUUFBUUMsU0FBUyxDQUFDQyxJQUFJO0FBQ3JGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc21hcnQtYXVkaXQvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS4zL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2Nhbi1wcm9taXNlLmpzPzEyNDIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gY2FuLXByb21pc2UgaGFzIGEgY3Jhc2ggaW4gc29tZSB2ZXJzaW9ucyBvZiByZWFjdCBuYXRpdmUgdGhhdCBkb250IGhhdmVcbi8vIHN0YW5kYXJkIGdsb2JhbCBvYmplY3RzXG4vLyBodHRwczovL2dpdGh1Yi5jb20vc29sZGFpci9ub2RlLXFyY29kZS9pc3N1ZXMvMTU3XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdHlwZW9mIFByb21pc2UgPT09ICdmdW5jdGlvbicgJiYgUHJvbWlzZS5wcm90b3R5cGUgJiYgUHJvbWlzZS5wcm90b3R5cGUudGhlblxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJQcm9taXNlIiwicHJvdG90eXBlIiwidGhlbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/can-promise.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/alignment-pattern.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/alignment-pattern.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * Alignment pattern are fixed reference pattern in defined positions\n * in a matrix symbology, which enables the decode software to re-synchronise\n * the coordinate mapping of the image modules in the event of moderate amounts\n * of distortion of the image.\n *\n * Alignment patterns are present only in QR Code symbols of version 2 or larger\n * and their number depends on the symbol version.\n */ const getSymbolSize = (__webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/utils.js\").getSymbolSize);\n/**\n * Calculate the row/column coordinates of the center module of each alignment pattern\n * for the specified QR Code version.\n *\n * The alignment patterns are positioned symmetrically on either side of the diagonal\n * running from the top left corner of the symbol to the bottom right corner.\n *\n * Since positions are simmetrical only half of the coordinates are returned.\n * Each item of the array will represent in turn the x and y coordinate.\n * @see {@link getPositions}\n *\n * @param  {Number} version QR Code version\n * @return {Array}          Array of coordinate\n */ exports.getRowColCoords = function getRowColCoords(version) {\n    if (version === 1) return [];\n    const posCount = Math.floor(version / 7) + 2;\n    const size = getSymbolSize(version);\n    const intervals = size === 145 ? 26 : Math.ceil((size - 13) / (2 * posCount - 2)) * 2;\n    const positions = [\n        size - 7\n    ] // Last coord is always (size - 7)\n    ;\n    for(let i = 1; i < posCount - 1; i++){\n        positions[i] = positions[i - 1] - intervals;\n    }\n    positions.push(6) // First coord is always 6\n    ;\n    return positions.reverse();\n};\n/**\n * Returns an array containing the positions of each alignment pattern.\n * Each array's element represent the center point of the pattern as (x, y) coordinates\n *\n * Coordinates are calculated expanding the row/column coordinates returned by {@link getRowColCoords}\n * and filtering out the items that overlaps with finder pattern\n *\n * @example\n * For a Version 7 symbol {@link getRowColCoords} returns values 6, 22 and 38.\n * The alignment patterns, therefore, are to be centered on (row, column)\n * positions (6,22), (22,6), (22,22), (22,38), (38,22), (38,38).\n * Note that the coordinates (6,6), (6,38), (38,6) are occupied by finder patterns\n * and are not therefore used for alignment patterns.\n *\n * let pos = getPositions(7)\n * // [[6,22], [22,6], [22,22], [22,38], [38,22], [38,38]]\n *\n * @param  {Number} version QR Code version\n * @return {Array}          Array of coordinates\n */ exports.getPositions = function getPositions(version) {\n    const coords = [];\n    const pos = exports.getRowColCoords(version);\n    const posLength = pos.length;\n    for(let i = 0; i < posLength; i++){\n        for(let j = 0; j < posLength; j++){\n            // Skip if position is occupied by finder patterns\n            if (i === 0 && j === 0 || // top-left\n            i === 0 && j === posLength - 1 || // bottom-left\n            i === posLength - 1 && j === 0) {\n                continue;\n            }\n            coords.push([\n                pos[i],\n                pos[j]\n            ]);\n        }\n    }\n    return coords;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS4zL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvYWxpZ25tZW50LXBhdHRlcm4uanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7O0NBUUMsR0FFRCxNQUFNQSxnQkFBZ0JDLG1JQUFnQztBQUV0RDs7Ozs7Ozs7Ozs7OztDQWFDLEdBQ0RDLHVCQUF1QixHQUFHLFNBQVNDLGdCQUFpQkMsT0FBTztJQUN6RCxJQUFJQSxZQUFZLEdBQUcsT0FBTyxFQUFFO0lBRTVCLE1BQU1DLFdBQVdDLEtBQUtDLEtBQUssQ0FBQ0gsVUFBVSxLQUFLO0lBQzNDLE1BQU1JLE9BQU9SLGNBQWNJO0lBQzNCLE1BQU1LLFlBQVlELFNBQVMsTUFBTSxLQUFLRixLQUFLSSxJQUFJLENBQUMsQ0FBQ0YsT0FBTyxFQUFDLElBQU0sS0FBSUgsV0FBVyxNQUFNO0lBQ3BGLE1BQU1NLFlBQVk7UUFBQ0gsT0FBTztLQUFFLENBQUMsa0NBQWtDOztJQUUvRCxJQUFLLElBQUlJLElBQUksR0FBR0EsSUFBSVAsV0FBVyxHQUFHTyxJQUFLO1FBQ3JDRCxTQUFTLENBQUNDLEVBQUUsR0FBR0QsU0FBUyxDQUFDQyxJQUFJLEVBQUUsR0FBR0g7SUFDcEM7SUFFQUUsVUFBVUUsSUFBSSxDQUFDLEdBQUcsMEJBQTBCOztJQUU1QyxPQUFPRixVQUFVRyxPQUFPO0FBQzFCO0FBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FtQkMsR0FDRFosb0JBQW9CLEdBQUcsU0FBU2EsYUFBY1gsT0FBTztJQUNuRCxNQUFNWSxTQUFTLEVBQUU7SUFDakIsTUFBTUMsTUFBTWYsUUFBUUMsZUFBZSxDQUFDQztJQUNwQyxNQUFNYyxZQUFZRCxJQUFJRSxNQUFNO0lBRTVCLElBQUssSUFBSVAsSUFBSSxHQUFHQSxJQUFJTSxXQUFXTixJQUFLO1FBQ2xDLElBQUssSUFBSVEsSUFBSSxHQUFHQSxJQUFJRixXQUFXRSxJQUFLO1lBQ2xDLGtEQUFrRDtZQUNsRCxJQUFJLE1BQU8sS0FBS0EsTUFBTSxLQUFNLFdBQVc7WUFDbENSLE1BQU0sS0FBS1EsTUFBTUYsWUFBWSxLQUFNLGNBQWM7WUFDakROLE1BQU1NLFlBQVksS0FBS0UsTUFBTSxHQUFJO2dCQUNwQztZQUNGO1lBRUFKLE9BQU9ILElBQUksQ0FBQztnQkFBQ0ksR0FBRyxDQUFDTCxFQUFFO2dCQUFFSyxHQUFHLENBQUNHLEVBQUU7YUFBQztRQUM5QjtJQUNGO0lBRUEsT0FBT0o7QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL3NtYXJ0LWF1ZGl0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL3FyY29kZUAxLjUuMy9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9jb3JlL2FsaWdubWVudC1wYXR0ZXJuLmpzPzc2MmMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBbGlnbm1lbnQgcGF0dGVybiBhcmUgZml4ZWQgcmVmZXJlbmNlIHBhdHRlcm4gaW4gZGVmaW5lZCBwb3NpdGlvbnNcbiAqIGluIGEgbWF0cml4IHN5bWJvbG9neSwgd2hpY2ggZW5hYmxlcyB0aGUgZGVjb2RlIHNvZnR3YXJlIHRvIHJlLXN5bmNocm9uaXNlXG4gKiB0aGUgY29vcmRpbmF0ZSBtYXBwaW5nIG9mIHRoZSBpbWFnZSBtb2R1bGVzIGluIHRoZSBldmVudCBvZiBtb2RlcmF0ZSBhbW91bnRzXG4gKiBvZiBkaXN0b3J0aW9uIG9mIHRoZSBpbWFnZS5cbiAqXG4gKiBBbGlnbm1lbnQgcGF0dGVybnMgYXJlIHByZXNlbnQgb25seSBpbiBRUiBDb2RlIHN5bWJvbHMgb2YgdmVyc2lvbiAyIG9yIGxhcmdlclxuICogYW5kIHRoZWlyIG51bWJlciBkZXBlbmRzIG9uIHRoZSBzeW1ib2wgdmVyc2lvbi5cbiAqL1xuXG5jb25zdCBnZXRTeW1ib2xTaXplID0gcmVxdWlyZSgnLi91dGlscycpLmdldFN5bWJvbFNpemVcblxuLyoqXG4gKiBDYWxjdWxhdGUgdGhlIHJvdy9jb2x1bW4gY29vcmRpbmF0ZXMgb2YgdGhlIGNlbnRlciBtb2R1bGUgb2YgZWFjaCBhbGlnbm1lbnQgcGF0dGVyblxuICogZm9yIHRoZSBzcGVjaWZpZWQgUVIgQ29kZSB2ZXJzaW9uLlxuICpcbiAqIFRoZSBhbGlnbm1lbnQgcGF0dGVybnMgYXJlIHBvc2l0aW9uZWQgc3ltbWV0cmljYWxseSBvbiBlaXRoZXIgc2lkZSBvZiB0aGUgZGlhZ29uYWxcbiAqIHJ1bm5pbmcgZnJvbSB0aGUgdG9wIGxlZnQgY29ybmVyIG9mIHRoZSBzeW1ib2wgdG8gdGhlIGJvdHRvbSByaWdodCBjb3JuZXIuXG4gKlxuICogU2luY2UgcG9zaXRpb25zIGFyZSBzaW1tZXRyaWNhbCBvbmx5IGhhbGYgb2YgdGhlIGNvb3JkaW5hdGVzIGFyZSByZXR1cm5lZC5cbiAqIEVhY2ggaXRlbSBvZiB0aGUgYXJyYXkgd2lsbCByZXByZXNlbnQgaW4gdHVybiB0aGUgeCBhbmQgeSBjb29yZGluYXRlLlxuICogQHNlZSB7QGxpbmsgZ2V0UG9zaXRpb25zfVxuICpcbiAqIEBwYXJhbSAge051bWJlcn0gdmVyc2lvbiBRUiBDb2RlIHZlcnNpb25cbiAqIEByZXR1cm4ge0FycmF5fSAgICAgICAgICBBcnJheSBvZiBjb29yZGluYXRlXG4gKi9cbmV4cG9ydHMuZ2V0Um93Q29sQ29vcmRzID0gZnVuY3Rpb24gZ2V0Um93Q29sQ29vcmRzICh2ZXJzaW9uKSB7XG4gIGlmICh2ZXJzaW9uID09PSAxKSByZXR1cm4gW11cblxuICBjb25zdCBwb3NDb3VudCA9IE1hdGguZmxvb3IodmVyc2lvbiAvIDcpICsgMlxuICBjb25zdCBzaXplID0gZ2V0U3ltYm9sU2l6ZSh2ZXJzaW9uKVxuICBjb25zdCBpbnRlcnZhbHMgPSBzaXplID09PSAxNDUgPyAyNiA6IE1hdGguY2VpbCgoc2l6ZSAtIDEzKSAvICgyICogcG9zQ291bnQgLSAyKSkgKiAyXG4gIGNvbnN0IHBvc2l0aW9ucyA9IFtzaXplIC0gN10gLy8gTGFzdCBjb29yZCBpcyBhbHdheXMgKHNpemUgLSA3KVxuXG4gIGZvciAobGV0IGkgPSAxOyBpIDwgcG9zQ291bnQgLSAxOyBpKyspIHtcbiAgICBwb3NpdGlvbnNbaV0gPSBwb3NpdGlvbnNbaSAtIDFdIC0gaW50ZXJ2YWxzXG4gIH1cblxuICBwb3NpdGlvbnMucHVzaCg2KSAvLyBGaXJzdCBjb29yZCBpcyBhbHdheXMgNlxuXG4gIHJldHVybiBwb3NpdGlvbnMucmV2ZXJzZSgpXG59XG5cbi8qKlxuICogUmV0dXJucyBhbiBhcnJheSBjb250YWluaW5nIHRoZSBwb3NpdGlvbnMgb2YgZWFjaCBhbGlnbm1lbnQgcGF0dGVybi5cbiAqIEVhY2ggYXJyYXkncyBlbGVtZW50IHJlcHJlc2VudCB0aGUgY2VudGVyIHBvaW50IG9mIHRoZSBwYXR0ZXJuIGFzICh4LCB5KSBjb29yZGluYXRlc1xuICpcbiAqIENvb3JkaW5hdGVzIGFyZSBjYWxjdWxhdGVkIGV4cGFuZGluZyB0aGUgcm93L2NvbHVtbiBjb29yZGluYXRlcyByZXR1cm5lZCBieSB7QGxpbmsgZ2V0Um93Q29sQ29vcmRzfVxuICogYW5kIGZpbHRlcmluZyBvdXQgdGhlIGl0ZW1zIHRoYXQgb3ZlcmxhcHMgd2l0aCBmaW5kZXIgcGF0dGVyblxuICpcbiAqIEBleGFtcGxlXG4gKiBGb3IgYSBWZXJzaW9uIDcgc3ltYm9sIHtAbGluayBnZXRSb3dDb2xDb29yZHN9IHJldHVybnMgdmFsdWVzIDYsIDIyIGFuZCAzOC5cbiAqIFRoZSBhbGlnbm1lbnQgcGF0dGVybnMsIHRoZXJlZm9yZSwgYXJlIHRvIGJlIGNlbnRlcmVkIG9uIChyb3csIGNvbHVtbilcbiAqIHBvc2l0aW9ucyAoNiwyMiksICgyMiw2KSwgKDIyLDIyKSwgKDIyLDM4KSwgKDM4LDIyKSwgKDM4LDM4KS5cbiAqIE5vdGUgdGhhdCB0aGUgY29vcmRpbmF0ZXMgKDYsNiksICg2LDM4KSwgKDM4LDYpIGFyZSBvY2N1cGllZCBieSBmaW5kZXIgcGF0dGVybnNcbiAqIGFuZCBhcmUgbm90IHRoZXJlZm9yZSB1c2VkIGZvciBhbGlnbm1lbnQgcGF0dGVybnMuXG4gKlxuICogbGV0IHBvcyA9IGdldFBvc2l0aW9ucyg3KVxuICogLy8gW1s2LDIyXSwgWzIyLDZdLCBbMjIsMjJdLCBbMjIsMzhdLCBbMzgsMjJdLCBbMzgsMzhdXVxuICpcbiAqIEBwYXJhbSAge051bWJlcn0gdmVyc2lvbiBRUiBDb2RlIHZlcnNpb25cbiAqIEByZXR1cm4ge0FycmF5fSAgICAgICAgICBBcnJheSBvZiBjb29yZGluYXRlc1xuICovXG5leHBvcnRzLmdldFBvc2l0aW9ucyA9IGZ1bmN0aW9uIGdldFBvc2l0aW9ucyAodmVyc2lvbikge1xuICBjb25zdCBjb29yZHMgPSBbXVxuICBjb25zdCBwb3MgPSBleHBvcnRzLmdldFJvd0NvbENvb3Jkcyh2ZXJzaW9uKVxuICBjb25zdCBwb3NMZW5ndGggPSBwb3MubGVuZ3RoXG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb3NMZW5ndGg7IGkrKykge1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgcG9zTGVuZ3RoOyBqKyspIHtcbiAgICAgIC8vIFNraXAgaWYgcG9zaXRpb24gaXMgb2NjdXBpZWQgYnkgZmluZGVyIHBhdHRlcm5zXG4gICAgICBpZiAoKGkgPT09IDAgJiYgaiA9PT0gMCkgfHwgLy8gdG9wLWxlZnRcbiAgICAgICAgICAoaSA9PT0gMCAmJiBqID09PSBwb3NMZW5ndGggLSAxKSB8fCAvLyBib3R0b20tbGVmdFxuICAgICAgICAgIChpID09PSBwb3NMZW5ndGggLSAxICYmIGogPT09IDApKSB7IC8vIHRvcC1yaWdodFxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICBjb29yZHMucHVzaChbcG9zW2ldLCBwb3Nbal1dKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjb29yZHNcbn1cbiJdLCJuYW1lcyI6WyJnZXRTeW1ib2xTaXplIiwicmVxdWlyZSIsImV4cG9ydHMiLCJnZXRSb3dDb2xDb29yZHMiLCJ2ZXJzaW9uIiwicG9zQ291bnQiLCJNYXRoIiwiZmxvb3IiLCJzaXplIiwiaW50ZXJ2YWxzIiwiY2VpbCIsInBvc2l0aW9ucyIsImkiLCJwdXNoIiwicmV2ZXJzZSIsImdldFBvc2l0aW9ucyIsImNvb3JkcyIsInBvcyIsInBvc0xlbmd0aCIsImxlbmd0aCIsImoiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/alignment-pattern.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/alphanumeric-data.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/alphanumeric-data.js ***!
  \*******************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst Mode = __webpack_require__(/*! ./mode */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/mode.js\");\n/**\n * Array of characters available in alphanumeric mode\n *\n * As per QR Code specification, to each character\n * is assigned a value from 0 to 44 which in this case coincides\n * with the array index\n *\n * @type {Array}\n */ const ALPHA_NUM_CHARS = [\n    \"0\",\n    \"1\",\n    \"2\",\n    \"3\",\n    \"4\",\n    \"5\",\n    \"6\",\n    \"7\",\n    \"8\",\n    \"9\",\n    \"A\",\n    \"B\",\n    \"C\",\n    \"D\",\n    \"E\",\n    \"F\",\n    \"G\",\n    \"H\",\n    \"I\",\n    \"J\",\n    \"K\",\n    \"L\",\n    \"M\",\n    \"N\",\n    \"O\",\n    \"P\",\n    \"Q\",\n    \"R\",\n    \"S\",\n    \"T\",\n    \"U\",\n    \"V\",\n    \"W\",\n    \"X\",\n    \"Y\",\n    \"Z\",\n    \" \",\n    \"$\",\n    \"%\",\n    \"*\",\n    \"+\",\n    \"-\",\n    \".\",\n    \"/\",\n    \":\"\n];\nfunction AlphanumericData(data) {\n    this.mode = Mode.ALPHANUMERIC;\n    this.data = data;\n}\nAlphanumericData.getBitsLength = function getBitsLength(length) {\n    return 11 * Math.floor(length / 2) + 6 * (length % 2);\n};\nAlphanumericData.prototype.getLength = function getLength() {\n    return this.data.length;\n};\nAlphanumericData.prototype.getBitsLength = function getBitsLength() {\n    return AlphanumericData.getBitsLength(this.data.length);\n};\nAlphanumericData.prototype.write = function write(bitBuffer) {\n    let i;\n    // Input data characters are divided into groups of two characters\n    // and encoded as 11-bit binary codes.\n    for(i = 0; i + 2 <= this.data.length; i += 2){\n        // The character value of the first character is multiplied by 45\n        let value = ALPHA_NUM_CHARS.indexOf(this.data[i]) * 45;\n        // The character value of the second digit is added to the product\n        value += ALPHA_NUM_CHARS.indexOf(this.data[i + 1]);\n        // The sum is then stored as 11-bit binary number\n        bitBuffer.put(value, 11);\n    }\n    // If the number of input data characters is not a multiple of two,\n    // the character value of the final character is encoded as a 6-bit binary number.\n    if (this.data.length % 2) {\n        bitBuffer.put(ALPHA_NUM_CHARS.indexOf(this.data[i]), 6);\n    }\n};\nmodule.exports = AlphanumericData;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS4zL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvYWxwaGFudW1lcmljLWRhdGEuanMiLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU1BLE9BQU9DLG1CQUFPQSxDQUFDO0FBRXJCOzs7Ozs7OztDQVFDLEdBQ0QsTUFBTUMsa0JBQWtCO0lBQ3RCO0lBQUs7SUFBSztJQUFLO0lBQUs7SUFBSztJQUFLO0lBQUs7SUFBSztJQUFLO0lBQzdDO0lBQUs7SUFBSztJQUFLO0lBQUs7SUFBSztJQUFLO0lBQUs7SUFBSztJQUFLO0lBQUs7SUFBSztJQUFLO0lBQzVEO0lBQUs7SUFBSztJQUFLO0lBQUs7SUFBSztJQUFLO0lBQUs7SUFBSztJQUFLO0lBQUs7SUFBSztJQUFLO0lBQzVEO0lBQUs7SUFBSztJQUFLO0lBQUs7SUFBSztJQUFLO0lBQUs7SUFBSztDQUN6QztBQUVELFNBQVNDLGlCQUFrQkMsSUFBSTtJQUM3QixJQUFJLENBQUNDLElBQUksR0FBR0wsS0FBS00sWUFBWTtJQUM3QixJQUFJLENBQUNGLElBQUksR0FBR0E7QUFDZDtBQUVBRCxpQkFBaUJJLGFBQWEsR0FBRyxTQUFTQSxjQUFlQyxNQUFNO0lBQzdELE9BQU8sS0FBS0MsS0FBS0MsS0FBSyxDQUFDRixTQUFTLEtBQUssSUFBS0EsQ0FBQUEsU0FBUztBQUNyRDtBQUVBTCxpQkFBaUJRLFNBQVMsQ0FBQ0MsU0FBUyxHQUFHLFNBQVNBO0lBQzlDLE9BQU8sSUFBSSxDQUFDUixJQUFJLENBQUNJLE1BQU07QUFDekI7QUFFQUwsaUJBQWlCUSxTQUFTLENBQUNKLGFBQWEsR0FBRyxTQUFTQTtJQUNsRCxPQUFPSixpQkFBaUJJLGFBQWEsQ0FBQyxJQUFJLENBQUNILElBQUksQ0FBQ0ksTUFBTTtBQUN4RDtBQUVBTCxpQkFBaUJRLFNBQVMsQ0FBQ0UsS0FBSyxHQUFHLFNBQVNBLE1BQU9DLFNBQVM7SUFDMUQsSUFBSUM7SUFFSixrRUFBa0U7SUFDbEUsc0NBQXNDO0lBQ3RDLElBQUtBLElBQUksR0FBR0EsSUFBSSxLQUFLLElBQUksQ0FBQ1gsSUFBSSxDQUFDSSxNQUFNLEVBQUVPLEtBQUssRUFBRztRQUM3QyxpRUFBaUU7UUFDakUsSUFBSUMsUUFBUWQsZ0JBQWdCZSxPQUFPLENBQUMsSUFBSSxDQUFDYixJQUFJLENBQUNXLEVBQUUsSUFBSTtRQUVwRCxrRUFBa0U7UUFDbEVDLFNBQVNkLGdCQUFnQmUsT0FBTyxDQUFDLElBQUksQ0FBQ2IsSUFBSSxDQUFDVyxJQUFJLEVBQUU7UUFFakQsaURBQWlEO1FBQ2pERCxVQUFVSSxHQUFHLENBQUNGLE9BQU87SUFDdkI7SUFFQSxtRUFBbUU7SUFDbkUsa0ZBQWtGO0lBQ2xGLElBQUksSUFBSSxDQUFDWixJQUFJLENBQUNJLE1BQU0sR0FBRyxHQUFHO1FBQ3hCTSxVQUFVSSxHQUFHLENBQUNoQixnQkFBZ0JlLE9BQU8sQ0FBQyxJQUFJLENBQUNiLElBQUksQ0FBQ1csRUFBRSxHQUFHO0lBQ3ZEO0FBQ0Y7QUFFQUksT0FBT0MsT0FBTyxHQUFHakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbWFydC1hdWRpdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9xcmNvZGVAMS41LjMvbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9hbHBoYW51bWVyaWMtZGF0YS5qcz9lZWE5Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IE1vZGUgPSByZXF1aXJlKCcuL21vZGUnKVxuXG4vKipcbiAqIEFycmF5IG9mIGNoYXJhY3RlcnMgYXZhaWxhYmxlIGluIGFscGhhbnVtZXJpYyBtb2RlXG4gKlxuICogQXMgcGVyIFFSIENvZGUgc3BlY2lmaWNhdGlvbiwgdG8gZWFjaCBjaGFyYWN0ZXJcbiAqIGlzIGFzc2lnbmVkIGEgdmFsdWUgZnJvbSAwIHRvIDQ0IHdoaWNoIGluIHRoaXMgY2FzZSBjb2luY2lkZXNcbiAqIHdpdGggdGhlIGFycmF5IGluZGV4XG4gKlxuICogQHR5cGUge0FycmF5fVxuICovXG5jb25zdCBBTFBIQV9OVU1fQ0hBUlMgPSBbXG4gICcwJywgJzEnLCAnMicsICczJywgJzQnLCAnNScsICc2JywgJzcnLCAnOCcsICc5JyxcbiAgJ0EnLCAnQicsICdDJywgJ0QnLCAnRScsICdGJywgJ0cnLCAnSCcsICdJJywgJ0onLCAnSycsICdMJywgJ00nLFxuICAnTicsICdPJywgJ1AnLCAnUScsICdSJywgJ1MnLCAnVCcsICdVJywgJ1YnLCAnVycsICdYJywgJ1knLCAnWicsXG4gICcgJywgJyQnLCAnJScsICcqJywgJysnLCAnLScsICcuJywgJy8nLCAnOidcbl1cblxuZnVuY3Rpb24gQWxwaGFudW1lcmljRGF0YSAoZGF0YSkge1xuICB0aGlzLm1vZGUgPSBNb2RlLkFMUEhBTlVNRVJJQ1xuICB0aGlzLmRhdGEgPSBkYXRhXG59XG5cbkFscGhhbnVtZXJpY0RhdGEuZ2V0Qml0c0xlbmd0aCA9IGZ1bmN0aW9uIGdldEJpdHNMZW5ndGggKGxlbmd0aCkge1xuICByZXR1cm4gMTEgKiBNYXRoLmZsb29yKGxlbmd0aCAvIDIpICsgNiAqIChsZW5ndGggJSAyKVxufVxuXG5BbHBoYW51bWVyaWNEYXRhLnByb3RvdHlwZS5nZXRMZW5ndGggPSBmdW5jdGlvbiBnZXRMZW5ndGggKCkge1xuICByZXR1cm4gdGhpcy5kYXRhLmxlbmd0aFxufVxuXG5BbHBoYW51bWVyaWNEYXRhLnByb3RvdHlwZS5nZXRCaXRzTGVuZ3RoID0gZnVuY3Rpb24gZ2V0Qml0c0xlbmd0aCAoKSB7XG4gIHJldHVybiBBbHBoYW51bWVyaWNEYXRhLmdldEJpdHNMZW5ndGgodGhpcy5kYXRhLmxlbmd0aClcbn1cblxuQWxwaGFudW1lcmljRGF0YS5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiB3cml0ZSAoYml0QnVmZmVyKSB7XG4gIGxldCBpXG5cbiAgLy8gSW5wdXQgZGF0YSBjaGFyYWN0ZXJzIGFyZSBkaXZpZGVkIGludG8gZ3JvdXBzIG9mIHR3byBjaGFyYWN0ZXJzXG4gIC8vIGFuZCBlbmNvZGVkIGFzIDExLWJpdCBiaW5hcnkgY29kZXMuXG4gIGZvciAoaSA9IDA7IGkgKyAyIDw9IHRoaXMuZGF0YS5sZW5ndGg7IGkgKz0gMikge1xuICAgIC8vIFRoZSBjaGFyYWN0ZXIgdmFsdWUgb2YgdGhlIGZpcnN0IGNoYXJhY3RlciBpcyBtdWx0aXBsaWVkIGJ5IDQ1XG4gICAgbGV0IHZhbHVlID0gQUxQSEFfTlVNX0NIQVJTLmluZGV4T2YodGhpcy5kYXRhW2ldKSAqIDQ1XG5cbiAgICAvLyBUaGUgY2hhcmFjdGVyIHZhbHVlIG9mIHRoZSBzZWNvbmQgZGlnaXQgaXMgYWRkZWQgdG8gdGhlIHByb2R1Y3RcbiAgICB2YWx1ZSArPSBBTFBIQV9OVU1fQ0hBUlMuaW5kZXhPZih0aGlzLmRhdGFbaSArIDFdKVxuXG4gICAgLy8gVGhlIHN1bSBpcyB0aGVuIHN0b3JlZCBhcyAxMS1iaXQgYmluYXJ5IG51bWJlclxuICAgIGJpdEJ1ZmZlci5wdXQodmFsdWUsIDExKVxuICB9XG5cbiAgLy8gSWYgdGhlIG51bWJlciBvZiBpbnB1dCBkYXRhIGNoYXJhY3RlcnMgaXMgbm90IGEgbXVsdGlwbGUgb2YgdHdvLFxuICAvLyB0aGUgY2hhcmFjdGVyIHZhbHVlIG9mIHRoZSBmaW5hbCBjaGFyYWN0ZXIgaXMgZW5jb2RlZCBhcyBhIDYtYml0IGJpbmFyeSBudW1iZXIuXG4gIGlmICh0aGlzLmRhdGEubGVuZ3RoICUgMikge1xuICAgIGJpdEJ1ZmZlci5wdXQoQUxQSEFfTlVNX0NIQVJTLmluZGV4T2YodGhpcy5kYXRhW2ldKSwgNilcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEFscGhhbnVtZXJpY0RhdGFcbiJdLCJuYW1lcyI6WyJNb2RlIiwicmVxdWlyZSIsIkFMUEhBX05VTV9DSEFSUyIsIkFscGhhbnVtZXJpY0RhdGEiLCJkYXRhIiwibW9kZSIsIkFMUEhBTlVNRVJJQyIsImdldEJpdHNMZW5ndGgiLCJsZW5ndGgiLCJNYXRoIiwiZmxvb3IiLCJwcm90b3R5cGUiLCJnZXRMZW5ndGgiLCJ3cml0ZSIsImJpdEJ1ZmZlciIsImkiLCJ2YWx1ZSIsImluZGV4T2YiLCJwdXQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/alphanumeric-data.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/bit-buffer.js":
/*!************************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/bit-buffer.js ***!
  \************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\nfunction BitBuffer() {\n    this.buffer = [];\n    this.length = 0;\n}\nBitBuffer.prototype = {\n    get: function(index) {\n        const bufIndex = Math.floor(index / 8);\n        return (this.buffer[bufIndex] >>> 7 - index % 8 & 1) === 1;\n    },\n    put: function(num, length) {\n        for(let i = 0; i < length; i++){\n            this.putBit((num >>> length - i - 1 & 1) === 1);\n        }\n    },\n    getLengthInBits: function() {\n        return this.length;\n    },\n    putBit: function(bit) {\n        const bufIndex = Math.floor(this.length / 8);\n        if (this.buffer.length <= bufIndex) {\n            this.buffer.push(0);\n        }\n        if (bit) {\n            this.buffer[bufIndex] |= 0x80 >>> this.length % 8;\n        }\n        this.length++;\n    }\n};\nmodule.exports = BitBuffer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS4zL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvYml0LWJ1ZmZlci5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsU0FBU0E7SUFDUCxJQUFJLENBQUNDLE1BQU0sR0FBRyxFQUFFO0lBQ2hCLElBQUksQ0FBQ0MsTUFBTSxHQUFHO0FBQ2hCO0FBRUFGLFVBQVVHLFNBQVMsR0FBRztJQUVwQkMsS0FBSyxTQUFVQyxLQUFLO1FBQ2xCLE1BQU1DLFdBQVdDLEtBQUtDLEtBQUssQ0FBQ0gsUUFBUTtRQUNwQyxPQUFPLENBQUMsSUFBSyxDQUFDSixNQUFNLENBQUNLLFNBQVMsS0FBTSxJQUFJRCxRQUFRLElBQU0sT0FBTztJQUMvRDtJQUVBSSxLQUFLLFNBQVVDLEdBQUcsRUFBRVIsTUFBTTtRQUN4QixJQUFLLElBQUlTLElBQUksR0FBR0EsSUFBSVQsUUFBUVMsSUFBSztZQUMvQixJQUFJLENBQUNDLE1BQU0sQ0FBQyxDQUFDLFFBQVVWLFNBQVNTLElBQUksSUFBTSxPQUFPO1FBQ25EO0lBQ0Y7SUFFQUUsaUJBQWlCO1FBQ2YsT0FBTyxJQUFJLENBQUNYLE1BQU07SUFDcEI7SUFFQVUsUUFBUSxTQUFVRSxHQUFHO1FBQ25CLE1BQU1SLFdBQVdDLEtBQUtDLEtBQUssQ0FBQyxJQUFJLENBQUNOLE1BQU0sR0FBRztRQUMxQyxJQUFJLElBQUksQ0FBQ0QsTUFBTSxDQUFDQyxNQUFNLElBQUlJLFVBQVU7WUFDbEMsSUFBSSxDQUFDTCxNQUFNLENBQUNjLElBQUksQ0FBQztRQUNuQjtRQUVBLElBQUlELEtBQUs7WUFDUCxJQUFJLENBQUNiLE1BQU0sQ0FBQ0ssU0FBUyxJQUFLLFNBQVUsSUFBSSxDQUFDSixNQUFNLEdBQUc7UUFDcEQ7UUFFQSxJQUFJLENBQUNBLE1BQU07SUFDYjtBQUNGO0FBRUFjLE9BQU9DLE9BQU8sR0FBR2pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc21hcnQtYXVkaXQvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS4zL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvYml0LWJ1ZmZlci5qcz9iMGIyIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIEJpdEJ1ZmZlciAoKSB7XG4gIHRoaXMuYnVmZmVyID0gW11cbiAgdGhpcy5sZW5ndGggPSAwXG59XG5cbkJpdEJ1ZmZlci5wcm90b3R5cGUgPSB7XG5cbiAgZ2V0OiBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICBjb25zdCBidWZJbmRleCA9IE1hdGguZmxvb3IoaW5kZXggLyA4KVxuICAgIHJldHVybiAoKHRoaXMuYnVmZmVyW2J1ZkluZGV4XSA+Pj4gKDcgLSBpbmRleCAlIDgpKSAmIDEpID09PSAxXG4gIH0sXG5cbiAgcHV0OiBmdW5jdGlvbiAobnVtLCBsZW5ndGgpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLnB1dEJpdCgoKG51bSA+Pj4gKGxlbmd0aCAtIGkgLSAxKSkgJiAxKSA9PT0gMSlcbiAgICB9XG4gIH0sXG5cbiAgZ2V0TGVuZ3RoSW5CaXRzOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMubGVuZ3RoXG4gIH0sXG5cbiAgcHV0Qml0OiBmdW5jdGlvbiAoYml0KSB7XG4gICAgY29uc3QgYnVmSW5kZXggPSBNYXRoLmZsb29yKHRoaXMubGVuZ3RoIC8gOClcbiAgICBpZiAodGhpcy5idWZmZXIubGVuZ3RoIDw9IGJ1ZkluZGV4KSB7XG4gICAgICB0aGlzLmJ1ZmZlci5wdXNoKDApXG4gICAgfVxuXG4gICAgaWYgKGJpdCkge1xuICAgICAgdGhpcy5idWZmZXJbYnVmSW5kZXhdIHw9ICgweDgwID4+PiAodGhpcy5sZW5ndGggJSA4KSlcbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCsrXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBCaXRCdWZmZXJcbiJdLCJuYW1lcyI6WyJCaXRCdWZmZXIiLCJidWZmZXIiLCJsZW5ndGgiLCJwcm90b3R5cGUiLCJnZXQiLCJpbmRleCIsImJ1ZkluZGV4IiwiTWF0aCIsImZsb29yIiwicHV0IiwibnVtIiwiaSIsInB1dEJpdCIsImdldExlbmd0aEluQml0cyIsImJpdCIsInB1c2giLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/bit-buffer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/bit-matrix.js":
/*!************************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/bit-matrix.js ***!
  \************************************************************************************/
/***/ ((module) => {

"use strict";
eval("/**\n * Helper class to handle QR Code symbol modules\n *\n * @param {Number} size Symbol size\n */ \nfunction BitMatrix(size) {\n    if (!size || size < 1) {\n        throw new Error(\"BitMatrix size must be defined and greater than 0\");\n    }\n    this.size = size;\n    this.data = new Uint8Array(size * size);\n    this.reservedBit = new Uint8Array(size * size);\n}\n/**\n * Set bit value at specified location\n * If reserved flag is set, this bit will be ignored during masking process\n *\n * @param {Number}  row\n * @param {Number}  col\n * @param {Boolean} value\n * @param {Boolean} reserved\n */ BitMatrix.prototype.set = function(row, col, value, reserved) {\n    const index = row * this.size + col;\n    this.data[index] = value;\n    if (reserved) this.reservedBit[index] = true;\n};\n/**\n * Returns bit value at specified location\n *\n * @param  {Number}  row\n * @param  {Number}  col\n * @return {Boolean}\n */ BitMatrix.prototype.get = function(row, col) {\n    return this.data[row * this.size + col];\n};\n/**\n * Applies xor operator at specified location\n * (used during masking process)\n *\n * @param {Number}  row\n * @param {Number}  col\n * @param {Boolean} value\n */ BitMatrix.prototype.xor = function(row, col, value) {\n    this.data[row * this.size + col] ^= value;\n};\n/**\n * Check if bit at specified location is reserved\n *\n * @param {Number}   row\n * @param {Number}   col\n * @return {Boolean}\n */ BitMatrix.prototype.isReserved = function(row, col) {\n    return this.reservedBit[row * this.size + col];\n};\nmodule.exports = BitMatrix;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS4zL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvYml0LW1hdHJpeC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7OztDQUlDO0FBQ0QsU0FBU0EsVUFBV0MsSUFBSTtJQUN0QixJQUFJLENBQUNBLFFBQVFBLE9BQU8sR0FBRztRQUNyQixNQUFNLElBQUlDLE1BQU07SUFDbEI7SUFFQSxJQUFJLENBQUNELElBQUksR0FBR0E7SUFDWixJQUFJLENBQUNFLElBQUksR0FBRyxJQUFJQyxXQUFXSCxPQUFPQTtJQUNsQyxJQUFJLENBQUNJLFdBQVcsR0FBRyxJQUFJRCxXQUFXSCxPQUFPQTtBQUMzQztBQUVBOzs7Ozs7OztDQVFDLEdBQ0RELFVBQVVNLFNBQVMsQ0FBQ0MsR0FBRyxHQUFHLFNBQVVDLEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxLQUFLLEVBQUVDLFFBQVE7SUFDM0QsTUFBTUMsUUFBUUosTUFBTSxJQUFJLENBQUNQLElBQUksR0FBR1E7SUFDaEMsSUFBSSxDQUFDTixJQUFJLENBQUNTLE1BQU0sR0FBR0Y7SUFDbkIsSUFBSUMsVUFBVSxJQUFJLENBQUNOLFdBQVcsQ0FBQ08sTUFBTSxHQUFHO0FBQzFDO0FBRUE7Ozs7OztDQU1DLEdBQ0RaLFVBQVVNLFNBQVMsQ0FBQ08sR0FBRyxHQUFHLFNBQVVMLEdBQUcsRUFBRUMsR0FBRztJQUMxQyxPQUFPLElBQUksQ0FBQ04sSUFBSSxDQUFDSyxNQUFNLElBQUksQ0FBQ1AsSUFBSSxHQUFHUSxJQUFJO0FBQ3pDO0FBRUE7Ozs7Ozs7Q0FPQyxHQUNEVCxVQUFVTSxTQUFTLENBQUNRLEdBQUcsR0FBRyxTQUFVTixHQUFHLEVBQUVDLEdBQUcsRUFBRUMsS0FBSztJQUNqRCxJQUFJLENBQUNQLElBQUksQ0FBQ0ssTUFBTSxJQUFJLENBQUNQLElBQUksR0FBR1EsSUFBSSxJQUFJQztBQUN0QztBQUVBOzs7Ozs7Q0FNQyxHQUNEVixVQUFVTSxTQUFTLENBQUNTLFVBQVUsR0FBRyxTQUFVUCxHQUFHLEVBQUVDLEdBQUc7SUFDakQsT0FBTyxJQUFJLENBQUNKLFdBQVcsQ0FBQ0csTUFBTSxJQUFJLENBQUNQLElBQUksR0FBR1EsSUFBSTtBQUNoRDtBQUVBTyxPQUFPQyxPQUFPLEdBQUdqQiIsInNvdXJjZXMiOlsid2VicGFjazovL3NtYXJ0LWF1ZGl0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL3FyY29kZUAxLjUuMy9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9jb3JlL2JpdC1tYXRyaXguanM/NjAxZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEhlbHBlciBjbGFzcyB0byBoYW5kbGUgUVIgQ29kZSBzeW1ib2wgbW9kdWxlc1xuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBzaXplIFN5bWJvbCBzaXplXG4gKi9cbmZ1bmN0aW9uIEJpdE1hdHJpeCAoc2l6ZSkge1xuICBpZiAoIXNpemUgfHwgc2l6ZSA8IDEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0JpdE1hdHJpeCBzaXplIG11c3QgYmUgZGVmaW5lZCBhbmQgZ3JlYXRlciB0aGFuIDAnKVxuICB9XG5cbiAgdGhpcy5zaXplID0gc2l6ZVxuICB0aGlzLmRhdGEgPSBuZXcgVWludDhBcnJheShzaXplICogc2l6ZSlcbiAgdGhpcy5yZXNlcnZlZEJpdCA9IG5ldyBVaW50OEFycmF5KHNpemUgKiBzaXplKVxufVxuXG4vKipcbiAqIFNldCBiaXQgdmFsdWUgYXQgc3BlY2lmaWVkIGxvY2F0aW9uXG4gKiBJZiByZXNlcnZlZCBmbGFnIGlzIHNldCwgdGhpcyBiaXQgd2lsbCBiZSBpZ25vcmVkIGR1cmluZyBtYXNraW5nIHByb2Nlc3NcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gIHJvd1xuICogQHBhcmFtIHtOdW1iZXJ9ICBjb2xcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gdmFsdWVcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gcmVzZXJ2ZWRcbiAqL1xuQml0TWF0cml4LnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAocm93LCBjb2wsIHZhbHVlLCByZXNlcnZlZCkge1xuICBjb25zdCBpbmRleCA9IHJvdyAqIHRoaXMuc2l6ZSArIGNvbFxuICB0aGlzLmRhdGFbaW5kZXhdID0gdmFsdWVcbiAgaWYgKHJlc2VydmVkKSB0aGlzLnJlc2VydmVkQml0W2luZGV4XSA9IHRydWVcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGJpdCB2YWx1ZSBhdCBzcGVjaWZpZWQgbG9jYXRpb25cbiAqXG4gKiBAcGFyYW0gIHtOdW1iZXJ9ICByb3dcbiAqIEBwYXJhbSAge051bWJlcn0gIGNvbFxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xuQml0TWF0cml4LnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAocm93LCBjb2wpIHtcbiAgcmV0dXJuIHRoaXMuZGF0YVtyb3cgKiB0aGlzLnNpemUgKyBjb2xdXG59XG5cbi8qKlxuICogQXBwbGllcyB4b3Igb3BlcmF0b3IgYXQgc3BlY2lmaWVkIGxvY2F0aW9uXG4gKiAodXNlZCBkdXJpbmcgbWFza2luZyBwcm9jZXNzKVxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSAgcm93XG4gKiBAcGFyYW0ge051bWJlcn0gIGNvbFxuICogQHBhcmFtIHtCb29sZWFufSB2YWx1ZVxuICovXG5CaXRNYXRyaXgucHJvdG90eXBlLnhvciA9IGZ1bmN0aW9uIChyb3csIGNvbCwgdmFsdWUpIHtcbiAgdGhpcy5kYXRhW3JvdyAqIHRoaXMuc2l6ZSArIGNvbF0gXj0gdmFsdWVcbn1cblxuLyoqXG4gKiBDaGVjayBpZiBiaXQgYXQgc3BlY2lmaWVkIGxvY2F0aW9uIGlzIHJlc2VydmVkXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9ICAgcm93XG4gKiBAcGFyYW0ge051bWJlcn0gICBjb2xcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cbkJpdE1hdHJpeC5wcm90b3R5cGUuaXNSZXNlcnZlZCA9IGZ1bmN0aW9uIChyb3csIGNvbCkge1xuICByZXR1cm4gdGhpcy5yZXNlcnZlZEJpdFtyb3cgKiB0aGlzLnNpemUgKyBjb2xdXG59XG5cbm1vZHVsZS5leHBvcnRzID0gQml0TWF0cml4XG4iXSwibmFtZXMiOlsiQml0TWF0cml4Iiwic2l6ZSIsIkVycm9yIiwiZGF0YSIsIlVpbnQ4QXJyYXkiLCJyZXNlcnZlZEJpdCIsInByb3RvdHlwZSIsInNldCIsInJvdyIsImNvbCIsInZhbHVlIiwicmVzZXJ2ZWQiLCJpbmRleCIsImdldCIsInhvciIsImlzUmVzZXJ2ZWQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/bit-matrix.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/byte-data.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/byte-data.js ***!
  \***********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst encodeUtf8 = __webpack_require__(/*! encode-utf8 */ \"(ssr)/./node_modules/.pnpm/encode-utf8@1.0.3/node_modules/encode-utf8/index.js\");\nconst Mode = __webpack_require__(/*! ./mode */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/mode.js\");\nfunction ByteData(data) {\n    this.mode = Mode.BYTE;\n    if (typeof data === \"string\") {\n        data = encodeUtf8(data);\n    }\n    this.data = new Uint8Array(data);\n}\nByteData.getBitsLength = function getBitsLength(length) {\n    return length * 8;\n};\nByteData.prototype.getLength = function getLength() {\n    return this.data.length;\n};\nByteData.prototype.getBitsLength = function getBitsLength() {\n    return ByteData.getBitsLength(this.data.length);\n};\nByteData.prototype.write = function(bitBuffer) {\n    for(let i = 0, l = this.data.length; i < l; i++){\n        bitBuffer.put(this.data[i], 8);\n    }\n};\nmodule.exports = ByteData;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS4zL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvYnl0ZS1kYXRhLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxNQUFNQSxhQUFhQyxtQkFBT0EsQ0FBQztBQUMzQixNQUFNQyxPQUFPRCxtQkFBT0EsQ0FBQztBQUVyQixTQUFTRSxTQUFVQyxJQUFJO0lBQ3JCLElBQUksQ0FBQ0MsSUFBSSxHQUFHSCxLQUFLSSxJQUFJO0lBQ3JCLElBQUksT0FBUUYsU0FBVSxVQUFVO1FBQzlCQSxPQUFPSixXQUFXSTtJQUNwQjtJQUNBLElBQUksQ0FBQ0EsSUFBSSxHQUFHLElBQUlHLFdBQVdIO0FBQzdCO0FBRUFELFNBQVNLLGFBQWEsR0FBRyxTQUFTQSxjQUFlQyxNQUFNO0lBQ3JELE9BQU9BLFNBQVM7QUFDbEI7QUFFQU4sU0FBU08sU0FBUyxDQUFDQyxTQUFTLEdBQUcsU0FBU0E7SUFDdEMsT0FBTyxJQUFJLENBQUNQLElBQUksQ0FBQ0ssTUFBTTtBQUN6QjtBQUVBTixTQUFTTyxTQUFTLENBQUNGLGFBQWEsR0FBRyxTQUFTQTtJQUMxQyxPQUFPTCxTQUFTSyxhQUFhLENBQUMsSUFBSSxDQUFDSixJQUFJLENBQUNLLE1BQU07QUFDaEQ7QUFFQU4sU0FBU08sU0FBUyxDQUFDRSxLQUFLLEdBQUcsU0FBVUMsU0FBUztJQUM1QyxJQUFLLElBQUlDLElBQUksR0FBR0MsSUFBSSxJQUFJLENBQUNYLElBQUksQ0FBQ0ssTUFBTSxFQUFFSyxJQUFJQyxHQUFHRCxJQUFLO1FBQ2hERCxVQUFVRyxHQUFHLENBQUMsSUFBSSxDQUFDWixJQUFJLENBQUNVLEVBQUUsRUFBRTtJQUM5QjtBQUNGO0FBRUFHLE9BQU9DLE9BQU8sR0FBR2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbWFydC1hdWRpdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9xcmNvZGVAMS41LjMvbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9ieXRlLWRhdGEuanM/ODFkZiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBlbmNvZGVVdGY4ID0gcmVxdWlyZSgnZW5jb2RlLXV0ZjgnKVxuY29uc3QgTW9kZSA9IHJlcXVpcmUoJy4vbW9kZScpXG5cbmZ1bmN0aW9uIEJ5dGVEYXRhIChkYXRhKSB7XG4gIHRoaXMubW9kZSA9IE1vZGUuQllURVxuICBpZiAodHlwZW9mIChkYXRhKSA9PT0gJ3N0cmluZycpIHtcbiAgICBkYXRhID0gZW5jb2RlVXRmOChkYXRhKVxuICB9XG4gIHRoaXMuZGF0YSA9IG5ldyBVaW50OEFycmF5KGRhdGEpXG59XG5cbkJ5dGVEYXRhLmdldEJpdHNMZW5ndGggPSBmdW5jdGlvbiBnZXRCaXRzTGVuZ3RoIChsZW5ndGgpIHtcbiAgcmV0dXJuIGxlbmd0aCAqIDhcbn1cblxuQnl0ZURhdGEucHJvdG90eXBlLmdldExlbmd0aCA9IGZ1bmN0aW9uIGdldExlbmd0aCAoKSB7XG4gIHJldHVybiB0aGlzLmRhdGEubGVuZ3RoXG59XG5cbkJ5dGVEYXRhLnByb3RvdHlwZS5nZXRCaXRzTGVuZ3RoID0gZnVuY3Rpb24gZ2V0Qml0c0xlbmd0aCAoKSB7XG4gIHJldHVybiBCeXRlRGF0YS5nZXRCaXRzTGVuZ3RoKHRoaXMuZGF0YS5sZW5ndGgpXG59XG5cbkJ5dGVEYXRhLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChiaXRCdWZmZXIpIHtcbiAgZm9yIChsZXQgaSA9IDAsIGwgPSB0aGlzLmRhdGEubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgYml0QnVmZmVyLnB1dCh0aGlzLmRhdGFbaV0sIDgpXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBCeXRlRGF0YVxuIl0sIm5hbWVzIjpbImVuY29kZVV0ZjgiLCJyZXF1aXJlIiwiTW9kZSIsIkJ5dGVEYXRhIiwiZGF0YSIsIm1vZGUiLCJCWVRFIiwiVWludDhBcnJheSIsImdldEJpdHNMZW5ndGgiLCJsZW5ndGgiLCJwcm90b3R5cGUiLCJnZXRMZW5ndGgiLCJ3cml0ZSIsImJpdEJ1ZmZlciIsImkiLCJsIiwicHV0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/byte-data.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/error-correction-code.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/error-correction-code.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const ECLevel = __webpack_require__(/*! ./error-correction-level */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/error-correction-level.js\");\nconst EC_BLOCKS_TABLE = [\n    // L  M  Q  H\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    2,\n    2,\n    1,\n    2,\n    2,\n    4,\n    1,\n    2,\n    4,\n    4,\n    2,\n    4,\n    4,\n    4,\n    2,\n    4,\n    6,\n    5,\n    2,\n    4,\n    6,\n    6,\n    2,\n    5,\n    8,\n    8,\n    4,\n    5,\n    8,\n    8,\n    4,\n    5,\n    8,\n    11,\n    4,\n    8,\n    10,\n    11,\n    4,\n    9,\n    12,\n    16,\n    4,\n    9,\n    16,\n    16,\n    6,\n    10,\n    12,\n    18,\n    6,\n    10,\n    17,\n    16,\n    6,\n    11,\n    16,\n    19,\n    6,\n    13,\n    18,\n    21,\n    7,\n    14,\n    21,\n    25,\n    8,\n    16,\n    20,\n    25,\n    8,\n    17,\n    23,\n    25,\n    9,\n    17,\n    23,\n    34,\n    9,\n    18,\n    25,\n    30,\n    10,\n    20,\n    27,\n    32,\n    12,\n    21,\n    29,\n    35,\n    12,\n    23,\n    34,\n    37,\n    12,\n    25,\n    34,\n    40,\n    13,\n    26,\n    35,\n    42,\n    14,\n    28,\n    38,\n    45,\n    15,\n    29,\n    40,\n    48,\n    16,\n    31,\n    43,\n    51,\n    17,\n    33,\n    45,\n    54,\n    18,\n    35,\n    48,\n    57,\n    19,\n    37,\n    51,\n    60,\n    19,\n    38,\n    53,\n    63,\n    20,\n    40,\n    56,\n    66,\n    21,\n    43,\n    59,\n    70,\n    22,\n    45,\n    62,\n    74,\n    24,\n    47,\n    65,\n    77,\n    25,\n    49,\n    68,\n    81\n];\nconst EC_CODEWORDS_TABLE = [\n    // L  M  Q  H\n    7,\n    10,\n    13,\n    17,\n    10,\n    16,\n    22,\n    28,\n    15,\n    26,\n    36,\n    44,\n    20,\n    36,\n    52,\n    64,\n    26,\n    48,\n    72,\n    88,\n    36,\n    64,\n    96,\n    112,\n    40,\n    72,\n    108,\n    130,\n    48,\n    88,\n    132,\n    156,\n    60,\n    110,\n    160,\n    192,\n    72,\n    130,\n    192,\n    224,\n    80,\n    150,\n    224,\n    264,\n    96,\n    176,\n    260,\n    308,\n    104,\n    198,\n    288,\n    352,\n    120,\n    216,\n    320,\n    384,\n    132,\n    240,\n    360,\n    432,\n    144,\n    280,\n    408,\n    480,\n    168,\n    308,\n    448,\n    532,\n    180,\n    338,\n    504,\n    588,\n    196,\n    364,\n    546,\n    650,\n    224,\n    416,\n    600,\n    700,\n    224,\n    442,\n    644,\n    750,\n    252,\n    476,\n    690,\n    816,\n    270,\n    504,\n    750,\n    900,\n    300,\n    560,\n    810,\n    960,\n    312,\n    588,\n    870,\n    1050,\n    336,\n    644,\n    952,\n    1110,\n    360,\n    700,\n    1020,\n    1200,\n    390,\n    728,\n    1050,\n    1260,\n    420,\n    784,\n    1140,\n    1350,\n    450,\n    812,\n    1200,\n    1440,\n    480,\n    868,\n    1290,\n    1530,\n    510,\n    924,\n    1350,\n    1620,\n    540,\n    980,\n    1440,\n    1710,\n    570,\n    1036,\n    1530,\n    1800,\n    570,\n    1064,\n    1590,\n    1890,\n    600,\n    1120,\n    1680,\n    1980,\n    630,\n    1204,\n    1770,\n    2100,\n    660,\n    1260,\n    1860,\n    2220,\n    720,\n    1316,\n    1950,\n    2310,\n    750,\n    1372,\n    2040,\n    2430\n];\n/**\r\n * Returns the number of error correction block that the QR Code should contain\r\n * for the specified version and error correction level.\r\n *\r\n * @param  {Number} version              QR Code version\r\n * @param  {Number} errorCorrectionLevel Error correction level\r\n * @return {Number}                      Number of error correction blocks\r\n */ exports.getBlocksCount = function getBlocksCount(version, errorCorrectionLevel) {\n    switch(errorCorrectionLevel){\n        case ECLevel.L:\n            return EC_BLOCKS_TABLE[(version - 1) * 4 + 0];\n        case ECLevel.M:\n            return EC_BLOCKS_TABLE[(version - 1) * 4 + 1];\n        case ECLevel.Q:\n            return EC_BLOCKS_TABLE[(version - 1) * 4 + 2];\n        case ECLevel.H:\n            return EC_BLOCKS_TABLE[(version - 1) * 4 + 3];\n        default:\n            return undefined;\n    }\n};\n/**\r\n * Returns the number of error correction codewords to use for the specified\r\n * version and error correction level.\r\n *\r\n * @param  {Number} version              QR Code version\r\n * @param  {Number} errorCorrectionLevel Error correction level\r\n * @return {Number}                      Number of error correction codewords\r\n */ exports.getTotalCodewordsCount = function getTotalCodewordsCount(version, errorCorrectionLevel) {\n    switch(errorCorrectionLevel){\n        case ECLevel.L:\n            return EC_CODEWORDS_TABLE[(version - 1) * 4 + 0];\n        case ECLevel.M:\n            return EC_CODEWORDS_TABLE[(version - 1) * 4 + 1];\n        case ECLevel.Q:\n            return EC_CODEWORDS_TABLE[(version - 1) * 4 + 2];\n        case ECLevel.H:\n            return EC_CODEWORDS_TABLE[(version - 1) * 4 + 3];\n        default:\n            return undefined;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/error-correction-code.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/error-correction-level.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/error-correction-level.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("exports.L = {\n    bit: 1\n};\nexports.M = {\n    bit: 0\n};\nexports.Q = {\n    bit: 3\n};\nexports.H = {\n    bit: 2\n};\nfunction fromString(string) {\n    if (typeof string !== \"string\") {\n        throw new Error(\"Param is not a string\");\n    }\n    const lcStr = string.toLowerCase();\n    switch(lcStr){\n        case \"l\":\n        case \"low\":\n            return exports.L;\n        case \"m\":\n        case \"medium\":\n            return exports.M;\n        case \"q\":\n        case \"quartile\":\n            return exports.Q;\n        case \"h\":\n        case \"high\":\n            return exports.H;\n        default:\n            throw new Error(\"Unknown EC Level: \" + string);\n    }\n}\nexports.isValid = function isValid(level) {\n    return level && typeof level.bit !== \"undefined\" && level.bit >= 0 && level.bit < 4;\n};\nexports.from = function from(value, defaultValue) {\n    if (exports.isValid(value)) {\n        return value;\n    }\n    try {\n        return fromString(value);\n    } catch (e) {\n        return defaultValue;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS4zL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvZXJyb3ItY29ycmVjdGlvbi1sZXZlbC5qcyIsIm1hcHBpbmdzIjoiQUFBQUEsU0FBUyxHQUFHO0lBQUVFLEtBQUs7QUFBRTtBQUNyQkYsU0FBUyxHQUFHO0lBQUVFLEtBQUs7QUFBRTtBQUNyQkYsU0FBUyxHQUFHO0lBQUVFLEtBQUs7QUFBRTtBQUNyQkYsU0FBUyxHQUFHO0lBQUVFLEtBQUs7QUFBRTtBQUVyQixTQUFTSSxXQUFZQyxNQUFNO0lBQ3pCLElBQUksT0FBT0EsV0FBVyxVQUFVO1FBQzlCLE1BQU0sSUFBSUMsTUFBTTtJQUNsQjtJQUVBLE1BQU1DLFFBQVFGLE9BQU9HLFdBQVc7SUFFaEMsT0FBUUQ7UUFDTixLQUFLO1FBQ0wsS0FBSztZQUNILE9BQU9ULFFBQVFDLENBQUM7UUFFbEIsS0FBSztRQUNMLEtBQUs7WUFDSCxPQUFPRCxRQUFRRyxDQUFDO1FBRWxCLEtBQUs7UUFDTCxLQUFLO1lBQ0gsT0FBT0gsUUFBUUksQ0FBQztRQUVsQixLQUFLO1FBQ0wsS0FBSztZQUNILE9BQU9KLFFBQVFLLENBQUM7UUFFbEI7WUFDRSxNQUFNLElBQUlHLE1BQU0sdUJBQXVCRDtJQUMzQztBQUNGO0FBRUFQLGVBQWUsR0FBRyxTQUFTVyxRQUFTQyxLQUFLO0lBQ3ZDLE9BQU9BLFNBQVMsT0FBT0EsTUFBTVYsR0FBRyxLQUFLLGVBQ25DVSxNQUFNVixHQUFHLElBQUksS0FBS1UsTUFBTVYsR0FBRyxHQUFHO0FBQ2xDO0FBRUFGLFlBQVksR0FBRyxTQUFTYSxLQUFNQyxLQUFLLEVBQUVDLFlBQVk7SUFDL0MsSUFBSWYsUUFBUVcsT0FBTyxDQUFDRyxRQUFRO1FBQzFCLE9BQU9BO0lBQ1Q7SUFFQSxJQUFJO1FBQ0YsT0FBT1IsV0FBV1E7SUFDcEIsRUFBRSxPQUFPRSxHQUFHO1FBQ1YsT0FBT0Q7SUFDVDtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc21hcnQtYXVkaXQvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS4zL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvZXJyb3ItY29ycmVjdGlvbi1sZXZlbC5qcz8xYzlkIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMuTCA9IHsgYml0OiAxIH1cbmV4cG9ydHMuTSA9IHsgYml0OiAwIH1cbmV4cG9ydHMuUSA9IHsgYml0OiAzIH1cbmV4cG9ydHMuSCA9IHsgYml0OiAyIH1cblxuZnVuY3Rpb24gZnJvbVN0cmluZyAoc3RyaW5nKSB7XG4gIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBFcnJvcignUGFyYW0gaXMgbm90IGEgc3RyaW5nJylcbiAgfVxuXG4gIGNvbnN0IGxjU3RyID0gc3RyaW5nLnRvTG93ZXJDYXNlKClcblxuICBzd2l0Y2ggKGxjU3RyKSB7XG4gICAgY2FzZSAnbCc6XG4gICAgY2FzZSAnbG93JzpcbiAgICAgIHJldHVybiBleHBvcnRzLkxcblxuICAgIGNhc2UgJ20nOlxuICAgIGNhc2UgJ21lZGl1bSc6XG4gICAgICByZXR1cm4gZXhwb3J0cy5NXG5cbiAgICBjYXNlICdxJzpcbiAgICBjYXNlICdxdWFydGlsZSc6XG4gICAgICByZXR1cm4gZXhwb3J0cy5RXG5cbiAgICBjYXNlICdoJzpcbiAgICBjYXNlICdoaWdoJzpcbiAgICAgIHJldHVybiBleHBvcnRzLkhcblxuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gRUMgTGV2ZWw6ICcgKyBzdHJpbmcpXG4gIH1cbn1cblxuZXhwb3J0cy5pc1ZhbGlkID0gZnVuY3Rpb24gaXNWYWxpZCAobGV2ZWwpIHtcbiAgcmV0dXJuIGxldmVsICYmIHR5cGVvZiBsZXZlbC5iaXQgIT09ICd1bmRlZmluZWQnICYmXG4gICAgbGV2ZWwuYml0ID49IDAgJiYgbGV2ZWwuYml0IDwgNFxufVxuXG5leHBvcnRzLmZyb20gPSBmdW5jdGlvbiBmcm9tICh2YWx1ZSwgZGVmYXVsdFZhbHVlKSB7XG4gIGlmIChleHBvcnRzLmlzVmFsaWQodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlXG4gIH1cblxuICB0cnkge1xuICAgIHJldHVybiBmcm9tU3RyaW5nKHZhbHVlKVxuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRWYWx1ZVxuICB9XG59XG4iXSwibmFtZXMiOlsiZXhwb3J0cyIsIkwiLCJiaXQiLCJNIiwiUSIsIkgiLCJmcm9tU3RyaW5nIiwic3RyaW5nIiwiRXJyb3IiLCJsY1N0ciIsInRvTG93ZXJDYXNlIiwiaXNWYWxpZCIsImxldmVsIiwiZnJvbSIsInZhbHVlIiwiZGVmYXVsdFZhbHVlIiwiZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/error-correction-level.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/finder-pattern.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/finder-pattern.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const getSymbolSize = (__webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/utils.js\").getSymbolSize);\nconst FINDER_PATTERN_SIZE = 7;\n/**\n * Returns an array containing the positions of each finder pattern.\n * Each array's element represent the top-left point of the pattern as (x, y) coordinates\n *\n * @param  {Number} version QR Code version\n * @return {Array}          Array of coordinates\n */ exports.getPositions = function getPositions(version) {\n    const size = getSymbolSize(version);\n    return [\n        // top-left\n        [\n            0,\n            0\n        ],\n        // top-right\n        [\n            size - FINDER_PATTERN_SIZE,\n            0\n        ],\n        // bottom-left\n        [\n            0,\n            size - FINDER_PATTERN_SIZE\n        ]\n    ];\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS4zL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvZmluZGVyLXBhdHRlcm4uanMiLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsZ0JBQWdCQyxtSUFBZ0M7QUFDdEQsTUFBTUMsc0JBQXNCO0FBRTVCOzs7Ozs7Q0FNQyxHQUNEQyxvQkFBb0IsR0FBRyxTQUFTQyxhQUFjQyxPQUFPO0lBQ25ELE1BQU1DLE9BQU9OLGNBQWNLO0lBRTNCLE9BQU87UUFDTCxXQUFXO1FBQ1g7WUFBQztZQUFHO1NBQUU7UUFDTixZQUFZO1FBQ1o7WUFBQ0MsT0FBT0o7WUFBcUI7U0FBRTtRQUMvQixjQUFjO1FBQ2Q7WUFBQztZQUFHSSxPQUFPSjtTQUFvQjtLQUNoQztBQUNIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc21hcnQtYXVkaXQvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS4zL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvZmluZGVyLXBhdHRlcm4uanM/YjlhZiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBnZXRTeW1ib2xTaXplID0gcmVxdWlyZSgnLi91dGlscycpLmdldFN5bWJvbFNpemVcbmNvbnN0IEZJTkRFUl9QQVRURVJOX1NJWkUgPSA3XG5cbi8qKlxuICogUmV0dXJucyBhbiBhcnJheSBjb250YWluaW5nIHRoZSBwb3NpdGlvbnMgb2YgZWFjaCBmaW5kZXIgcGF0dGVybi5cbiAqIEVhY2ggYXJyYXkncyBlbGVtZW50IHJlcHJlc2VudCB0aGUgdG9wLWxlZnQgcG9pbnQgb2YgdGhlIHBhdHRlcm4gYXMgKHgsIHkpIGNvb3JkaW5hdGVzXG4gKlxuICogQHBhcmFtICB7TnVtYmVyfSB2ZXJzaW9uIFFSIENvZGUgdmVyc2lvblxuICogQHJldHVybiB7QXJyYXl9ICAgICAgICAgIEFycmF5IG9mIGNvb3JkaW5hdGVzXG4gKi9cbmV4cG9ydHMuZ2V0UG9zaXRpb25zID0gZnVuY3Rpb24gZ2V0UG9zaXRpb25zICh2ZXJzaW9uKSB7XG4gIGNvbnN0IHNpemUgPSBnZXRTeW1ib2xTaXplKHZlcnNpb24pXG5cbiAgcmV0dXJuIFtcbiAgICAvLyB0b3AtbGVmdFxuICAgIFswLCAwXSxcbiAgICAvLyB0b3AtcmlnaHRcbiAgICBbc2l6ZSAtIEZJTkRFUl9QQVRURVJOX1NJWkUsIDBdLFxuICAgIC8vIGJvdHRvbS1sZWZ0XG4gICAgWzAsIHNpemUgLSBGSU5ERVJfUEFUVEVSTl9TSVpFXVxuICBdXG59XG4iXSwibmFtZXMiOlsiZ2V0U3ltYm9sU2l6ZSIsInJlcXVpcmUiLCJGSU5ERVJfUEFUVEVSTl9TSVpFIiwiZXhwb3J0cyIsImdldFBvc2l0aW9ucyIsInZlcnNpb24iLCJzaXplIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/finder-pattern.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/format-info.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/format-info.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const Utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/utils.js\");\nconst G15 = 1 << 10 | 1 << 8 | 1 << 5 | 1 << 4 | 1 << 2 | 1 << 1 | 1 << 0;\nconst G15_MASK = 1 << 14 | 1 << 12 | 1 << 10 | 1 << 4 | 1 << 1;\nconst G15_BCH = Utils.getBCHDigit(G15);\n/**\n * Returns format information with relative error correction bits\n *\n * The format information is a 15-bit sequence containing 5 data bits,\n * with 10 error correction bits calculated using the (15, 5) BCH code.\n *\n * @param  {Number} errorCorrectionLevel Error correction level\n * @param  {Number} mask                 Mask pattern\n * @return {Number}                      Encoded format information bits\n */ exports.getEncodedBits = function getEncodedBits(errorCorrectionLevel, mask) {\n    const data = errorCorrectionLevel.bit << 3 | mask;\n    let d = data << 10;\n    while(Utils.getBCHDigit(d) - G15_BCH >= 0){\n        d ^= G15 << Utils.getBCHDigit(d) - G15_BCH;\n    }\n    // xor final data with mask pattern in order to ensure that\n    // no combination of Error Correction Level and data mask pattern\n    // will result in an all-zero data string\n    return (data << 10 | d) ^ G15_MASK;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS4zL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvZm9ybWF0LWluZm8uanMiLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsUUFBUUMsbUJBQU9BLENBQUM7QUFFdEIsTUFBTUMsTUFBTSxLQUFNLEtBQU8sS0FBSyxJQUFNLEtBQUssSUFBTSxLQUFLLElBQU0sS0FBSyxJQUFNLEtBQUssSUFBTSxLQUFLO0FBQ3JGLE1BQU1DLFdBQVcsS0FBTSxLQUFPLEtBQUssS0FBTyxLQUFLLEtBQU8sS0FBSyxJQUFNLEtBQUs7QUFDdEUsTUFBTUMsVUFBVUosTUFBTUssV0FBVyxDQUFDSDtBQUVsQzs7Ozs7Ozs7O0NBU0MsR0FDREksc0JBQXNCLEdBQUcsU0FBU0MsZUFBZ0JDLG9CQUFvQixFQUFFQyxJQUFJO0lBQzFFLE1BQU1DLE9BQVEscUJBQXNCQyxHQUFHLElBQUksSUFBS0Y7SUFDaEQsSUFBSUcsSUFBSUYsUUFBUTtJQUVoQixNQUFPVixNQUFNSyxXQUFXLENBQUNPLEtBQUtSLFdBQVcsRUFBRztRQUMxQ1EsS0FBTVYsT0FBUUYsTUFBTUssV0FBVyxDQUFDTyxLQUFLUjtJQUN2QztJQUVBLDJEQUEyRDtJQUMzRCxpRUFBaUU7SUFDakUseUNBQXlDO0lBQ3pDLE9BQU8sQ0FBQyxRQUFTLEtBQU1RLENBQUFBLElBQUtUO0FBQzlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc21hcnQtYXVkaXQvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS4zL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvZm9ybWF0LWluZm8uanM/ZjE2MiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBVdGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKVxuXG5jb25zdCBHMTUgPSAoMSA8PCAxMCkgfCAoMSA8PCA4KSB8ICgxIDw8IDUpIHwgKDEgPDwgNCkgfCAoMSA8PCAyKSB8ICgxIDw8IDEpIHwgKDEgPDwgMClcbmNvbnN0IEcxNV9NQVNLID0gKDEgPDwgMTQpIHwgKDEgPDwgMTIpIHwgKDEgPDwgMTApIHwgKDEgPDwgNCkgfCAoMSA8PCAxKVxuY29uc3QgRzE1X0JDSCA9IFV0aWxzLmdldEJDSERpZ2l0KEcxNSlcblxuLyoqXG4gKiBSZXR1cm5zIGZvcm1hdCBpbmZvcm1hdGlvbiB3aXRoIHJlbGF0aXZlIGVycm9yIGNvcnJlY3Rpb24gYml0c1xuICpcbiAqIFRoZSBmb3JtYXQgaW5mb3JtYXRpb24gaXMgYSAxNS1iaXQgc2VxdWVuY2UgY29udGFpbmluZyA1IGRhdGEgYml0cyxcbiAqIHdpdGggMTAgZXJyb3IgY29ycmVjdGlvbiBiaXRzIGNhbGN1bGF0ZWQgdXNpbmcgdGhlICgxNSwgNSkgQkNIIGNvZGUuXG4gKlxuICogQHBhcmFtICB7TnVtYmVyfSBlcnJvckNvcnJlY3Rpb25MZXZlbCBFcnJvciBjb3JyZWN0aW9uIGxldmVsXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IG1hc2sgICAgICAgICAgICAgICAgIE1hc2sgcGF0dGVyblxuICogQHJldHVybiB7TnVtYmVyfSAgICAgICAgICAgICAgICAgICAgICBFbmNvZGVkIGZvcm1hdCBpbmZvcm1hdGlvbiBiaXRzXG4gKi9cbmV4cG9ydHMuZ2V0RW5jb2RlZEJpdHMgPSBmdW5jdGlvbiBnZXRFbmNvZGVkQml0cyAoZXJyb3JDb3JyZWN0aW9uTGV2ZWwsIG1hc2spIHtcbiAgY29uc3QgZGF0YSA9ICgoZXJyb3JDb3JyZWN0aW9uTGV2ZWwuYml0IDw8IDMpIHwgbWFzaylcbiAgbGV0IGQgPSBkYXRhIDw8IDEwXG5cbiAgd2hpbGUgKFV0aWxzLmdldEJDSERpZ2l0KGQpIC0gRzE1X0JDSCA+PSAwKSB7XG4gICAgZCBePSAoRzE1IDw8IChVdGlscy5nZXRCQ0hEaWdpdChkKSAtIEcxNV9CQ0gpKVxuICB9XG5cbiAgLy8geG9yIGZpbmFsIGRhdGEgd2l0aCBtYXNrIHBhdHRlcm4gaW4gb3JkZXIgdG8gZW5zdXJlIHRoYXRcbiAgLy8gbm8gY29tYmluYXRpb24gb2YgRXJyb3IgQ29ycmVjdGlvbiBMZXZlbCBhbmQgZGF0YSBtYXNrIHBhdHRlcm5cbiAgLy8gd2lsbCByZXN1bHQgaW4gYW4gYWxsLXplcm8gZGF0YSBzdHJpbmdcbiAgcmV0dXJuICgoZGF0YSA8PCAxMCkgfCBkKSBeIEcxNV9NQVNLXG59XG4iXSwibmFtZXMiOlsiVXRpbHMiLCJyZXF1aXJlIiwiRzE1IiwiRzE1X01BU0siLCJHMTVfQkNIIiwiZ2V0QkNIRGlnaXQiLCJleHBvcnRzIiwiZ2V0RW5jb2RlZEJpdHMiLCJlcnJvckNvcnJlY3Rpb25MZXZlbCIsIm1hc2siLCJkYXRhIiwiYml0IiwiZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/format-info.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/galois-field.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/galois-field.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("const EXP_TABLE = new Uint8Array(512);\nconst LOG_TABLE = new Uint8Array(256) /**\n * Precompute the log and anti-log tables for faster computation later\n *\n * For each possible value in the galois field 2^8, we will pre-compute\n * the logarithm and anti-logarithm (exponential) of this value\n *\n * ref {@link https://en.wikiversity.org/wiki/Reed%E2%80%93Solomon_codes_for_coders#Introduction_to_mathematical_fields}\n */ ;\n(function initTables() {\n    let x = 1;\n    for(let i = 0; i < 255; i++){\n        EXP_TABLE[i] = x;\n        LOG_TABLE[x] = i;\n        x <<= 1 // multiply by 2\n        ;\n        // The QR code specification says to use byte-wise modulo 100011101 arithmetic.\n        // This means that when a number is 256 or larger, it should be XORed with 0x11D.\n        if (x & 0x100) {\n            x ^= 0x11D;\n        }\n    }\n    // Optimization: double the size of the anti-log table so that we don't need to mod 255 to\n    // stay inside the bounds (because we will mainly use this table for the multiplication of\n    // two GF numbers, no more).\n    // @see {@link mul}\n    for(let i = 255; i < 512; i++){\n        EXP_TABLE[i] = EXP_TABLE[i - 255];\n    }\n})();\n/**\n * Returns log value of n inside Galois Field\n *\n * @param  {Number} n\n * @return {Number}\n */ exports.log = function log(n) {\n    if (n < 1) throw new Error(\"log(\" + n + \")\");\n    return LOG_TABLE[n];\n};\n/**\n * Returns anti-log value of n inside Galois Field\n *\n * @param  {Number} n\n * @return {Number}\n */ exports.exp = function exp(n) {\n    return EXP_TABLE[n];\n};\n/**\n * Multiplies two number inside Galois Field\n *\n * @param  {Number} x\n * @param  {Number} y\n * @return {Number}\n */ exports.mul = function mul(x, y) {\n    if (x === 0 || y === 0) return 0;\n    // should be EXP_TABLE[(LOG_TABLE[x] + LOG_TABLE[y]) % 255] if EXP_TABLE wasn't oversized\n    // @see {@link initTables}\n    return EXP_TABLE[LOG_TABLE[x] + LOG_TABLE[y]];\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS4zL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvZ2Fsb2lzLWZpZWxkLmpzIiwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLFlBQVksSUFBSUMsV0FBVztBQUNqQyxNQUFNQyxZQUFZLElBQUlELFdBQVcsS0FDakM7Ozs7Ozs7Q0FPQztBQUNDLFVBQVNFO0lBQ1QsSUFBSUMsSUFBSTtJQUNSLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJLEtBQUtBLElBQUs7UUFDNUJMLFNBQVMsQ0FBQ0ssRUFBRSxHQUFHRDtRQUNmRixTQUFTLENBQUNFLEVBQUUsR0FBR0M7UUFFZkQsTUFBTSxFQUFFLGdCQUFnQjs7UUFFeEIsK0VBQStFO1FBQy9FLGlGQUFpRjtRQUNqRixJQUFJQSxJQUFJLE9BQU87WUFDYkEsS0FBSztRQUNQO0lBQ0Y7SUFFQSwwRkFBMEY7SUFDMUYsMEZBQTBGO0lBQzFGLDRCQUE0QjtJQUM1QixtQkFBbUI7SUFDbkIsSUFBSyxJQUFJQyxJQUFJLEtBQUtBLElBQUksS0FBS0EsSUFBSztRQUM5QkwsU0FBUyxDQUFDSyxFQUFFLEdBQUdMLFNBQVMsQ0FBQ0ssSUFBSSxJQUFJO0lBQ25DO0FBQ0Y7QUFFQTs7Ozs7Q0FLQyxHQUNEQyxXQUFXLEdBQUcsU0FBU0MsSUFBS0MsQ0FBQztJQUMzQixJQUFJQSxJQUFJLEdBQUcsTUFBTSxJQUFJQyxNQUFNLFNBQVNELElBQUk7SUFDeEMsT0FBT04sU0FBUyxDQUFDTSxFQUFFO0FBQ3JCO0FBRUE7Ozs7O0NBS0MsR0FDREYsV0FBVyxHQUFHLFNBQVNJLElBQUtGLENBQUM7SUFDM0IsT0FBT1IsU0FBUyxDQUFDUSxFQUFFO0FBQ3JCO0FBRUE7Ozs7OztDQU1DLEdBQ0RGLFdBQVcsR0FBRyxTQUFTSyxJQUFLUCxDQUFDLEVBQUVRLENBQUM7SUFDOUIsSUFBSVIsTUFBTSxLQUFLUSxNQUFNLEdBQUcsT0FBTztJQUUvQix5RkFBeUY7SUFDekYsMEJBQTBCO0lBQzFCLE9BQU9aLFNBQVMsQ0FBQ0UsU0FBUyxDQUFDRSxFQUFFLEdBQUdGLFNBQVMsQ0FBQ1UsRUFBRSxDQUFDO0FBQy9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc21hcnQtYXVkaXQvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS4zL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvZ2Fsb2lzLWZpZWxkLmpzPzg4MjAiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgRVhQX1RBQkxFID0gbmV3IFVpbnQ4QXJyYXkoNTEyKVxuY29uc3QgTE9HX1RBQkxFID0gbmV3IFVpbnQ4QXJyYXkoMjU2KVxuLyoqXG4gKiBQcmVjb21wdXRlIHRoZSBsb2cgYW5kIGFudGktbG9nIHRhYmxlcyBmb3IgZmFzdGVyIGNvbXB1dGF0aW9uIGxhdGVyXG4gKlxuICogRm9yIGVhY2ggcG9zc2libGUgdmFsdWUgaW4gdGhlIGdhbG9pcyBmaWVsZCAyXjgsIHdlIHdpbGwgcHJlLWNvbXB1dGVcbiAqIHRoZSBsb2dhcml0aG0gYW5kIGFudGktbG9nYXJpdGhtIChleHBvbmVudGlhbCkgb2YgdGhpcyB2YWx1ZVxuICpcbiAqIHJlZiB7QGxpbmsgaHR0cHM6Ly9lbi53aWtpdmVyc2l0eS5vcmcvd2lraS9SZWVkJUUyJTgwJTkzU29sb21vbl9jb2Rlc19mb3JfY29kZXJzI0ludHJvZHVjdGlvbl90b19tYXRoZW1hdGljYWxfZmllbGRzfVxuICovXG47KGZ1bmN0aW9uIGluaXRUYWJsZXMgKCkge1xuICBsZXQgeCA9IDFcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCAyNTU7IGkrKykge1xuICAgIEVYUF9UQUJMRVtpXSA9IHhcbiAgICBMT0dfVEFCTEVbeF0gPSBpXG5cbiAgICB4IDw8PSAxIC8vIG11bHRpcGx5IGJ5IDJcblxuICAgIC8vIFRoZSBRUiBjb2RlIHNwZWNpZmljYXRpb24gc2F5cyB0byB1c2UgYnl0ZS13aXNlIG1vZHVsbyAxMDAwMTExMDEgYXJpdGhtZXRpYy5cbiAgICAvLyBUaGlzIG1lYW5zIHRoYXQgd2hlbiBhIG51bWJlciBpcyAyNTYgb3IgbGFyZ2VyLCBpdCBzaG91bGQgYmUgWE9SZWQgd2l0aCAweDExRC5cbiAgICBpZiAoeCAmIDB4MTAwKSB7IC8vIHNpbWlsYXIgdG8geCA+PSAyNTYsIGJ1dCBhIGxvdCBmYXN0ZXIgKGJlY2F1c2UgMHgxMDAgPT0gMjU2KVxuICAgICAgeCBePSAweDExRFxuICAgIH1cbiAgfVxuXG4gIC8vIE9wdGltaXphdGlvbjogZG91YmxlIHRoZSBzaXplIG9mIHRoZSBhbnRpLWxvZyB0YWJsZSBzbyB0aGF0IHdlIGRvbid0IG5lZWQgdG8gbW9kIDI1NSB0b1xuICAvLyBzdGF5IGluc2lkZSB0aGUgYm91bmRzIChiZWNhdXNlIHdlIHdpbGwgbWFpbmx5IHVzZSB0aGlzIHRhYmxlIGZvciB0aGUgbXVsdGlwbGljYXRpb24gb2ZcbiAgLy8gdHdvIEdGIG51bWJlcnMsIG5vIG1vcmUpLlxuICAvLyBAc2VlIHtAbGluayBtdWx9XG4gIGZvciAobGV0IGkgPSAyNTU7IGkgPCA1MTI7IGkrKykge1xuICAgIEVYUF9UQUJMRVtpXSA9IEVYUF9UQUJMRVtpIC0gMjU1XVxuICB9XG59KCkpXG5cbi8qKlxuICogUmV0dXJucyBsb2cgdmFsdWUgb2YgbiBpbnNpZGUgR2Fsb2lzIEZpZWxkXG4gKlxuICogQHBhcmFtICB7TnVtYmVyfSBuXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKi9cbmV4cG9ydHMubG9nID0gZnVuY3Rpb24gbG9nIChuKSB7XG4gIGlmIChuIDwgMSkgdGhyb3cgbmV3IEVycm9yKCdsb2coJyArIG4gKyAnKScpXG4gIHJldHVybiBMT0dfVEFCTEVbbl1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIGFudGktbG9nIHZhbHVlIG9mIG4gaW5zaWRlIEdhbG9pcyBGaWVsZFxuICpcbiAqIEBwYXJhbSAge051bWJlcn0gblxuICogQHJldHVybiB7TnVtYmVyfVxuICovXG5leHBvcnRzLmV4cCA9IGZ1bmN0aW9uIGV4cCAobikge1xuICByZXR1cm4gRVhQX1RBQkxFW25dXG59XG5cbi8qKlxuICogTXVsdGlwbGllcyB0d28gbnVtYmVyIGluc2lkZSBHYWxvaXMgRmllbGRcbiAqXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHhcbiAqIEBwYXJhbSAge051bWJlcn0geVxuICogQHJldHVybiB7TnVtYmVyfVxuICovXG5leHBvcnRzLm11bCA9IGZ1bmN0aW9uIG11bCAoeCwgeSkge1xuICBpZiAoeCA9PT0gMCB8fCB5ID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIHNob3VsZCBiZSBFWFBfVEFCTEVbKExPR19UQUJMRVt4XSArIExPR19UQUJMRVt5XSkgJSAyNTVdIGlmIEVYUF9UQUJMRSB3YXNuJ3Qgb3ZlcnNpemVkXG4gIC8vIEBzZWUge0BsaW5rIGluaXRUYWJsZXN9XG4gIHJldHVybiBFWFBfVEFCTEVbTE9HX1RBQkxFW3hdICsgTE9HX1RBQkxFW3ldXVxufVxuIl0sIm5hbWVzIjpbIkVYUF9UQUJMRSIsIlVpbnQ4QXJyYXkiLCJMT0dfVEFCTEUiLCJpbml0VGFibGVzIiwieCIsImkiLCJleHBvcnRzIiwibG9nIiwibiIsIkVycm9yIiwiZXhwIiwibXVsIiwieSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/galois-field.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/kanji-data.js":
/*!************************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/kanji-data.js ***!
  \************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst Mode = __webpack_require__(/*! ./mode */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/mode.js\");\nconst Utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/utils.js\");\nfunction KanjiData(data) {\n    this.mode = Mode.KANJI;\n    this.data = data;\n}\nKanjiData.getBitsLength = function getBitsLength(length) {\n    return length * 13;\n};\nKanjiData.prototype.getLength = function getLength() {\n    return this.data.length;\n};\nKanjiData.prototype.getBitsLength = function getBitsLength() {\n    return KanjiData.getBitsLength(this.data.length);\n};\nKanjiData.prototype.write = function(bitBuffer) {\n    let i;\n    // In the Shift JIS system, Kanji characters are represented by a two byte combination.\n    // These byte values are shifted from the JIS X 0208 values.\n    // JIS X 0208 gives details of the shift coded representation.\n    for(i = 0; i < this.data.length; i++){\n        let value = Utils.toSJIS(this.data[i]);\n        // For characters with Shift JIS values from 0x8140 to 0x9FFC:\n        if (value >= 0x8140 && value <= 0x9FFC) {\n            // Subtract 0x8140 from Shift JIS value\n            value -= 0x8140;\n        // For characters with Shift JIS values from 0xE040 to 0xEBBF\n        } else if (value >= 0xE040 && value <= 0xEBBF) {\n            // Subtract 0xC140 from Shift JIS value\n            value -= 0xC140;\n        } else {\n            throw new Error(\"Invalid SJIS character: \" + this.data[i] + \"\\n\" + \"Make sure your charset is UTF-8\");\n        }\n        // Multiply most significant byte of result by 0xC0\n        // and add least significant byte to product\n        value = (value >>> 8 & 0xff) * 0xC0 + (value & 0xff);\n        // Convert result to a 13-bit binary string\n        bitBuffer.put(value, 13);\n    }\n};\nmodule.exports = KanjiData;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS4zL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUva2FuamktZGF0YS5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsTUFBTUEsT0FBT0MsbUJBQU9BLENBQUM7QUFDckIsTUFBTUMsUUFBUUQsbUJBQU9BLENBQUM7QUFFdEIsU0FBU0UsVUFBV0MsSUFBSTtJQUN0QixJQUFJLENBQUNDLElBQUksR0FBR0wsS0FBS00sS0FBSztJQUN0QixJQUFJLENBQUNGLElBQUksR0FBR0E7QUFDZDtBQUVBRCxVQUFVSSxhQUFhLEdBQUcsU0FBU0EsY0FBZUMsTUFBTTtJQUN0RCxPQUFPQSxTQUFTO0FBQ2xCO0FBRUFMLFVBQVVNLFNBQVMsQ0FBQ0MsU0FBUyxHQUFHLFNBQVNBO0lBQ3ZDLE9BQU8sSUFBSSxDQUFDTixJQUFJLENBQUNJLE1BQU07QUFDekI7QUFFQUwsVUFBVU0sU0FBUyxDQUFDRixhQUFhLEdBQUcsU0FBU0E7SUFDM0MsT0FBT0osVUFBVUksYUFBYSxDQUFDLElBQUksQ0FBQ0gsSUFBSSxDQUFDSSxNQUFNO0FBQ2pEO0FBRUFMLFVBQVVNLFNBQVMsQ0FBQ0UsS0FBSyxHQUFHLFNBQVVDLFNBQVM7SUFDN0MsSUFBSUM7SUFFSix1RkFBdUY7SUFDdkYsNERBQTREO0lBQzVELDhEQUE4RDtJQUM5RCxJQUFLQSxJQUFJLEdBQUdBLElBQUksSUFBSSxDQUFDVCxJQUFJLENBQUNJLE1BQU0sRUFBRUssSUFBSztRQUNyQyxJQUFJQyxRQUFRWixNQUFNYSxNQUFNLENBQUMsSUFBSSxDQUFDWCxJQUFJLENBQUNTLEVBQUU7UUFFckMsOERBQThEO1FBQzlELElBQUlDLFNBQVMsVUFBVUEsU0FBUyxRQUFRO1lBQ3RDLHVDQUF1QztZQUN2Q0EsU0FBUztRQUVYLDZEQUE2RDtRQUM3RCxPQUFPLElBQUlBLFNBQVMsVUFBVUEsU0FBUyxRQUFRO1lBQzdDLHVDQUF1QztZQUN2Q0EsU0FBUztRQUNYLE9BQU87WUFDTCxNQUFNLElBQUlFLE1BQ1IsNkJBQTZCLElBQUksQ0FBQ1osSUFBSSxDQUFDUyxFQUFFLEdBQUcsT0FDNUM7UUFDSjtRQUVBLG1EQUFtRDtRQUNuRCw0Q0FBNEM7UUFDNUNDLFFBQVEsQ0FBRSxVQUFXLElBQUssSUFBRyxJQUFLLE9BQVNBLENBQUFBLFFBQVEsSUFBRztRQUV0RCwyQ0FBMkM7UUFDM0NGLFVBQVVLLEdBQUcsQ0FBQ0gsT0FBTztJQUN2QjtBQUNGO0FBRUFJLE9BQU9DLE9BQU8sR0FBR2hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc21hcnQtYXVkaXQvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS4zL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUva2FuamktZGF0YS5qcz8xOWU4Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IE1vZGUgPSByZXF1aXJlKCcuL21vZGUnKVxuY29uc3QgVXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJylcblxuZnVuY3Rpb24gS2FuamlEYXRhIChkYXRhKSB7XG4gIHRoaXMubW9kZSA9IE1vZGUuS0FOSklcbiAgdGhpcy5kYXRhID0gZGF0YVxufVxuXG5LYW5qaURhdGEuZ2V0Qml0c0xlbmd0aCA9IGZ1bmN0aW9uIGdldEJpdHNMZW5ndGggKGxlbmd0aCkge1xuICByZXR1cm4gbGVuZ3RoICogMTNcbn1cblxuS2FuamlEYXRhLnByb3RvdHlwZS5nZXRMZW5ndGggPSBmdW5jdGlvbiBnZXRMZW5ndGggKCkge1xuICByZXR1cm4gdGhpcy5kYXRhLmxlbmd0aFxufVxuXG5LYW5qaURhdGEucHJvdG90eXBlLmdldEJpdHNMZW5ndGggPSBmdW5jdGlvbiBnZXRCaXRzTGVuZ3RoICgpIHtcbiAgcmV0dXJuIEthbmppRGF0YS5nZXRCaXRzTGVuZ3RoKHRoaXMuZGF0YS5sZW5ndGgpXG59XG5cbkthbmppRGF0YS5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAoYml0QnVmZmVyKSB7XG4gIGxldCBpXG5cbiAgLy8gSW4gdGhlIFNoaWZ0IEpJUyBzeXN0ZW0sIEthbmppIGNoYXJhY3RlcnMgYXJlIHJlcHJlc2VudGVkIGJ5IGEgdHdvIGJ5dGUgY29tYmluYXRpb24uXG4gIC8vIFRoZXNlIGJ5dGUgdmFsdWVzIGFyZSBzaGlmdGVkIGZyb20gdGhlIEpJUyBYIDAyMDggdmFsdWVzLlxuICAvLyBKSVMgWCAwMjA4IGdpdmVzIGRldGFpbHMgb2YgdGhlIHNoaWZ0IGNvZGVkIHJlcHJlc2VudGF0aW9uLlxuICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5kYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IHZhbHVlID0gVXRpbHMudG9TSklTKHRoaXMuZGF0YVtpXSlcblxuICAgIC8vIEZvciBjaGFyYWN0ZXJzIHdpdGggU2hpZnQgSklTIHZhbHVlcyBmcm9tIDB4ODE0MCB0byAweDlGRkM6XG4gICAgaWYgKHZhbHVlID49IDB4ODE0MCAmJiB2YWx1ZSA8PSAweDlGRkMpIHtcbiAgICAgIC8vIFN1YnRyYWN0IDB4ODE0MCBmcm9tIFNoaWZ0IEpJUyB2YWx1ZVxuICAgICAgdmFsdWUgLT0gMHg4MTQwXG5cbiAgICAvLyBGb3IgY2hhcmFjdGVycyB3aXRoIFNoaWZ0IEpJUyB2YWx1ZXMgZnJvbSAweEUwNDAgdG8gMHhFQkJGXG4gICAgfSBlbHNlIGlmICh2YWx1ZSA+PSAweEUwNDAgJiYgdmFsdWUgPD0gMHhFQkJGKSB7XG4gICAgICAvLyBTdWJ0cmFjdCAweEMxNDAgZnJvbSBTaGlmdCBKSVMgdmFsdWVcbiAgICAgIHZhbHVlIC09IDB4QzE0MFxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdJbnZhbGlkIFNKSVMgY2hhcmFjdGVyOiAnICsgdGhpcy5kYXRhW2ldICsgJ1xcbicgK1xuICAgICAgICAnTWFrZSBzdXJlIHlvdXIgY2hhcnNldCBpcyBVVEYtOCcpXG4gICAgfVxuXG4gICAgLy8gTXVsdGlwbHkgbW9zdCBzaWduaWZpY2FudCBieXRlIG9mIHJlc3VsdCBieSAweEMwXG4gICAgLy8gYW5kIGFkZCBsZWFzdCBzaWduaWZpY2FudCBieXRlIHRvIHByb2R1Y3RcbiAgICB2YWx1ZSA9ICgoKHZhbHVlID4+PiA4KSAmIDB4ZmYpICogMHhDMCkgKyAodmFsdWUgJiAweGZmKVxuXG4gICAgLy8gQ29udmVydCByZXN1bHQgdG8gYSAxMy1iaXQgYmluYXJ5IHN0cmluZ1xuICAgIGJpdEJ1ZmZlci5wdXQodmFsdWUsIDEzKVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gS2FuamlEYXRhXG4iXSwibmFtZXMiOlsiTW9kZSIsInJlcXVpcmUiLCJVdGlscyIsIkthbmppRGF0YSIsImRhdGEiLCJtb2RlIiwiS0FOSkkiLCJnZXRCaXRzTGVuZ3RoIiwibGVuZ3RoIiwicHJvdG90eXBlIiwiZ2V0TGVuZ3RoIiwid3JpdGUiLCJiaXRCdWZmZXIiLCJpIiwidmFsdWUiLCJ0b1NKSVMiLCJFcnJvciIsInB1dCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/kanji-data.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/mask-pattern.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/mask-pattern.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/**\n * Data mask pattern reference\n * @type {Object}\n */ exports.Patterns = {\n    PATTERN000: 0,\n    PATTERN001: 1,\n    PATTERN010: 2,\n    PATTERN011: 3,\n    PATTERN100: 4,\n    PATTERN101: 5,\n    PATTERN110: 6,\n    PATTERN111: 7\n};\n/**\n * Weighted penalty scores for the undesirable features\n * @type {Object}\n */ const PenaltyScores = {\n    N1: 3,\n    N2: 3,\n    N3: 40,\n    N4: 10\n};\n/**\n * Check if mask pattern value is valid\n *\n * @param  {Number}  mask    Mask pattern\n * @return {Boolean}         true if valid, false otherwise\n */ exports.isValid = function isValid(mask) {\n    return mask != null && mask !== \"\" && !isNaN(mask) && mask >= 0 && mask <= 7;\n};\n/**\n * Returns mask pattern from a value.\n * If value is not valid, returns undefined\n *\n * @param  {Number|String} value        Mask pattern value\n * @return {Number}                     Valid mask pattern or undefined\n */ exports.from = function from(value) {\n    return exports.isValid(value) ? parseInt(value, 10) : undefined;\n};\n/**\n* Find adjacent modules in row/column with the same color\n* and assign a penalty value.\n*\n* Points: N1 + i\n* i is the amount by which the number of adjacent modules of the same color exceeds 5\n*/ exports.getPenaltyN1 = function getPenaltyN1(data) {\n    const size = data.size;\n    let points = 0;\n    let sameCountCol = 0;\n    let sameCountRow = 0;\n    let lastCol = null;\n    let lastRow = null;\n    for(let row = 0; row < size; row++){\n        sameCountCol = sameCountRow = 0;\n        lastCol = lastRow = null;\n        for(let col = 0; col < size; col++){\n            let module = data.get(row, col);\n            if (module === lastCol) {\n                sameCountCol++;\n            } else {\n                if (sameCountCol >= 5) points += PenaltyScores.N1 + (sameCountCol - 5);\n                lastCol = module;\n                sameCountCol = 1;\n            }\n            module = data.get(col, row);\n            if (module === lastRow) {\n                sameCountRow++;\n            } else {\n                if (sameCountRow >= 5) points += PenaltyScores.N1 + (sameCountRow - 5);\n                lastRow = module;\n                sameCountRow = 1;\n            }\n        }\n        if (sameCountCol >= 5) points += PenaltyScores.N1 + (sameCountCol - 5);\n        if (sameCountRow >= 5) points += PenaltyScores.N1 + (sameCountRow - 5);\n    }\n    return points;\n};\n/**\n * Find 2x2 blocks with the same color and assign a penalty value\n *\n * Points: N2 * (m - 1) * (n - 1)\n */ exports.getPenaltyN2 = function getPenaltyN2(data) {\n    const size = data.size;\n    let points = 0;\n    for(let row = 0; row < size - 1; row++){\n        for(let col = 0; col < size - 1; col++){\n            const last = data.get(row, col) + data.get(row, col + 1) + data.get(row + 1, col) + data.get(row + 1, col + 1);\n            if (last === 4 || last === 0) points++;\n        }\n    }\n    return points * PenaltyScores.N2;\n};\n/**\n * Find 1:1:3:1:1 ratio (dark:light:dark:light:dark) pattern in row/column,\n * preceded or followed by light area 4 modules wide\n *\n * Points: N3 * number of pattern found\n */ exports.getPenaltyN3 = function getPenaltyN3(data) {\n    const size = data.size;\n    let points = 0;\n    let bitsCol = 0;\n    let bitsRow = 0;\n    for(let row = 0; row < size; row++){\n        bitsCol = bitsRow = 0;\n        for(let col = 0; col < size; col++){\n            bitsCol = bitsCol << 1 & 0x7FF | data.get(row, col);\n            if (col >= 10 && (bitsCol === 0x5D0 || bitsCol === 0x05D)) points++;\n            bitsRow = bitsRow << 1 & 0x7FF | data.get(col, row);\n            if (col >= 10 && (bitsRow === 0x5D0 || bitsRow === 0x05D)) points++;\n        }\n    }\n    return points * PenaltyScores.N3;\n};\n/**\n * Calculate proportion of dark modules in entire symbol\n *\n * Points: N4 * k\n *\n * k is the rating of the deviation of the proportion of dark modules\n * in the symbol from 50% in steps of 5%\n */ exports.getPenaltyN4 = function getPenaltyN4(data) {\n    let darkCount = 0;\n    const modulesCount = data.data.length;\n    for(let i = 0; i < modulesCount; i++)darkCount += data.data[i];\n    const k = Math.abs(Math.ceil(darkCount * 100 / modulesCount / 5) - 10);\n    return k * PenaltyScores.N4;\n};\n/**\n * Return mask value at given position\n *\n * @param  {Number} maskPattern Pattern reference value\n * @param  {Number} i           Row\n * @param  {Number} j           Column\n * @return {Boolean}            Mask value\n */ function getMaskAt(maskPattern, i, j) {\n    switch(maskPattern){\n        case exports.Patterns.PATTERN000:\n            return (i + j) % 2 === 0;\n        case exports.Patterns.PATTERN001:\n            return i % 2 === 0;\n        case exports.Patterns.PATTERN010:\n            return j % 3 === 0;\n        case exports.Patterns.PATTERN011:\n            return (i + j) % 3 === 0;\n        case exports.Patterns.PATTERN100:\n            return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 === 0;\n        case exports.Patterns.PATTERN101:\n            return i * j % 2 + i * j % 3 === 0;\n        case exports.Patterns.PATTERN110:\n            return (i * j % 2 + i * j % 3) % 2 === 0;\n        case exports.Patterns.PATTERN111:\n            return (i * j % 3 + (i + j) % 2) % 2 === 0;\n        default:\n            throw new Error(\"bad maskPattern:\" + maskPattern);\n    }\n}\n/**\n * Apply a mask pattern to a BitMatrix\n *\n * @param  {Number}    pattern Pattern reference number\n * @param  {BitMatrix} data    BitMatrix data\n */ exports.applyMask = function applyMask(pattern, data) {\n    const size = data.size;\n    for(let col = 0; col < size; col++){\n        for(let row = 0; row < size; row++){\n            if (data.isReserved(row, col)) continue;\n            data.xor(row, col, getMaskAt(pattern, row, col));\n        }\n    }\n};\n/**\n * Returns the best mask pattern for data\n *\n * @param  {BitMatrix} data\n * @return {Number} Mask pattern reference number\n */ exports.getBestMask = function getBestMask(data, setupFormatFunc) {\n    const numPatterns = Object.keys(exports.Patterns).length;\n    let bestPattern = 0;\n    let lowerPenalty = Infinity;\n    for(let p = 0; p < numPatterns; p++){\n        setupFormatFunc(p);\n        exports.applyMask(p, data);\n        // Calculate penalty\n        const penalty = exports.getPenaltyN1(data) + exports.getPenaltyN2(data) + exports.getPenaltyN3(data) + exports.getPenaltyN4(data);\n        // Undo previously applied mask\n        exports.applyMask(p, data);\n        if (penalty < lowerPenalty) {\n            lowerPenalty = penalty;\n            bestPattern = p;\n        }\n    }\n    return bestPattern;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/mask-pattern.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/mode.js":
/*!******************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/mode.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const VersionCheck = __webpack_require__(/*! ./version-check */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/version-check.js\");\nconst Regex = __webpack_require__(/*! ./regex */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/regex.js\");\n/**\n * Numeric mode encodes data from the decimal digit set (0 - 9)\n * (byte values 30HEX to 39HEX).\n * Normally, 3 data characters are represented by 10 bits.\n *\n * @type {Object}\n */ exports.NUMERIC = {\n    id: \"Numeric\",\n    bit: 1 << 0,\n    ccBits: [\n        10,\n        12,\n        14\n    ]\n};\n/**\n * Alphanumeric mode encodes data from a set of 45 characters,\n * i.e. 10 numeric digits (0 - 9),\n *      26 alphabetic characters (A - Z),\n *   and 9 symbols (SP, $, %, *, +, -, ., /, :).\n * Normally, two input characters are represented by 11 bits.\n *\n * @type {Object}\n */ exports.ALPHANUMERIC = {\n    id: \"Alphanumeric\",\n    bit: 1 << 1,\n    ccBits: [\n        9,\n        11,\n        13\n    ]\n};\n/**\n * In byte mode, data is encoded at 8 bits per character.\n *\n * @type {Object}\n */ exports.BYTE = {\n    id: \"Byte\",\n    bit: 1 << 2,\n    ccBits: [\n        8,\n        16,\n        16\n    ]\n};\n/**\n * The Kanji mode efficiently encodes Kanji characters in accordance with\n * the Shift JIS system based on JIS X 0208.\n * The Shift JIS values are shifted from the JIS X 0208 values.\n * JIS X 0208 gives details of the shift coded representation.\n * Each two-byte character value is compacted to a 13-bit binary codeword.\n *\n * @type {Object}\n */ exports.KANJI = {\n    id: \"Kanji\",\n    bit: 1 << 3,\n    ccBits: [\n        8,\n        10,\n        12\n    ]\n};\n/**\n * Mixed mode will contain a sequences of data in a combination of any of\n * the modes described above\n *\n * @type {Object}\n */ exports.MIXED = {\n    bit: -1\n};\n/**\n * Returns the number of bits needed to store the data length\n * according to QR Code specifications.\n *\n * @param  {Mode}   mode    Data mode\n * @param  {Number} version QR Code version\n * @return {Number}         Number of bits\n */ exports.getCharCountIndicator = function getCharCountIndicator(mode, version) {\n    if (!mode.ccBits) throw new Error(\"Invalid mode: \" + mode);\n    if (!VersionCheck.isValid(version)) {\n        throw new Error(\"Invalid version: \" + version);\n    }\n    if (version >= 1 && version < 10) return mode.ccBits[0];\n    else if (version < 27) return mode.ccBits[1];\n    return mode.ccBits[2];\n};\n/**\n * Returns the most efficient mode to store the specified data\n *\n * @param  {String} dataStr Input data string\n * @return {Mode}           Best mode\n */ exports.getBestModeForData = function getBestModeForData(dataStr) {\n    if (Regex.testNumeric(dataStr)) return exports.NUMERIC;\n    else if (Regex.testAlphanumeric(dataStr)) return exports.ALPHANUMERIC;\n    else if (Regex.testKanji(dataStr)) return exports.KANJI;\n    else return exports.BYTE;\n};\n/**\n * Return mode name as string\n *\n * @param {Mode} mode Mode object\n * @returns {String}  Mode name\n */ exports.toString = function toString(mode) {\n    if (mode && mode.id) return mode.id;\n    throw new Error(\"Invalid mode\");\n};\n/**\n * Check if input param is a valid mode object\n *\n * @param   {Mode}    mode Mode object\n * @returns {Boolean} True if valid mode, false otherwise\n */ exports.isValid = function isValid(mode) {\n    return mode && mode.bit && mode.ccBits;\n};\n/**\n * Get mode object from its name\n *\n * @param   {String} string Mode name\n * @returns {Mode}          Mode object\n */ function fromString(string) {\n    if (typeof string !== \"string\") {\n        throw new Error(\"Param is not a string\");\n    }\n    const lcStr = string.toLowerCase();\n    switch(lcStr){\n        case \"numeric\":\n            return exports.NUMERIC;\n        case \"alphanumeric\":\n            return exports.ALPHANUMERIC;\n        case \"kanji\":\n            return exports.KANJI;\n        case \"byte\":\n            return exports.BYTE;\n        default:\n            throw new Error(\"Unknown mode: \" + string);\n    }\n}\n/**\n * Returns mode from a value.\n * If value is not a valid mode, returns defaultValue\n *\n * @param  {Mode|String} value        Encoding mode\n * @param  {Mode}        defaultValue Fallback value\n * @return {Mode}                     Encoding mode\n */ exports.from = function from(value, defaultValue) {\n    if (exports.isValid(value)) {\n        return value;\n    }\n    try {\n        return fromString(value);\n    } catch (e) {\n        return defaultValue;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/mode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/numeric-data.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/numeric-data.js ***!
  \**************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst Mode = __webpack_require__(/*! ./mode */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/mode.js\");\nfunction NumericData(data) {\n    this.mode = Mode.NUMERIC;\n    this.data = data.toString();\n}\nNumericData.getBitsLength = function getBitsLength(length) {\n    return 10 * Math.floor(length / 3) + (length % 3 ? length % 3 * 3 + 1 : 0);\n};\nNumericData.prototype.getLength = function getLength() {\n    return this.data.length;\n};\nNumericData.prototype.getBitsLength = function getBitsLength() {\n    return NumericData.getBitsLength(this.data.length);\n};\nNumericData.prototype.write = function write(bitBuffer) {\n    let i, group, value;\n    // The input data string is divided into groups of three digits,\n    // and each group is converted to its 10-bit binary equivalent.\n    for(i = 0; i + 3 <= this.data.length; i += 3){\n        group = this.data.substr(i, 3);\n        value = parseInt(group, 10);\n        bitBuffer.put(value, 10);\n    }\n    // If the number of input digits is not an exact multiple of three,\n    // the final one or two digits are converted to 4 or 7 bits respectively.\n    const remainingNum = this.data.length - i;\n    if (remainingNum > 0) {\n        group = this.data.substr(i);\n        value = parseInt(group, 10);\n        bitBuffer.put(value, remainingNum * 3 + 1);\n    }\n};\nmodule.exports = NumericData;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS4zL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvbnVtZXJpYy1kYXRhLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxNQUFNQSxPQUFPQyxtQkFBT0EsQ0FBQztBQUVyQixTQUFTQyxZQUFhQyxJQUFJO0lBQ3hCLElBQUksQ0FBQ0MsSUFBSSxHQUFHSixLQUFLSyxPQUFPO0lBQ3hCLElBQUksQ0FBQ0YsSUFBSSxHQUFHQSxLQUFLRyxRQUFRO0FBQzNCO0FBRUFKLFlBQVlLLGFBQWEsR0FBRyxTQUFTQSxjQUFlQyxNQUFNO0lBQ3hELE9BQU8sS0FBS0MsS0FBS0MsS0FBSyxDQUFDRixTQUFTLEtBQU0sVUFBVSxJQUFNLFNBQVUsSUFBSyxJQUFJLElBQUs7QUFDaEY7QUFFQU4sWUFBWVMsU0FBUyxDQUFDQyxTQUFTLEdBQUcsU0FBU0E7SUFDekMsT0FBTyxJQUFJLENBQUNULElBQUksQ0FBQ0ssTUFBTTtBQUN6QjtBQUVBTixZQUFZUyxTQUFTLENBQUNKLGFBQWEsR0FBRyxTQUFTQTtJQUM3QyxPQUFPTCxZQUFZSyxhQUFhLENBQUMsSUFBSSxDQUFDSixJQUFJLENBQUNLLE1BQU07QUFDbkQ7QUFFQU4sWUFBWVMsU0FBUyxDQUFDRSxLQUFLLEdBQUcsU0FBU0EsTUFBT0MsU0FBUztJQUNyRCxJQUFJQyxHQUFHQyxPQUFPQztJQUVkLGdFQUFnRTtJQUNoRSwrREFBK0Q7SUFDL0QsSUFBS0YsSUFBSSxHQUFHQSxJQUFJLEtBQUssSUFBSSxDQUFDWixJQUFJLENBQUNLLE1BQU0sRUFBRU8sS0FBSyxFQUFHO1FBQzdDQyxRQUFRLElBQUksQ0FBQ2IsSUFBSSxDQUFDZSxNQUFNLENBQUNILEdBQUc7UUFDNUJFLFFBQVFFLFNBQVNILE9BQU87UUFFeEJGLFVBQVVNLEdBQUcsQ0FBQ0gsT0FBTztJQUN2QjtJQUVBLG1FQUFtRTtJQUNuRSx5RUFBeUU7SUFDekUsTUFBTUksZUFBZSxJQUFJLENBQUNsQixJQUFJLENBQUNLLE1BQU0sR0FBR087SUFDeEMsSUFBSU0sZUFBZSxHQUFHO1FBQ3BCTCxRQUFRLElBQUksQ0FBQ2IsSUFBSSxDQUFDZSxNQUFNLENBQUNIO1FBQ3pCRSxRQUFRRSxTQUFTSCxPQUFPO1FBRXhCRixVQUFVTSxHQUFHLENBQUNILE9BQU9JLGVBQWUsSUFBSTtJQUMxQztBQUNGO0FBRUFDLE9BQU9DLE9BQU8sR0FBR3JCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc21hcnQtYXVkaXQvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS4zL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvbnVtZXJpYy1kYXRhLmpzP2I2ZWMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgTW9kZSA9IHJlcXVpcmUoJy4vbW9kZScpXG5cbmZ1bmN0aW9uIE51bWVyaWNEYXRhIChkYXRhKSB7XG4gIHRoaXMubW9kZSA9IE1vZGUuTlVNRVJJQ1xuICB0aGlzLmRhdGEgPSBkYXRhLnRvU3RyaW5nKClcbn1cblxuTnVtZXJpY0RhdGEuZ2V0Qml0c0xlbmd0aCA9IGZ1bmN0aW9uIGdldEJpdHNMZW5ndGggKGxlbmd0aCkge1xuICByZXR1cm4gMTAgKiBNYXRoLmZsb29yKGxlbmd0aCAvIDMpICsgKChsZW5ndGggJSAzKSA/ICgobGVuZ3RoICUgMykgKiAzICsgMSkgOiAwKVxufVxuXG5OdW1lcmljRGF0YS5wcm90b3R5cGUuZ2V0TGVuZ3RoID0gZnVuY3Rpb24gZ2V0TGVuZ3RoICgpIHtcbiAgcmV0dXJuIHRoaXMuZGF0YS5sZW5ndGhcbn1cblxuTnVtZXJpY0RhdGEucHJvdG90eXBlLmdldEJpdHNMZW5ndGggPSBmdW5jdGlvbiBnZXRCaXRzTGVuZ3RoICgpIHtcbiAgcmV0dXJuIE51bWVyaWNEYXRhLmdldEJpdHNMZW5ndGgodGhpcy5kYXRhLmxlbmd0aClcbn1cblxuTnVtZXJpY0RhdGEucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gd3JpdGUgKGJpdEJ1ZmZlcikge1xuICBsZXQgaSwgZ3JvdXAsIHZhbHVlXG5cbiAgLy8gVGhlIGlucHV0IGRhdGEgc3RyaW5nIGlzIGRpdmlkZWQgaW50byBncm91cHMgb2YgdGhyZWUgZGlnaXRzLFxuICAvLyBhbmQgZWFjaCBncm91cCBpcyBjb252ZXJ0ZWQgdG8gaXRzIDEwLWJpdCBiaW5hcnkgZXF1aXZhbGVudC5cbiAgZm9yIChpID0gMDsgaSArIDMgPD0gdGhpcy5kYXRhLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgZ3JvdXAgPSB0aGlzLmRhdGEuc3Vic3RyKGksIDMpXG4gICAgdmFsdWUgPSBwYXJzZUludChncm91cCwgMTApXG5cbiAgICBiaXRCdWZmZXIucHV0KHZhbHVlLCAxMClcbiAgfVxuXG4gIC8vIElmIHRoZSBudW1iZXIgb2YgaW5wdXQgZGlnaXRzIGlzIG5vdCBhbiBleGFjdCBtdWx0aXBsZSBvZiB0aHJlZSxcbiAgLy8gdGhlIGZpbmFsIG9uZSBvciB0d28gZGlnaXRzIGFyZSBjb252ZXJ0ZWQgdG8gNCBvciA3IGJpdHMgcmVzcGVjdGl2ZWx5LlxuICBjb25zdCByZW1haW5pbmdOdW0gPSB0aGlzLmRhdGEubGVuZ3RoIC0gaVxuICBpZiAocmVtYWluaW5nTnVtID4gMCkge1xuICAgIGdyb3VwID0gdGhpcy5kYXRhLnN1YnN0cihpKVxuICAgIHZhbHVlID0gcGFyc2VJbnQoZ3JvdXAsIDEwKVxuXG4gICAgYml0QnVmZmVyLnB1dCh2YWx1ZSwgcmVtYWluaW5nTnVtICogMyArIDEpXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBOdW1lcmljRGF0YVxuIl0sIm5hbWVzIjpbIk1vZGUiLCJyZXF1aXJlIiwiTnVtZXJpY0RhdGEiLCJkYXRhIiwibW9kZSIsIk5VTUVSSUMiLCJ0b1N0cmluZyIsImdldEJpdHNMZW5ndGgiLCJsZW5ndGgiLCJNYXRoIiwiZmxvb3IiLCJwcm90b3R5cGUiLCJnZXRMZW5ndGgiLCJ3cml0ZSIsImJpdEJ1ZmZlciIsImkiLCJncm91cCIsInZhbHVlIiwic3Vic3RyIiwicGFyc2VJbnQiLCJwdXQiLCJyZW1haW5pbmdOdW0iLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/numeric-data.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/polynomial.js":
/*!************************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/polynomial.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const GF = __webpack_require__(/*! ./galois-field */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/galois-field.js\");\n/**\n * Multiplies two polynomials inside Galois Field\n *\n * @param  {Uint8Array} p1 Polynomial\n * @param  {Uint8Array} p2 Polynomial\n * @return {Uint8Array}    Product of p1 and p2\n */ exports.mul = function mul(p1, p2) {\n    const coeff = new Uint8Array(p1.length + p2.length - 1);\n    for(let i = 0; i < p1.length; i++){\n        for(let j = 0; j < p2.length; j++){\n            coeff[i + j] ^= GF.mul(p1[i], p2[j]);\n        }\n    }\n    return coeff;\n};\n/**\n * Calculate the remainder of polynomials division\n *\n * @param  {Uint8Array} divident Polynomial\n * @param  {Uint8Array} divisor  Polynomial\n * @return {Uint8Array}          Remainder\n */ exports.mod = function mod(divident, divisor) {\n    let result = new Uint8Array(divident);\n    while(result.length - divisor.length >= 0){\n        const coeff = result[0];\n        for(let i = 0; i < divisor.length; i++){\n            result[i] ^= GF.mul(divisor[i], coeff);\n        }\n        // remove all zeros from buffer head\n        let offset = 0;\n        while(offset < result.length && result[offset] === 0)offset++;\n        result = result.slice(offset);\n    }\n    return result;\n};\n/**\n * Generate an irreducible generator polynomial of specified degree\n * (used by Reed-Solomon encoder)\n *\n * @param  {Number} degree Degree of the generator polynomial\n * @return {Uint8Array}    Buffer containing polynomial coefficients\n */ exports.generateECPolynomial = function generateECPolynomial(degree) {\n    let poly = new Uint8Array([\n        1\n    ]);\n    for(let i = 0; i < degree; i++){\n        poly = exports.mul(poly, new Uint8Array([\n            1,\n            GF.exp(i)\n        ]));\n    }\n    return poly;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS4zL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvcG9seW5vbWlhbC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxLQUFLQyxtQkFBT0EsQ0FBQztBQUVuQjs7Ozs7O0NBTUMsR0FDREMsV0FBVyxHQUFHLFNBQVNDLElBQUtDLEVBQUUsRUFBRUMsRUFBRTtJQUNoQyxNQUFNQyxRQUFRLElBQUlDLFdBQVdILEdBQUdJLE1BQU0sR0FBR0gsR0FBR0csTUFBTSxHQUFHO0lBRXJELElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJTCxHQUFHSSxNQUFNLEVBQUVDLElBQUs7UUFDbEMsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlMLEdBQUdHLE1BQU0sRUFBRUUsSUFBSztZQUNsQ0osS0FBSyxDQUFDRyxJQUFJQyxFQUFFLElBQUlWLEdBQUdHLEdBQUcsQ0FBQ0MsRUFBRSxDQUFDSyxFQUFFLEVBQUVKLEVBQUUsQ0FBQ0ssRUFBRTtRQUNyQztJQUNGO0lBRUEsT0FBT0o7QUFDVDtBQUVBOzs7Ozs7Q0FNQyxHQUNESixXQUFXLEdBQUcsU0FBU1MsSUFBS0MsUUFBUSxFQUFFQyxPQUFPO0lBQzNDLElBQUlDLFNBQVMsSUFBSVAsV0FBV0s7SUFFNUIsTUFBTyxPQUFRSixNQUFNLEdBQUdLLFFBQVFMLE1BQU0sSUFBSyxFQUFHO1FBQzVDLE1BQU1GLFFBQVFRLE1BQU0sQ0FBQyxFQUFFO1FBRXZCLElBQUssSUFBSUwsSUFBSSxHQUFHQSxJQUFJSSxRQUFRTCxNQUFNLEVBQUVDLElBQUs7WUFDdkNLLE1BQU0sQ0FBQ0wsRUFBRSxJQUFJVCxHQUFHRyxHQUFHLENBQUNVLE9BQU8sQ0FBQ0osRUFBRSxFQUFFSDtRQUNsQztRQUVBLG9DQUFvQztRQUNwQyxJQUFJUyxTQUFTO1FBQ2IsTUFBT0EsU0FBU0QsT0FBT04sTUFBTSxJQUFJTSxNQUFNLENBQUNDLE9BQU8sS0FBSyxFQUFHQTtRQUN2REQsU0FBU0EsT0FBT0UsS0FBSyxDQUFDRDtJQUN4QjtJQUVBLE9BQU9EO0FBQ1Q7QUFFQTs7Ozs7O0NBTUMsR0FDRFosNEJBQTRCLEdBQUcsU0FBU2UscUJBQXNCQyxNQUFNO0lBQ2xFLElBQUlDLE9BQU8sSUFBSVosV0FBVztRQUFDO0tBQUU7SUFDN0IsSUFBSyxJQUFJRSxJQUFJLEdBQUdBLElBQUlTLFFBQVFULElBQUs7UUFDL0JVLE9BQU9qQixRQUFRQyxHQUFHLENBQUNnQixNQUFNLElBQUlaLFdBQVc7WUFBQztZQUFHUCxHQUFHb0IsR0FBRyxDQUFDWDtTQUFHO0lBQ3hEO0lBRUEsT0FBT1U7QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL3NtYXJ0LWF1ZGl0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL3FyY29kZUAxLjUuMy9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9jb3JlL3BvbHlub21pYWwuanM/MmEyMSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBHRiA9IHJlcXVpcmUoJy4vZ2Fsb2lzLWZpZWxkJylcblxuLyoqXG4gKiBNdWx0aXBsaWVzIHR3byBwb2x5bm9taWFscyBpbnNpZGUgR2Fsb2lzIEZpZWxkXG4gKlxuICogQHBhcmFtICB7VWludDhBcnJheX0gcDEgUG9seW5vbWlhbFxuICogQHBhcmFtICB7VWludDhBcnJheX0gcDIgUG9seW5vbWlhbFxuICogQHJldHVybiB7VWludDhBcnJheX0gICAgUHJvZHVjdCBvZiBwMSBhbmQgcDJcbiAqL1xuZXhwb3J0cy5tdWwgPSBmdW5jdGlvbiBtdWwgKHAxLCBwMikge1xuICBjb25zdCBjb2VmZiA9IG5ldyBVaW50OEFycmF5KHAxLmxlbmd0aCArIHAyLmxlbmd0aCAtIDEpXG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwMS5sZW5ndGg7IGkrKykge1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgcDIubGVuZ3RoOyBqKyspIHtcbiAgICAgIGNvZWZmW2kgKyBqXSBePSBHRi5tdWwocDFbaV0sIHAyW2pdKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjb2VmZlxufVxuXG4vKipcbiAqIENhbGN1bGF0ZSB0aGUgcmVtYWluZGVyIG9mIHBvbHlub21pYWxzIGRpdmlzaW9uXG4gKlxuICogQHBhcmFtICB7VWludDhBcnJheX0gZGl2aWRlbnQgUG9seW5vbWlhbFxuICogQHBhcmFtICB7VWludDhBcnJheX0gZGl2aXNvciAgUG9seW5vbWlhbFxuICogQHJldHVybiB7VWludDhBcnJheX0gICAgICAgICAgUmVtYWluZGVyXG4gKi9cbmV4cG9ydHMubW9kID0gZnVuY3Rpb24gbW9kIChkaXZpZGVudCwgZGl2aXNvcikge1xuICBsZXQgcmVzdWx0ID0gbmV3IFVpbnQ4QXJyYXkoZGl2aWRlbnQpXG5cbiAgd2hpbGUgKChyZXN1bHQubGVuZ3RoIC0gZGl2aXNvci5sZW5ndGgpID49IDApIHtcbiAgICBjb25zdCBjb2VmZiA9IHJlc3VsdFswXVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkaXZpc29yLmxlbmd0aDsgaSsrKSB7XG4gICAgICByZXN1bHRbaV0gXj0gR0YubXVsKGRpdmlzb3JbaV0sIGNvZWZmKVxuICAgIH1cblxuICAgIC8vIHJlbW92ZSBhbGwgemVyb3MgZnJvbSBidWZmZXIgaGVhZFxuICAgIGxldCBvZmZzZXQgPSAwXG4gICAgd2hpbGUgKG9mZnNldCA8IHJlc3VsdC5sZW5ndGggJiYgcmVzdWx0W29mZnNldF0gPT09IDApIG9mZnNldCsrXG4gICAgcmVzdWx0ID0gcmVzdWx0LnNsaWNlKG9mZnNldClcbiAgfVxuXG4gIHJldHVybiByZXN1bHRcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZSBhbiBpcnJlZHVjaWJsZSBnZW5lcmF0b3IgcG9seW5vbWlhbCBvZiBzcGVjaWZpZWQgZGVncmVlXG4gKiAodXNlZCBieSBSZWVkLVNvbG9tb24gZW5jb2RlcilcbiAqXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IGRlZ3JlZSBEZWdyZWUgb2YgdGhlIGdlbmVyYXRvciBwb2x5bm9taWFsXG4gKiBAcmV0dXJuIHtVaW50OEFycmF5fSAgICBCdWZmZXIgY29udGFpbmluZyBwb2x5bm9taWFsIGNvZWZmaWNpZW50c1xuICovXG5leHBvcnRzLmdlbmVyYXRlRUNQb2x5bm9taWFsID0gZnVuY3Rpb24gZ2VuZXJhdGVFQ1BvbHlub21pYWwgKGRlZ3JlZSkge1xuICBsZXQgcG9seSA9IG5ldyBVaW50OEFycmF5KFsxXSlcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBkZWdyZWU7IGkrKykge1xuICAgIHBvbHkgPSBleHBvcnRzLm11bChwb2x5LCBuZXcgVWludDhBcnJheShbMSwgR0YuZXhwKGkpXSkpXG4gIH1cblxuICByZXR1cm4gcG9seVxufVxuIl0sIm5hbWVzIjpbIkdGIiwicmVxdWlyZSIsImV4cG9ydHMiLCJtdWwiLCJwMSIsInAyIiwiY29lZmYiLCJVaW50OEFycmF5IiwibGVuZ3RoIiwiaSIsImoiLCJtb2QiLCJkaXZpZGVudCIsImRpdmlzb3IiLCJyZXN1bHQiLCJvZmZzZXQiLCJzbGljZSIsImdlbmVyYXRlRUNQb2x5bm9taWFsIiwiZGVncmVlIiwicG9seSIsImV4cCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/polynomial.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/qrcode.js":
/*!********************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/qrcode.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const Utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/utils.js\");\nconst ECLevel = __webpack_require__(/*! ./error-correction-level */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/error-correction-level.js\");\nconst BitBuffer = __webpack_require__(/*! ./bit-buffer */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/bit-buffer.js\");\nconst BitMatrix = __webpack_require__(/*! ./bit-matrix */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/bit-matrix.js\");\nconst AlignmentPattern = __webpack_require__(/*! ./alignment-pattern */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/alignment-pattern.js\");\nconst FinderPattern = __webpack_require__(/*! ./finder-pattern */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/finder-pattern.js\");\nconst MaskPattern = __webpack_require__(/*! ./mask-pattern */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/mask-pattern.js\");\nconst ECCode = __webpack_require__(/*! ./error-correction-code */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/error-correction-code.js\");\nconst ReedSolomonEncoder = __webpack_require__(/*! ./reed-solomon-encoder */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/reed-solomon-encoder.js\");\nconst Version = __webpack_require__(/*! ./version */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/version.js\");\nconst FormatInfo = __webpack_require__(/*! ./format-info */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/format-info.js\");\nconst Mode = __webpack_require__(/*! ./mode */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/mode.js\");\nconst Segments = __webpack_require__(/*! ./segments */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/segments.js\");\n/**\n * QRCode for JavaScript\n *\n * modified by Ryan Day for nodejs support\n * Copyright (c) 2011 Ryan Day\n *\n * Licensed under the MIT license:\n *   http://www.opensource.org/licenses/mit-license.php\n *\n//---------------------------------------------------------------------\n// QRCode for JavaScript\n//\n// Copyright (c) 2009 Kazuhiko Arase\n//\n// URL: http://www.d-project.com/\n//\n// Licensed under the MIT license:\n//   http://www.opensource.org/licenses/mit-license.php\n//\n// The word \"QR Code\" is registered trademark of\n// DENSO WAVE INCORPORATED\n//   http://www.denso-wave.com/qrcode/faqpatent-e.html\n//\n//---------------------------------------------------------------------\n*/ /**\n * Add finder patterns bits to matrix\n *\n * @param  {BitMatrix} matrix  Modules matrix\n * @param  {Number}    version QR Code version\n */ function setupFinderPattern(matrix, version) {\n    const size = matrix.size;\n    const pos = FinderPattern.getPositions(version);\n    for(let i = 0; i < pos.length; i++){\n        const row = pos[i][0];\n        const col = pos[i][1];\n        for(let r = -1; r <= 7; r++){\n            if (row + r <= -1 || size <= row + r) continue;\n            for(let c = -1; c <= 7; c++){\n                if (col + c <= -1 || size <= col + c) continue;\n                if (r >= 0 && r <= 6 && (c === 0 || c === 6) || c >= 0 && c <= 6 && (r === 0 || r === 6) || r >= 2 && r <= 4 && c >= 2 && c <= 4) {\n                    matrix.set(row + r, col + c, true, true);\n                } else {\n                    matrix.set(row + r, col + c, false, true);\n                }\n            }\n        }\n    }\n}\n/**\n * Add timing pattern bits to matrix\n *\n * Note: this function must be called before {@link setupAlignmentPattern}\n *\n * @param  {BitMatrix} matrix Modules matrix\n */ function setupTimingPattern(matrix) {\n    const size = matrix.size;\n    for(let r = 8; r < size - 8; r++){\n        const value = r % 2 === 0;\n        matrix.set(r, 6, value, true);\n        matrix.set(6, r, value, true);\n    }\n}\n/**\n * Add alignment patterns bits to matrix\n *\n * Note: this function must be called after {@link setupTimingPattern}\n *\n * @param  {BitMatrix} matrix  Modules matrix\n * @param  {Number}    version QR Code version\n */ function setupAlignmentPattern(matrix, version) {\n    const pos = AlignmentPattern.getPositions(version);\n    for(let i = 0; i < pos.length; i++){\n        const row = pos[i][0];\n        const col = pos[i][1];\n        for(let r = -2; r <= 2; r++){\n            for(let c = -2; c <= 2; c++){\n                if (r === -2 || r === 2 || c === -2 || c === 2 || r === 0 && c === 0) {\n                    matrix.set(row + r, col + c, true, true);\n                } else {\n                    matrix.set(row + r, col + c, false, true);\n                }\n            }\n        }\n    }\n}\n/**\n * Add version info bits to matrix\n *\n * @param  {BitMatrix} matrix  Modules matrix\n * @param  {Number}    version QR Code version\n */ function setupVersionInfo(matrix, version) {\n    const size = matrix.size;\n    const bits = Version.getEncodedBits(version);\n    let row, col, mod;\n    for(let i = 0; i < 18; i++){\n        row = Math.floor(i / 3);\n        col = i % 3 + size - 8 - 3;\n        mod = (bits >> i & 1) === 1;\n        matrix.set(row, col, mod, true);\n        matrix.set(col, row, mod, true);\n    }\n}\n/**\n * Add format info bits to matrix\n *\n * @param  {BitMatrix} matrix               Modules matrix\n * @param  {ErrorCorrectionLevel}    errorCorrectionLevel Error correction level\n * @param  {Number}    maskPattern          Mask pattern reference value\n */ function setupFormatInfo(matrix, errorCorrectionLevel, maskPattern) {\n    const size = matrix.size;\n    const bits = FormatInfo.getEncodedBits(errorCorrectionLevel, maskPattern);\n    let i, mod;\n    for(i = 0; i < 15; i++){\n        mod = (bits >> i & 1) === 1;\n        // vertical\n        if (i < 6) {\n            matrix.set(i, 8, mod, true);\n        } else if (i < 8) {\n            matrix.set(i + 1, 8, mod, true);\n        } else {\n            matrix.set(size - 15 + i, 8, mod, true);\n        }\n        // horizontal\n        if (i < 8) {\n            matrix.set(8, size - i - 1, mod, true);\n        } else if (i < 9) {\n            matrix.set(8, 15 - i - 1 + 1, mod, true);\n        } else {\n            matrix.set(8, 15 - i - 1, mod, true);\n        }\n    }\n    // fixed module\n    matrix.set(size - 8, 8, 1, true);\n}\n/**\n * Add encoded data bits to matrix\n *\n * @param  {BitMatrix}  matrix Modules matrix\n * @param  {Uint8Array} data   Data codewords\n */ function setupData(matrix, data) {\n    const size = matrix.size;\n    let inc = -1;\n    let row = size - 1;\n    let bitIndex = 7;\n    let byteIndex = 0;\n    for(let col = size - 1; col > 0; col -= 2){\n        if (col === 6) col--;\n        while(true){\n            for(let c = 0; c < 2; c++){\n                if (!matrix.isReserved(row, col - c)) {\n                    let dark = false;\n                    if (byteIndex < data.length) {\n                        dark = (data[byteIndex] >>> bitIndex & 1) === 1;\n                    }\n                    matrix.set(row, col - c, dark);\n                    bitIndex--;\n                    if (bitIndex === -1) {\n                        byteIndex++;\n                        bitIndex = 7;\n                    }\n                }\n            }\n            row += inc;\n            if (row < 0 || size <= row) {\n                row -= inc;\n                inc = -inc;\n                break;\n            }\n        }\n    }\n}\n/**\n * Create encoded codewords from data input\n *\n * @param  {Number}   version              QR Code version\n * @param  {ErrorCorrectionLevel}   errorCorrectionLevel Error correction level\n * @param  {ByteData} data                 Data input\n * @return {Uint8Array}                    Buffer containing encoded codewords\n */ function createData(version, errorCorrectionLevel, segments) {\n    // Prepare data buffer\n    const buffer = new BitBuffer();\n    segments.forEach(function(data) {\n        // prefix data with mode indicator (4 bits)\n        buffer.put(data.mode.bit, 4);\n        // Prefix data with character count indicator.\n        // The character count indicator is a string of bits that represents the\n        // number of characters that are being encoded.\n        // The character count indicator must be placed after the mode indicator\n        // and must be a certain number of bits long, depending on the QR version\n        // and data mode\n        // @see {@link Mode.getCharCountIndicator}.\n        buffer.put(data.getLength(), Mode.getCharCountIndicator(data.mode, version));\n        // add binary data sequence to buffer\n        data.write(buffer);\n    });\n    // Calculate required number of bits\n    const totalCodewords = Utils.getSymbolTotalCodewords(version);\n    const ecTotalCodewords = ECCode.getTotalCodewordsCount(version, errorCorrectionLevel);\n    const dataTotalCodewordsBits = (totalCodewords - ecTotalCodewords) * 8;\n    // Add a terminator.\n    // If the bit string is shorter than the total number of required bits,\n    // a terminator of up to four 0s must be added to the right side of the string.\n    // If the bit string is more than four bits shorter than the required number of bits,\n    // add four 0s to the end.\n    if (buffer.getLengthInBits() + 4 <= dataTotalCodewordsBits) {\n        buffer.put(0, 4);\n    }\n    // If the bit string is fewer than four bits shorter, add only the number of 0s that\n    // are needed to reach the required number of bits.\n    // After adding the terminator, if the number of bits in the string is not a multiple of 8,\n    // pad the string on the right with 0s to make the string's length a multiple of 8.\n    while(buffer.getLengthInBits() % 8 !== 0){\n        buffer.putBit(0);\n    }\n    // Add pad bytes if the string is still shorter than the total number of required bits.\n    // Extend the buffer to fill the data capacity of the symbol corresponding to\n    // the Version and Error Correction Level by adding the Pad Codewords 11101100 (0xEC)\n    // and 00010001 (0x11) alternately.\n    const remainingByte = (dataTotalCodewordsBits - buffer.getLengthInBits()) / 8;\n    for(let i = 0; i < remainingByte; i++){\n        buffer.put(i % 2 ? 0x11 : 0xEC, 8);\n    }\n    return createCodewords(buffer, version, errorCorrectionLevel);\n}\n/**\n * Encode input data with Reed-Solomon and return codewords with\n * relative error correction bits\n *\n * @param  {BitBuffer} bitBuffer            Data to encode\n * @param  {Number}    version              QR Code version\n * @param  {ErrorCorrectionLevel} errorCorrectionLevel Error correction level\n * @return {Uint8Array}                     Buffer containing encoded codewords\n */ function createCodewords(bitBuffer, version, errorCorrectionLevel) {\n    // Total codewords for this QR code version (Data + Error correction)\n    const totalCodewords = Utils.getSymbolTotalCodewords(version);\n    // Total number of error correction codewords\n    const ecTotalCodewords = ECCode.getTotalCodewordsCount(version, errorCorrectionLevel);\n    // Total number of data codewords\n    const dataTotalCodewords = totalCodewords - ecTotalCodewords;\n    // Total number of blocks\n    const ecTotalBlocks = ECCode.getBlocksCount(version, errorCorrectionLevel);\n    // Calculate how many blocks each group should contain\n    const blocksInGroup2 = totalCodewords % ecTotalBlocks;\n    const blocksInGroup1 = ecTotalBlocks - blocksInGroup2;\n    const totalCodewordsInGroup1 = Math.floor(totalCodewords / ecTotalBlocks);\n    const dataCodewordsInGroup1 = Math.floor(dataTotalCodewords / ecTotalBlocks);\n    const dataCodewordsInGroup2 = dataCodewordsInGroup1 + 1;\n    // Number of EC codewords is the same for both groups\n    const ecCount = totalCodewordsInGroup1 - dataCodewordsInGroup1;\n    // Initialize a Reed-Solomon encoder with a generator polynomial of degree ecCount\n    const rs = new ReedSolomonEncoder(ecCount);\n    let offset = 0;\n    const dcData = new Array(ecTotalBlocks);\n    const ecData = new Array(ecTotalBlocks);\n    let maxDataSize = 0;\n    const buffer = new Uint8Array(bitBuffer.buffer);\n    // Divide the buffer into the required number of blocks\n    for(let b = 0; b < ecTotalBlocks; b++){\n        const dataSize = b < blocksInGroup1 ? dataCodewordsInGroup1 : dataCodewordsInGroup2;\n        // extract a block of data from buffer\n        dcData[b] = buffer.slice(offset, offset + dataSize);\n        // Calculate EC codewords for this data block\n        ecData[b] = rs.encode(dcData[b]);\n        offset += dataSize;\n        maxDataSize = Math.max(maxDataSize, dataSize);\n    }\n    // Create final data\n    // Interleave the data and error correction codewords from each block\n    const data = new Uint8Array(totalCodewords);\n    let index = 0;\n    let i, r;\n    // Add data codewords\n    for(i = 0; i < maxDataSize; i++){\n        for(r = 0; r < ecTotalBlocks; r++){\n            if (i < dcData[r].length) {\n                data[index++] = dcData[r][i];\n            }\n        }\n    }\n    // Apped EC codewords\n    for(i = 0; i < ecCount; i++){\n        for(r = 0; r < ecTotalBlocks; r++){\n            data[index++] = ecData[r][i];\n        }\n    }\n    return data;\n}\n/**\n * Build QR Code symbol\n *\n * @param  {String} data                 Input string\n * @param  {Number} version              QR Code version\n * @param  {ErrorCorretionLevel} errorCorrectionLevel Error level\n * @param  {MaskPattern} maskPattern     Mask pattern\n * @return {Object}                      Object containing symbol data\n */ function createSymbol(data, version, errorCorrectionLevel, maskPattern) {\n    let segments;\n    if (Array.isArray(data)) {\n        segments = Segments.fromArray(data);\n    } else if (typeof data === \"string\") {\n        let estimatedVersion = version;\n        if (!estimatedVersion) {\n            const rawSegments = Segments.rawSplit(data);\n            // Estimate best version that can contain raw splitted segments\n            estimatedVersion = Version.getBestVersionForData(rawSegments, errorCorrectionLevel);\n        }\n        // Build optimized segments\n        // If estimated version is undefined, try with the highest version\n        segments = Segments.fromString(data, estimatedVersion || 40);\n    } else {\n        throw new Error(\"Invalid data\");\n    }\n    // Get the min version that can contain data\n    const bestVersion = Version.getBestVersionForData(segments, errorCorrectionLevel);\n    // If no version is found, data cannot be stored\n    if (!bestVersion) {\n        throw new Error(\"The amount of data is too big to be stored in a QR Code\");\n    }\n    // If not specified, use min version as default\n    if (!version) {\n        version = bestVersion;\n    // Check if the specified version can contain the data\n    } else if (version < bestVersion) {\n        throw new Error(\"\\n\" + \"The chosen QR Code version cannot contain this amount of data.\\n\" + \"Minimum version required to store current data is: \" + bestVersion + \".\\n\");\n    }\n    const dataBits = createData(version, errorCorrectionLevel, segments);\n    // Allocate matrix buffer\n    const moduleCount = Utils.getSymbolSize(version);\n    const modules = new BitMatrix(moduleCount);\n    // Add function modules\n    setupFinderPattern(modules, version);\n    setupTimingPattern(modules);\n    setupAlignmentPattern(modules, version);\n    // Add temporary dummy bits for format info just to set them as reserved.\n    // This is needed to prevent these bits from being masked by {@link MaskPattern.applyMask}\n    // since the masking operation must be performed only on the encoding region.\n    // These blocks will be replaced with correct values later in code.\n    setupFormatInfo(modules, errorCorrectionLevel, 0);\n    if (version >= 7) {\n        setupVersionInfo(modules, version);\n    }\n    // Add data codewords\n    setupData(modules, dataBits);\n    if (isNaN(maskPattern)) {\n        // Find best mask pattern\n        maskPattern = MaskPattern.getBestMask(modules, setupFormatInfo.bind(null, modules, errorCorrectionLevel));\n    }\n    // Apply mask pattern\n    MaskPattern.applyMask(maskPattern, modules);\n    // Replace format info bits with correct values\n    setupFormatInfo(modules, errorCorrectionLevel, maskPattern);\n    return {\n        modules: modules,\n        version: version,\n        errorCorrectionLevel: errorCorrectionLevel,\n        maskPattern: maskPattern,\n        segments: segments\n    };\n}\n/**\n * QR Code\n *\n * @param {String | Array} data                 Input data\n * @param {Object} options                      Optional configurations\n * @param {Number} options.version              QR Code version\n * @param {String} options.errorCorrectionLevel Error correction level\n * @param {Function} options.toSJISFunc         Helper func to convert utf8 to sjis\n */ exports.create = function create(data, options) {\n    if (typeof data === \"undefined\" || data === \"\") {\n        throw new Error(\"No input text\");\n    }\n    let errorCorrectionLevel = ECLevel.M;\n    let version;\n    let mask;\n    if (typeof options !== \"undefined\") {\n        // Use higher error correction level as default\n        errorCorrectionLevel = ECLevel.from(options.errorCorrectionLevel, ECLevel.M);\n        version = Version.from(options.version);\n        mask = MaskPattern.from(options.maskPattern);\n        if (options.toSJISFunc) {\n            Utils.setToSJISFunction(options.toSJISFunc);\n        }\n    }\n    return createSymbol(data, version, errorCorrectionLevel, mask);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/qrcode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/reed-solomon-encoder.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/reed-solomon-encoder.js ***!
  \**********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst Polynomial = __webpack_require__(/*! ./polynomial */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/polynomial.js\");\nfunction ReedSolomonEncoder(degree) {\n    this.genPoly = undefined;\n    this.degree = degree;\n    if (this.degree) this.initialize(this.degree);\n}\n/**\n * Initialize the encoder.\n * The input param should correspond to the number of error correction codewords.\n *\n * @param  {Number} degree\n */ ReedSolomonEncoder.prototype.initialize = function initialize(degree) {\n    // create an irreducible generator polynomial\n    this.degree = degree;\n    this.genPoly = Polynomial.generateECPolynomial(this.degree);\n};\n/**\n * Encodes a chunk of data\n *\n * @param  {Uint8Array} data Buffer containing input data\n * @return {Uint8Array}      Buffer containing encoded data\n */ ReedSolomonEncoder.prototype.encode = function encode(data) {\n    if (!this.genPoly) {\n        throw new Error(\"Encoder not initialized\");\n    }\n    // Calculate EC for this data block\n    // extends data size to data+genPoly size\n    const paddedData = new Uint8Array(data.length + this.degree);\n    paddedData.set(data);\n    // The error correction codewords are the remainder after dividing the data codewords\n    // by a generator polynomial\n    const remainder = Polynomial.mod(paddedData, this.genPoly);\n    // return EC data blocks (last n byte, where n is the degree of genPoly)\n    // If coefficients number in remainder are less than genPoly degree,\n    // pad with 0s to the left to reach the needed number of coefficients\n    const start = this.degree - remainder.length;\n    if (start > 0) {\n        const buff = new Uint8Array(this.degree);\n        buff.set(remainder, start);\n        return buff;\n    }\n    return remainder;\n};\nmodule.exports = ReedSolomonEncoder;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS4zL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvcmVlZC1zb2xvbW9uLWVuY29kZXIuanMiLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU1BLGFBQWFDLG1CQUFPQSxDQUFDO0FBRTNCLFNBQVNDLG1CQUFvQkMsTUFBTTtJQUNqQyxJQUFJLENBQUNDLE9BQU8sR0FBR0M7SUFDZixJQUFJLENBQUNGLE1BQU0sR0FBR0E7SUFFZCxJQUFJLElBQUksQ0FBQ0EsTUFBTSxFQUFFLElBQUksQ0FBQ0csVUFBVSxDQUFDLElBQUksQ0FBQ0gsTUFBTTtBQUM5QztBQUVBOzs7OztDQUtDLEdBQ0RELG1CQUFtQkssU0FBUyxDQUFDRCxVQUFVLEdBQUcsU0FBU0EsV0FBWUgsTUFBTTtJQUNuRSw2Q0FBNkM7SUFDN0MsSUFBSSxDQUFDQSxNQUFNLEdBQUdBO0lBQ2QsSUFBSSxDQUFDQyxPQUFPLEdBQUdKLFdBQVdRLG9CQUFvQixDQUFDLElBQUksQ0FBQ0wsTUFBTTtBQUM1RDtBQUVBOzs7OztDQUtDLEdBQ0RELG1CQUFtQkssU0FBUyxDQUFDRSxNQUFNLEdBQUcsU0FBU0EsT0FBUUMsSUFBSTtJQUN6RCxJQUFJLENBQUMsSUFBSSxDQUFDTixPQUFPLEVBQUU7UUFDakIsTUFBTSxJQUFJTyxNQUFNO0lBQ2xCO0lBRUEsbUNBQW1DO0lBQ25DLHlDQUF5QztJQUN6QyxNQUFNQyxhQUFhLElBQUlDLFdBQVdILEtBQUtJLE1BQU0sR0FBRyxJQUFJLENBQUNYLE1BQU07SUFDM0RTLFdBQVdHLEdBQUcsQ0FBQ0w7SUFFZixxRkFBcUY7SUFDckYsNEJBQTRCO0lBQzVCLE1BQU1NLFlBQVloQixXQUFXaUIsR0FBRyxDQUFDTCxZQUFZLElBQUksQ0FBQ1IsT0FBTztJQUV6RCx3RUFBd0U7SUFDeEUsb0VBQW9FO0lBQ3BFLHFFQUFxRTtJQUNyRSxNQUFNYyxRQUFRLElBQUksQ0FBQ2YsTUFBTSxHQUFHYSxVQUFVRixNQUFNO0lBQzVDLElBQUlJLFFBQVEsR0FBRztRQUNiLE1BQU1DLE9BQU8sSUFBSU4sV0FBVyxJQUFJLENBQUNWLE1BQU07UUFDdkNnQixLQUFLSixHQUFHLENBQUNDLFdBQVdFO1FBRXBCLE9BQU9DO0lBQ1Q7SUFFQSxPQUFPSDtBQUNUO0FBRUFJLE9BQU9DLE9BQU8sR0FBR25CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc21hcnQtYXVkaXQvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS4zL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvcmVlZC1zb2xvbW9uLWVuY29kZXIuanM/OTI2NSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBQb2x5bm9taWFsID0gcmVxdWlyZSgnLi9wb2x5bm9taWFsJylcblxuZnVuY3Rpb24gUmVlZFNvbG9tb25FbmNvZGVyIChkZWdyZWUpIHtcbiAgdGhpcy5nZW5Qb2x5ID0gdW5kZWZpbmVkXG4gIHRoaXMuZGVncmVlID0gZGVncmVlXG5cbiAgaWYgKHRoaXMuZGVncmVlKSB0aGlzLmluaXRpYWxpemUodGhpcy5kZWdyZWUpXG59XG5cbi8qKlxuICogSW5pdGlhbGl6ZSB0aGUgZW5jb2Rlci5cbiAqIFRoZSBpbnB1dCBwYXJhbSBzaG91bGQgY29ycmVzcG9uZCB0byB0aGUgbnVtYmVyIG9mIGVycm9yIGNvcnJlY3Rpb24gY29kZXdvcmRzLlxuICpcbiAqIEBwYXJhbSAge051bWJlcn0gZGVncmVlXG4gKi9cblJlZWRTb2xvbW9uRW5jb2Rlci5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uIGluaXRpYWxpemUgKGRlZ3JlZSkge1xuICAvLyBjcmVhdGUgYW4gaXJyZWR1Y2libGUgZ2VuZXJhdG9yIHBvbHlub21pYWxcbiAgdGhpcy5kZWdyZWUgPSBkZWdyZWVcbiAgdGhpcy5nZW5Qb2x5ID0gUG9seW5vbWlhbC5nZW5lcmF0ZUVDUG9seW5vbWlhbCh0aGlzLmRlZ3JlZSlcbn1cblxuLyoqXG4gKiBFbmNvZGVzIGEgY2h1bmsgb2YgZGF0YVxuICpcbiAqIEBwYXJhbSAge1VpbnQ4QXJyYXl9IGRhdGEgQnVmZmVyIGNvbnRhaW5pbmcgaW5wdXQgZGF0YVxuICogQHJldHVybiB7VWludDhBcnJheX0gICAgICBCdWZmZXIgY29udGFpbmluZyBlbmNvZGVkIGRhdGFcbiAqL1xuUmVlZFNvbG9tb25FbmNvZGVyLnByb3RvdHlwZS5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUgKGRhdGEpIHtcbiAgaWYgKCF0aGlzLmdlblBvbHkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0VuY29kZXIgbm90IGluaXRpYWxpemVkJylcbiAgfVxuXG4gIC8vIENhbGN1bGF0ZSBFQyBmb3IgdGhpcyBkYXRhIGJsb2NrXG4gIC8vIGV4dGVuZHMgZGF0YSBzaXplIHRvIGRhdGErZ2VuUG9seSBzaXplXG4gIGNvbnN0IHBhZGRlZERhdGEgPSBuZXcgVWludDhBcnJheShkYXRhLmxlbmd0aCArIHRoaXMuZGVncmVlKVxuICBwYWRkZWREYXRhLnNldChkYXRhKVxuXG4gIC8vIFRoZSBlcnJvciBjb3JyZWN0aW9uIGNvZGV3b3JkcyBhcmUgdGhlIHJlbWFpbmRlciBhZnRlciBkaXZpZGluZyB0aGUgZGF0YSBjb2Rld29yZHNcbiAgLy8gYnkgYSBnZW5lcmF0b3IgcG9seW5vbWlhbFxuICBjb25zdCByZW1haW5kZXIgPSBQb2x5bm9taWFsLm1vZChwYWRkZWREYXRhLCB0aGlzLmdlblBvbHkpXG5cbiAgLy8gcmV0dXJuIEVDIGRhdGEgYmxvY2tzIChsYXN0IG4gYnl0ZSwgd2hlcmUgbiBpcyB0aGUgZGVncmVlIG9mIGdlblBvbHkpXG4gIC8vIElmIGNvZWZmaWNpZW50cyBudW1iZXIgaW4gcmVtYWluZGVyIGFyZSBsZXNzIHRoYW4gZ2VuUG9seSBkZWdyZWUsXG4gIC8vIHBhZCB3aXRoIDBzIHRvIHRoZSBsZWZ0IHRvIHJlYWNoIHRoZSBuZWVkZWQgbnVtYmVyIG9mIGNvZWZmaWNpZW50c1xuICBjb25zdCBzdGFydCA9IHRoaXMuZGVncmVlIC0gcmVtYWluZGVyLmxlbmd0aFxuICBpZiAoc3RhcnQgPiAwKSB7XG4gICAgY29uc3QgYnVmZiA9IG5ldyBVaW50OEFycmF5KHRoaXMuZGVncmVlKVxuICAgIGJ1ZmYuc2V0KHJlbWFpbmRlciwgc3RhcnQpXG5cbiAgICByZXR1cm4gYnVmZlxuICB9XG5cbiAgcmV0dXJuIHJlbWFpbmRlclxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlZWRTb2xvbW9uRW5jb2RlclxuIl0sIm5hbWVzIjpbIlBvbHlub21pYWwiLCJyZXF1aXJlIiwiUmVlZFNvbG9tb25FbmNvZGVyIiwiZGVncmVlIiwiZ2VuUG9seSIsInVuZGVmaW5lZCIsImluaXRpYWxpemUiLCJwcm90b3R5cGUiLCJnZW5lcmF0ZUVDUG9seW5vbWlhbCIsImVuY29kZSIsImRhdGEiLCJFcnJvciIsInBhZGRlZERhdGEiLCJVaW50OEFycmF5IiwibGVuZ3RoIiwic2V0IiwicmVtYWluZGVyIiwibW9kIiwic3RhcnQiLCJidWZmIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/reed-solomon-encoder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/regex.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/regex.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("const numeric = \"[0-9]+\";\nconst alphanumeric = \"[A-Z $%*+\\\\-./:]+\";\nlet kanji = \"(?:[u3000-u303F]|[u3040-u309F]|[u30A0-u30FF]|\" + \"[uFF00-uFFEF]|[u4E00-u9FAF]|[u2605-u2606]|[u2190-u2195]|u203B|\" + \"[u2010u2015u2018u2019u2025u2026u201Cu201Du2225u2260]|\" + \"[u0391-u0451]|[u00A7u00A8u00B1u00B4u00D7u00F7])+\";\nkanji = kanji.replace(/u/g, \"\\\\u\");\nconst byte = \"(?:(?![A-Z0-9 $%*+\\\\-./:]|\" + kanji + \")(?:.|[\\r\\n]))+\";\nexports.KANJI = new RegExp(kanji, \"g\");\nexports.BYTE_KANJI = new RegExp(\"[^A-Z0-9 $%*+\\\\-./:]+\", \"g\");\nexports.BYTE = new RegExp(byte, \"g\");\nexports.NUMERIC = new RegExp(numeric, \"g\");\nexports.ALPHANUMERIC = new RegExp(alphanumeric, \"g\");\nconst TEST_KANJI = new RegExp(\"^\" + kanji + \"$\");\nconst TEST_NUMERIC = new RegExp(\"^\" + numeric + \"$\");\nconst TEST_ALPHANUMERIC = new RegExp(\"^[A-Z0-9 $%*+\\\\-./:]+$\");\nexports.testKanji = function testKanji(str) {\n    return TEST_KANJI.test(str);\n};\nexports.testNumeric = function testNumeric(str) {\n    return TEST_NUMERIC.test(str);\n};\nexports.testAlphanumeric = function testAlphanumeric(str) {\n    return TEST_ALPHANUMERIC.test(str);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS4zL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvcmVnZXguanMiLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsVUFBVTtBQUNoQixNQUFNQyxlQUFlO0FBQ3JCLElBQUlDLFFBQVEsa0RBQ1YsbUVBQ0EsMERBQ0E7QUFDRkEsUUFBUUEsTUFBTUMsT0FBTyxDQUFDLE1BQU07QUFFNUIsTUFBTUMsT0FBTywrQkFBK0JGLFFBQVE7QUFFcERHLGFBQWEsR0FBRyxJQUFJRSxPQUFPTCxPQUFPO0FBQ2xDRyxrQkFBa0IsR0FBRyxJQUFJRSxPQUFPLHlCQUF5QjtBQUN6REYsWUFBWSxHQUFHLElBQUlFLE9BQU9ILE1BQU07QUFDaENDLGVBQWUsR0FBRyxJQUFJRSxPQUFPUCxTQUFTO0FBQ3RDSyxvQkFBb0IsR0FBRyxJQUFJRSxPQUFPTixjQUFjO0FBRWhELE1BQU1XLGFBQWEsSUFBSUwsT0FBTyxNQUFNTCxRQUFRO0FBQzVDLE1BQU1XLGVBQWUsSUFBSU4sT0FBTyxNQUFNUCxVQUFVO0FBQ2hELE1BQU1jLG9CQUFvQixJQUFJUCxPQUFPO0FBRXJDRixpQkFBaUIsR0FBRyxTQUFTVSxVQUFXQyxHQUFHO0lBQ3pDLE9BQU9KLFdBQVdLLElBQUksQ0FBQ0Q7QUFDekI7QUFFQVgsbUJBQW1CLEdBQUcsU0FBU2EsWUFBYUYsR0FBRztJQUM3QyxPQUFPSCxhQUFhSSxJQUFJLENBQUNEO0FBQzNCO0FBRUFYLHdCQUF3QixHQUFHLFNBQVNjLGlCQUFrQkgsR0FBRztJQUN2RCxPQUFPRixrQkFBa0JHLElBQUksQ0FBQ0Q7QUFDaEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbWFydC1hdWRpdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9xcmNvZGVAMS41LjMvbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9yZWdleC5qcz9jNGJlIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IG51bWVyaWMgPSAnWzAtOV0rJ1xuY29uc3QgYWxwaGFudW1lcmljID0gJ1tBLVogJCUqK1xcXFwtLi86XSsnXG5sZXQga2FuamkgPSAnKD86W3UzMDAwLXUzMDNGXXxbdTMwNDAtdTMwOUZdfFt1MzBBMC11MzBGRl18JyArXG4gICdbdUZGMDAtdUZGRUZdfFt1NEUwMC11OUZBRl18W3UyNjA1LXUyNjA2XXxbdTIxOTAtdTIxOTVdfHUyMDNCfCcgK1xuICAnW3UyMDEwdTIwMTV1MjAxOHUyMDE5dTIwMjV1MjAyNnUyMDFDdTIwMUR1MjIyNXUyMjYwXXwnICtcbiAgJ1t1MDM5MS11MDQ1MV18W3UwMEE3dTAwQTh1MDBCMXUwMEI0dTAwRDd1MDBGN10pKydcbmthbmppID0ga2FuamkucmVwbGFjZSgvdS9nLCAnXFxcXHUnKVxuXG5jb25zdCBieXRlID0gJyg/Oig/IVtBLVowLTkgJCUqK1xcXFwtLi86XXwnICsga2FuamkgKyAnKSg/Oi58W1xcclxcbl0pKSsnXG5cbmV4cG9ydHMuS0FOSkkgPSBuZXcgUmVnRXhwKGthbmppLCAnZycpXG5leHBvcnRzLkJZVEVfS0FOSkkgPSBuZXcgUmVnRXhwKCdbXkEtWjAtOSAkJSorXFxcXC0uLzpdKycsICdnJylcbmV4cG9ydHMuQllURSA9IG5ldyBSZWdFeHAoYnl0ZSwgJ2cnKVxuZXhwb3J0cy5OVU1FUklDID0gbmV3IFJlZ0V4cChudW1lcmljLCAnZycpXG5leHBvcnRzLkFMUEhBTlVNRVJJQyA9IG5ldyBSZWdFeHAoYWxwaGFudW1lcmljLCAnZycpXG5cbmNvbnN0IFRFU1RfS0FOSkkgPSBuZXcgUmVnRXhwKCdeJyArIGthbmppICsgJyQnKVxuY29uc3QgVEVTVF9OVU1FUklDID0gbmV3IFJlZ0V4cCgnXicgKyBudW1lcmljICsgJyQnKVxuY29uc3QgVEVTVF9BTFBIQU5VTUVSSUMgPSBuZXcgUmVnRXhwKCdeW0EtWjAtOSAkJSorXFxcXC0uLzpdKyQnKVxuXG5leHBvcnRzLnRlc3RLYW5qaSA9IGZ1bmN0aW9uIHRlc3RLYW5qaSAoc3RyKSB7XG4gIHJldHVybiBURVNUX0tBTkpJLnRlc3Qoc3RyKVxufVxuXG5leHBvcnRzLnRlc3ROdW1lcmljID0gZnVuY3Rpb24gdGVzdE51bWVyaWMgKHN0cikge1xuICByZXR1cm4gVEVTVF9OVU1FUklDLnRlc3Qoc3RyKVxufVxuXG5leHBvcnRzLnRlc3RBbHBoYW51bWVyaWMgPSBmdW5jdGlvbiB0ZXN0QWxwaGFudW1lcmljIChzdHIpIHtcbiAgcmV0dXJuIFRFU1RfQUxQSEFOVU1FUklDLnRlc3Qoc3RyKVxufVxuIl0sIm5hbWVzIjpbIm51bWVyaWMiLCJhbHBoYW51bWVyaWMiLCJrYW5qaSIsInJlcGxhY2UiLCJieXRlIiwiZXhwb3J0cyIsIktBTkpJIiwiUmVnRXhwIiwiQllURV9LQU5KSSIsIkJZVEUiLCJOVU1FUklDIiwiQUxQSEFOVU1FUklDIiwiVEVTVF9LQU5KSSIsIlRFU1RfTlVNRVJJQyIsIlRFU1RfQUxQSEFOVU1FUklDIiwidGVzdEthbmppIiwic3RyIiwidGVzdCIsInRlc3ROdW1lcmljIiwidGVzdEFscGhhbnVtZXJpYyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/regex.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/segments.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/segments.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const Mode = __webpack_require__(/*! ./mode */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/mode.js\");\nconst NumericData = __webpack_require__(/*! ./numeric-data */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/numeric-data.js\");\nconst AlphanumericData = __webpack_require__(/*! ./alphanumeric-data */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/alphanumeric-data.js\");\nconst ByteData = __webpack_require__(/*! ./byte-data */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/byte-data.js\");\nconst KanjiData = __webpack_require__(/*! ./kanji-data */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/kanji-data.js\");\nconst Regex = __webpack_require__(/*! ./regex */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/regex.js\");\nconst Utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/utils.js\");\nconst dijkstra = __webpack_require__(/*! dijkstrajs */ \"(ssr)/./node_modules/.pnpm/dijkstrajs@1.0.3/node_modules/dijkstrajs/dijkstra.js\");\n/**\n * Returns UTF8 byte length\n *\n * @param  {String} str Input string\n * @return {Number}     Number of byte\n */ function getStringByteLength(str) {\n    return unescape(encodeURIComponent(str)).length;\n}\n/**\n * Get a list of segments of the specified mode\n * from a string\n *\n * @param  {Mode}   mode Segment mode\n * @param  {String} str  String to process\n * @return {Array}       Array of object with segments data\n */ function getSegments(regex, mode, str) {\n    const segments = [];\n    let result;\n    while((result = regex.exec(str)) !== null){\n        segments.push({\n            data: result[0],\n            index: result.index,\n            mode: mode,\n            length: result[0].length\n        });\n    }\n    return segments;\n}\n/**\n * Extracts a series of segments with the appropriate\n * modes from a string\n *\n * @param  {String} dataStr Input string\n * @return {Array}          Array of object with segments data\n */ function getSegmentsFromString(dataStr) {\n    const numSegs = getSegments(Regex.NUMERIC, Mode.NUMERIC, dataStr);\n    const alphaNumSegs = getSegments(Regex.ALPHANUMERIC, Mode.ALPHANUMERIC, dataStr);\n    let byteSegs;\n    let kanjiSegs;\n    if (Utils.isKanjiModeEnabled()) {\n        byteSegs = getSegments(Regex.BYTE, Mode.BYTE, dataStr);\n        kanjiSegs = getSegments(Regex.KANJI, Mode.KANJI, dataStr);\n    } else {\n        byteSegs = getSegments(Regex.BYTE_KANJI, Mode.BYTE, dataStr);\n        kanjiSegs = [];\n    }\n    const segs = numSegs.concat(alphaNumSegs, byteSegs, kanjiSegs);\n    return segs.sort(function(s1, s2) {\n        return s1.index - s2.index;\n    }).map(function(obj) {\n        return {\n            data: obj.data,\n            mode: obj.mode,\n            length: obj.length\n        };\n    });\n}\n/**\n * Returns how many bits are needed to encode a string of\n * specified length with the specified mode\n *\n * @param  {Number} length String length\n * @param  {Mode} mode     Segment mode\n * @return {Number}        Bit length\n */ function getSegmentBitsLength(length, mode) {\n    switch(mode){\n        case Mode.NUMERIC:\n            return NumericData.getBitsLength(length);\n        case Mode.ALPHANUMERIC:\n            return AlphanumericData.getBitsLength(length);\n        case Mode.KANJI:\n            return KanjiData.getBitsLength(length);\n        case Mode.BYTE:\n            return ByteData.getBitsLength(length);\n    }\n}\n/**\n * Merges adjacent segments which have the same mode\n *\n * @param  {Array} segs Array of object with segments data\n * @return {Array}      Array of object with segments data\n */ function mergeSegments(segs) {\n    return segs.reduce(function(acc, curr) {\n        const prevSeg = acc.length - 1 >= 0 ? acc[acc.length - 1] : null;\n        if (prevSeg && prevSeg.mode === curr.mode) {\n            acc[acc.length - 1].data += curr.data;\n            return acc;\n        }\n        acc.push(curr);\n        return acc;\n    }, []);\n}\n/**\n * Generates a list of all possible nodes combination which\n * will be used to build a segments graph.\n *\n * Nodes are divided by groups. Each group will contain a list of all the modes\n * in which is possible to encode the given text.\n *\n * For example the text '12345' can be encoded as Numeric, Alphanumeric or Byte.\n * The group for '12345' will contain then 3 objects, one for each\n * possible encoding mode.\n *\n * Each node represents a possible segment.\n *\n * @param  {Array} segs Array of object with segments data\n * @return {Array}      Array of object with segments data\n */ function buildNodes(segs) {\n    const nodes = [];\n    for(let i = 0; i < segs.length; i++){\n        const seg = segs[i];\n        switch(seg.mode){\n            case Mode.NUMERIC:\n                nodes.push([\n                    seg,\n                    {\n                        data: seg.data,\n                        mode: Mode.ALPHANUMERIC,\n                        length: seg.length\n                    },\n                    {\n                        data: seg.data,\n                        mode: Mode.BYTE,\n                        length: seg.length\n                    }\n                ]);\n                break;\n            case Mode.ALPHANUMERIC:\n                nodes.push([\n                    seg,\n                    {\n                        data: seg.data,\n                        mode: Mode.BYTE,\n                        length: seg.length\n                    }\n                ]);\n                break;\n            case Mode.KANJI:\n                nodes.push([\n                    seg,\n                    {\n                        data: seg.data,\n                        mode: Mode.BYTE,\n                        length: getStringByteLength(seg.data)\n                    }\n                ]);\n                break;\n            case Mode.BYTE:\n                nodes.push([\n                    {\n                        data: seg.data,\n                        mode: Mode.BYTE,\n                        length: getStringByteLength(seg.data)\n                    }\n                ]);\n        }\n    }\n    return nodes;\n}\n/**\n * Builds a graph from a list of nodes.\n * All segments in each node group will be connected with all the segments of\n * the next group and so on.\n *\n * At each connection will be assigned a weight depending on the\n * segment's byte length.\n *\n * @param  {Array} nodes    Array of object with segments data\n * @param  {Number} version QR Code version\n * @return {Object}         Graph of all possible segments\n */ function buildGraph(nodes, version) {\n    const table = {};\n    const graph = {\n        start: {}\n    };\n    let prevNodeIds = [\n        \"start\"\n    ];\n    for(let i = 0; i < nodes.length; i++){\n        const nodeGroup = nodes[i];\n        const currentNodeIds = [];\n        for(let j = 0; j < nodeGroup.length; j++){\n            const node = nodeGroup[j];\n            const key = \"\" + i + j;\n            currentNodeIds.push(key);\n            table[key] = {\n                node: node,\n                lastCount: 0\n            };\n            graph[key] = {};\n            for(let n = 0; n < prevNodeIds.length; n++){\n                const prevNodeId = prevNodeIds[n];\n                if (table[prevNodeId] && table[prevNodeId].node.mode === node.mode) {\n                    graph[prevNodeId][key] = getSegmentBitsLength(table[prevNodeId].lastCount + node.length, node.mode) - getSegmentBitsLength(table[prevNodeId].lastCount, node.mode);\n                    table[prevNodeId].lastCount += node.length;\n                } else {\n                    if (table[prevNodeId]) table[prevNodeId].lastCount = node.length;\n                    graph[prevNodeId][key] = getSegmentBitsLength(node.length, node.mode) + 4 + Mode.getCharCountIndicator(node.mode, version) // switch cost\n                    ;\n                }\n            }\n        }\n        prevNodeIds = currentNodeIds;\n    }\n    for(let n = 0; n < prevNodeIds.length; n++){\n        graph[prevNodeIds[n]].end = 0;\n    }\n    return {\n        map: graph,\n        table: table\n    };\n}\n/**\n * Builds a segment from a specified data and mode.\n * If a mode is not specified, the more suitable will be used.\n *\n * @param  {String} data             Input data\n * @param  {Mode | String} modesHint Data mode\n * @return {Segment}                 Segment\n */ function buildSingleSegment(data, modesHint) {\n    let mode;\n    const bestMode = Mode.getBestModeForData(data);\n    mode = Mode.from(modesHint, bestMode);\n    // Make sure data can be encoded\n    if (mode !== Mode.BYTE && mode.bit < bestMode.bit) {\n        throw new Error('\"' + data + '\"' + \" cannot be encoded with mode \" + Mode.toString(mode) + \".\\n Suggested mode is: \" + Mode.toString(bestMode));\n    }\n    // Use Mode.BYTE if Kanji support is disabled\n    if (mode === Mode.KANJI && !Utils.isKanjiModeEnabled()) {\n        mode = Mode.BYTE;\n    }\n    switch(mode){\n        case Mode.NUMERIC:\n            return new NumericData(data);\n        case Mode.ALPHANUMERIC:\n            return new AlphanumericData(data);\n        case Mode.KANJI:\n            return new KanjiData(data);\n        case Mode.BYTE:\n            return new ByteData(data);\n    }\n}\n/**\n * Builds a list of segments from an array.\n * Array can contain Strings or Objects with segment's info.\n *\n * For each item which is a string, will be generated a segment with the given\n * string and the more appropriate encoding mode.\n *\n * For each item which is an object, will be generated a segment with the given\n * data and mode.\n * Objects must contain at least the property \"data\".\n * If property \"mode\" is not present, the more suitable mode will be used.\n *\n * @param  {Array} array Array of objects with segments data\n * @return {Array}       Array of Segments\n */ exports.fromArray = function fromArray(array) {\n    return array.reduce(function(acc, seg) {\n        if (typeof seg === \"string\") {\n            acc.push(buildSingleSegment(seg, null));\n        } else if (seg.data) {\n            acc.push(buildSingleSegment(seg.data, seg.mode));\n        }\n        return acc;\n    }, []);\n};\n/**\n * Builds an optimized sequence of segments from a string,\n * which will produce the shortest possible bitstream.\n *\n * @param  {String} data    Input string\n * @param  {Number} version QR Code version\n * @return {Array}          Array of segments\n */ exports.fromString = function fromString(data, version) {\n    const segs = getSegmentsFromString(data, Utils.isKanjiModeEnabled());\n    const nodes = buildNodes(segs);\n    const graph = buildGraph(nodes, version);\n    const path = dijkstra.find_path(graph.map, \"start\", \"end\");\n    const optimizedSegs = [];\n    for(let i = 1; i < path.length - 1; i++){\n        optimizedSegs.push(graph.table[path[i]].node);\n    }\n    return exports.fromArray(mergeSegments(optimizedSegs));\n};\n/**\n * Splits a string in various segments with the modes which\n * best represent their content.\n * The produced segments are far from being optimized.\n * The output of this function is only used to estimate a QR Code version\n * which may contain the data.\n *\n * @param  {string} data Input string\n * @return {Array}       Array of segments\n */ exports.rawSplit = function rawSplit(data) {\n    return exports.fromArray(getSegmentsFromString(data, Utils.isKanjiModeEnabled()));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS4zL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvc2VnbWVudHMuanMiLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsT0FBT0MsbUJBQU9BLENBQUM7QUFDckIsTUFBTUMsY0FBY0QsbUJBQU9BLENBQUM7QUFDNUIsTUFBTUUsbUJBQW1CRixtQkFBT0EsQ0FBQztBQUNqQyxNQUFNRyxXQUFXSCxtQkFBT0EsQ0FBQztBQUN6QixNQUFNSSxZQUFZSixtQkFBT0EsQ0FBQztBQUMxQixNQUFNSyxRQUFRTCxtQkFBT0EsQ0FBQztBQUN0QixNQUFNTSxRQUFRTixtQkFBT0EsQ0FBQztBQUN0QixNQUFNTyxXQUFXUCxtQkFBT0EsQ0FBQztBQUV6Qjs7Ozs7Q0FLQyxHQUNELFNBQVNRLG9CQUFxQkMsR0FBRztJQUMvQixPQUFPQyxTQUFTQyxtQkFBbUJGLE1BQU1HLE1BQU07QUFDakQ7QUFFQTs7Ozs7OztDQU9DLEdBQ0QsU0FBU0MsWUFBYUMsS0FBSyxFQUFFQyxJQUFJLEVBQUVOLEdBQUc7SUFDcEMsTUFBTU8sV0FBVyxFQUFFO0lBQ25CLElBQUlDO0lBRUosTUFBTyxDQUFDQSxTQUFTSCxNQUFNSSxJQUFJLENBQUNULElBQUcsTUFBTyxLQUFNO1FBQzFDTyxTQUFTRyxJQUFJLENBQUM7WUFDWkMsTUFBTUgsTUFBTSxDQUFDLEVBQUU7WUFDZkksT0FBT0osT0FBT0ksS0FBSztZQUNuQk4sTUFBTUE7WUFDTkgsUUFBUUssTUFBTSxDQUFDLEVBQUUsQ0FBQ0wsTUFBTTtRQUMxQjtJQUNGO0lBRUEsT0FBT0k7QUFDVDtBQUVBOzs7Ozs7Q0FNQyxHQUNELFNBQVNNLHNCQUF1QkMsT0FBTztJQUNyQyxNQUFNQyxVQUFVWCxZQUFZUixNQUFNb0IsT0FBTyxFQUFFMUIsS0FBSzBCLE9BQU8sRUFBRUY7SUFDekQsTUFBTUcsZUFBZWIsWUFBWVIsTUFBTXNCLFlBQVksRUFBRTVCLEtBQUs0QixZQUFZLEVBQUVKO0lBQ3hFLElBQUlLO0lBQ0osSUFBSUM7SUFFSixJQUFJdkIsTUFBTXdCLGtCQUFrQixJQUFJO1FBQzlCRixXQUFXZixZQUFZUixNQUFNMEIsSUFBSSxFQUFFaEMsS0FBS2dDLElBQUksRUFBRVI7UUFDOUNNLFlBQVloQixZQUFZUixNQUFNMkIsS0FBSyxFQUFFakMsS0FBS2lDLEtBQUssRUFBRVQ7SUFDbkQsT0FBTztRQUNMSyxXQUFXZixZQUFZUixNQUFNNEIsVUFBVSxFQUFFbEMsS0FBS2dDLElBQUksRUFBRVI7UUFDcERNLFlBQVksRUFBRTtJQUNoQjtJQUVBLE1BQU1LLE9BQU9WLFFBQVFXLE1BQU0sQ0FBQ1QsY0FBY0UsVUFBVUM7SUFFcEQsT0FBT0ssS0FDSkUsSUFBSSxDQUFDLFNBQVVDLEVBQUUsRUFBRUMsRUFBRTtRQUNwQixPQUFPRCxHQUFHaEIsS0FBSyxHQUFHaUIsR0FBR2pCLEtBQUs7SUFDNUIsR0FDQ2tCLEdBQUcsQ0FBQyxTQUFVQyxHQUFHO1FBQ2hCLE9BQU87WUFDTHBCLE1BQU1vQixJQUFJcEIsSUFBSTtZQUNkTCxNQUFNeUIsSUFBSXpCLElBQUk7WUFDZEgsUUFBUTRCLElBQUk1QixNQUFNO1FBQ3BCO0lBQ0Y7QUFDSjtBQUVBOzs7Ozs7O0NBT0MsR0FDRCxTQUFTNkIscUJBQXNCN0IsTUFBTSxFQUFFRyxJQUFJO0lBQ3pDLE9BQVFBO1FBQ04sS0FBS2hCLEtBQUswQixPQUFPO1lBQ2YsT0FBT3hCLFlBQVl5QyxhQUFhLENBQUM5QjtRQUNuQyxLQUFLYixLQUFLNEIsWUFBWTtZQUNwQixPQUFPekIsaUJBQWlCd0MsYUFBYSxDQUFDOUI7UUFDeEMsS0FBS2IsS0FBS2lDLEtBQUs7WUFDYixPQUFPNUIsVUFBVXNDLGFBQWEsQ0FBQzlCO1FBQ2pDLEtBQUtiLEtBQUtnQyxJQUFJO1lBQ1osT0FBTzVCLFNBQVN1QyxhQUFhLENBQUM5QjtJQUNsQztBQUNGO0FBRUE7Ozs7O0NBS0MsR0FDRCxTQUFTK0IsY0FBZVQsSUFBSTtJQUMxQixPQUFPQSxLQUFLVSxNQUFNLENBQUMsU0FBVUMsR0FBRyxFQUFFQyxJQUFJO1FBQ3BDLE1BQU1DLFVBQVVGLElBQUlqQyxNQUFNLEdBQUcsS0FBSyxJQUFJaUMsR0FBRyxDQUFDQSxJQUFJakMsTUFBTSxHQUFHLEVBQUUsR0FBRztRQUM1RCxJQUFJbUMsV0FBV0EsUUFBUWhDLElBQUksS0FBSytCLEtBQUsvQixJQUFJLEVBQUU7WUFDekM4QixHQUFHLENBQUNBLElBQUlqQyxNQUFNLEdBQUcsRUFBRSxDQUFDUSxJQUFJLElBQUkwQixLQUFLMUIsSUFBSTtZQUNyQyxPQUFPeUI7UUFDVDtRQUVBQSxJQUFJMUIsSUFBSSxDQUFDMkI7UUFDVCxPQUFPRDtJQUNULEdBQUcsRUFBRTtBQUNQO0FBRUE7Ozs7Ozs7Ozs7Ozs7OztDQWVDLEdBQ0QsU0FBU0csV0FBWWQsSUFBSTtJQUN2QixNQUFNZSxRQUFRLEVBQUU7SUFDaEIsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUloQixLQUFLdEIsTUFBTSxFQUFFc0MsSUFBSztRQUNwQyxNQUFNQyxNQUFNakIsSUFBSSxDQUFDZ0IsRUFBRTtRQUVuQixPQUFRQyxJQUFJcEMsSUFBSTtZQUNkLEtBQUtoQixLQUFLMEIsT0FBTztnQkFDZndCLE1BQU05QixJQUFJLENBQUM7b0JBQUNnQztvQkFDVjt3QkFBRS9CLE1BQU0rQixJQUFJL0IsSUFBSTt3QkFBRUwsTUFBTWhCLEtBQUs0QixZQUFZO3dCQUFFZixRQUFRdUMsSUFBSXZDLE1BQU07b0JBQUM7b0JBQzlEO3dCQUFFUSxNQUFNK0IsSUFBSS9CLElBQUk7d0JBQUVMLE1BQU1oQixLQUFLZ0MsSUFBSTt3QkFBRW5CLFFBQVF1QyxJQUFJdkMsTUFBTTtvQkFBQztpQkFDdkQ7Z0JBQ0Q7WUFDRixLQUFLYixLQUFLNEIsWUFBWTtnQkFDcEJzQixNQUFNOUIsSUFBSSxDQUFDO29CQUFDZ0M7b0JBQ1Y7d0JBQUUvQixNQUFNK0IsSUFBSS9CLElBQUk7d0JBQUVMLE1BQU1oQixLQUFLZ0MsSUFBSTt3QkFBRW5CLFFBQVF1QyxJQUFJdkMsTUFBTTtvQkFBQztpQkFDdkQ7Z0JBQ0Q7WUFDRixLQUFLYixLQUFLaUMsS0FBSztnQkFDYmlCLE1BQU05QixJQUFJLENBQUM7b0JBQUNnQztvQkFDVjt3QkFBRS9CLE1BQU0rQixJQUFJL0IsSUFBSTt3QkFBRUwsTUFBTWhCLEtBQUtnQyxJQUFJO3dCQUFFbkIsUUFBUUosb0JBQW9CMkMsSUFBSS9CLElBQUk7b0JBQUU7aUJBQzFFO2dCQUNEO1lBQ0YsS0FBS3JCLEtBQUtnQyxJQUFJO2dCQUNaa0IsTUFBTTlCLElBQUksQ0FBQztvQkFDVDt3QkFBRUMsTUFBTStCLElBQUkvQixJQUFJO3dCQUFFTCxNQUFNaEIsS0FBS2dDLElBQUk7d0JBQUVuQixRQUFRSixvQkFBb0IyQyxJQUFJL0IsSUFBSTtvQkFBRTtpQkFDMUU7UUFDTDtJQUNGO0lBRUEsT0FBTzZCO0FBQ1Q7QUFFQTs7Ozs7Ozs7Ozs7Q0FXQyxHQUNELFNBQVNHLFdBQVlILEtBQUssRUFBRUksT0FBTztJQUNqQyxNQUFNQyxRQUFRLENBQUM7SUFDZixNQUFNQyxRQUFRO1FBQUVDLE9BQU8sQ0FBQztJQUFFO0lBQzFCLElBQUlDLGNBQWM7UUFBQztLQUFRO0lBRTNCLElBQUssSUFBSVAsSUFBSSxHQUFHQSxJQUFJRCxNQUFNckMsTUFBTSxFQUFFc0MsSUFBSztRQUNyQyxNQUFNUSxZQUFZVCxLQUFLLENBQUNDLEVBQUU7UUFDMUIsTUFBTVMsaUJBQWlCLEVBQUU7UUFFekIsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlGLFVBQVU5QyxNQUFNLEVBQUVnRCxJQUFLO1lBQ3pDLE1BQU1DLE9BQU9ILFNBQVMsQ0FBQ0UsRUFBRTtZQUN6QixNQUFNRSxNQUFNLEtBQUtaLElBQUlVO1lBRXJCRCxlQUFleEMsSUFBSSxDQUFDMkM7WUFDcEJSLEtBQUssQ0FBQ1EsSUFBSSxHQUFHO2dCQUFFRCxNQUFNQTtnQkFBTUUsV0FBVztZQUFFO1lBQ3hDUixLQUFLLENBQUNPLElBQUksR0FBRyxDQUFDO1lBRWQsSUFBSyxJQUFJRSxJQUFJLEdBQUdBLElBQUlQLFlBQVk3QyxNQUFNLEVBQUVvRCxJQUFLO2dCQUMzQyxNQUFNQyxhQUFhUixXQUFXLENBQUNPLEVBQUU7Z0JBRWpDLElBQUlWLEtBQUssQ0FBQ1csV0FBVyxJQUFJWCxLQUFLLENBQUNXLFdBQVcsQ0FBQ0osSUFBSSxDQUFDOUMsSUFBSSxLQUFLOEMsS0FBSzlDLElBQUksRUFBRTtvQkFDbEV3QyxLQUFLLENBQUNVLFdBQVcsQ0FBQ0gsSUFBSSxHQUNwQnJCLHFCQUFxQmEsS0FBSyxDQUFDVyxXQUFXLENBQUNGLFNBQVMsR0FBR0YsS0FBS2pELE1BQU0sRUFBRWlELEtBQUs5QyxJQUFJLElBQ3pFMEIscUJBQXFCYSxLQUFLLENBQUNXLFdBQVcsQ0FBQ0YsU0FBUyxFQUFFRixLQUFLOUMsSUFBSTtvQkFFN0R1QyxLQUFLLENBQUNXLFdBQVcsQ0FBQ0YsU0FBUyxJQUFJRixLQUFLakQsTUFBTTtnQkFDNUMsT0FBTztvQkFDTCxJQUFJMEMsS0FBSyxDQUFDVyxXQUFXLEVBQUVYLEtBQUssQ0FBQ1csV0FBVyxDQUFDRixTQUFTLEdBQUdGLEtBQUtqRCxNQUFNO29CQUVoRTJDLEtBQUssQ0FBQ1UsV0FBVyxDQUFDSCxJQUFJLEdBQUdyQixxQkFBcUJvQixLQUFLakQsTUFBTSxFQUFFaUQsS0FBSzlDLElBQUksSUFDbEUsSUFBSWhCLEtBQUttRSxxQkFBcUIsQ0FBQ0wsS0FBSzlDLElBQUksRUFBRXNDLFNBQVMsY0FBYzs7Z0JBQ3JFO1lBQ0Y7UUFDRjtRQUVBSSxjQUFjRTtJQUNoQjtJQUVBLElBQUssSUFBSUssSUFBSSxHQUFHQSxJQUFJUCxZQUFZN0MsTUFBTSxFQUFFb0QsSUFBSztRQUMzQ1QsS0FBSyxDQUFDRSxXQUFXLENBQUNPLEVBQUUsQ0FBQyxDQUFDRyxHQUFHLEdBQUc7SUFDOUI7SUFFQSxPQUFPO1FBQUU1QixLQUFLZ0I7UUFBT0QsT0FBT0E7SUFBTTtBQUNwQztBQUVBOzs7Ozs7O0NBT0MsR0FDRCxTQUFTYyxtQkFBb0JoRCxJQUFJLEVBQUVpRCxTQUFTO0lBQzFDLElBQUl0RDtJQUNKLE1BQU11RCxXQUFXdkUsS0FBS3dFLGtCQUFrQixDQUFDbkQ7SUFFekNMLE9BQU9oQixLQUFLeUUsSUFBSSxDQUFDSCxXQUFXQztJQUU1QixnQ0FBZ0M7SUFDaEMsSUFBSXZELFNBQVNoQixLQUFLZ0MsSUFBSSxJQUFJaEIsS0FBSzBELEdBQUcsR0FBR0gsU0FBU0csR0FBRyxFQUFFO1FBQ2pELE1BQU0sSUFBSUMsTUFBTSxNQUFNdEQsT0FBTyxNQUMzQixrQ0FBa0NyQixLQUFLNEUsUUFBUSxDQUFDNUQsUUFDaEQsNEJBQTRCaEIsS0FBSzRFLFFBQVEsQ0FBQ0w7SUFDOUM7SUFFQSw2Q0FBNkM7SUFDN0MsSUFBSXZELFNBQVNoQixLQUFLaUMsS0FBSyxJQUFJLENBQUMxQixNQUFNd0Isa0JBQWtCLElBQUk7UUFDdERmLE9BQU9oQixLQUFLZ0MsSUFBSTtJQUNsQjtJQUVBLE9BQVFoQjtRQUNOLEtBQUtoQixLQUFLMEIsT0FBTztZQUNmLE9BQU8sSUFBSXhCLFlBQVltQjtRQUV6QixLQUFLckIsS0FBSzRCLFlBQVk7WUFDcEIsT0FBTyxJQUFJekIsaUJBQWlCa0I7UUFFOUIsS0FBS3JCLEtBQUtpQyxLQUFLO1lBQ2IsT0FBTyxJQUFJNUIsVUFBVWdCO1FBRXZCLEtBQUtyQixLQUFLZ0MsSUFBSTtZQUNaLE9BQU8sSUFBSTVCLFNBQVNpQjtJQUN4QjtBQUNGO0FBRUE7Ozs7Ozs7Ozs7Ozs7O0NBY0MsR0FDRHdELGlCQUFpQixHQUFHLFNBQVNDLFVBQVdDLEtBQUs7SUFDM0MsT0FBT0EsTUFBTWxDLE1BQU0sQ0FBQyxTQUFVQyxHQUFHLEVBQUVNLEdBQUc7UUFDcEMsSUFBSSxPQUFPQSxRQUFRLFVBQVU7WUFDM0JOLElBQUkxQixJQUFJLENBQUNpRCxtQkFBbUJqQixLQUFLO1FBQ25DLE9BQU8sSUFBSUEsSUFBSS9CLElBQUksRUFBRTtZQUNuQnlCLElBQUkxQixJQUFJLENBQUNpRCxtQkFBbUJqQixJQUFJL0IsSUFBSSxFQUFFK0IsSUFBSXBDLElBQUk7UUFDaEQ7UUFFQSxPQUFPOEI7SUFDVCxHQUFHLEVBQUU7QUFDUDtBQUVBOzs7Ozs7O0NBT0MsR0FDRCtCLGtCQUFrQixHQUFHLFNBQVNHLFdBQVkzRCxJQUFJLEVBQUVpQyxPQUFPO0lBQ3JELE1BQU1uQixPQUFPWixzQkFBc0JGLE1BQU1kLE1BQU13QixrQkFBa0I7SUFFakUsTUFBTW1CLFFBQVFELFdBQVdkO0lBQ3pCLE1BQU1xQixRQUFRSCxXQUFXSCxPQUFPSTtJQUNoQyxNQUFNMkIsT0FBT3pFLFNBQVMwRSxTQUFTLENBQUMxQixNQUFNaEIsR0FBRyxFQUFFLFNBQVM7SUFFcEQsTUFBTTJDLGdCQUFnQixFQUFFO0lBQ3hCLElBQUssSUFBSWhDLElBQUksR0FBR0EsSUFBSThCLEtBQUtwRSxNQUFNLEdBQUcsR0FBR3NDLElBQUs7UUFDeENnQyxjQUFjL0QsSUFBSSxDQUFDb0MsTUFBTUQsS0FBSyxDQUFDMEIsSUFBSSxDQUFDOUIsRUFBRSxDQUFDLENBQUNXLElBQUk7SUFDOUM7SUFFQSxPQUFPZSxRQUFRQyxTQUFTLENBQUNsQyxjQUFjdUM7QUFDekM7QUFFQTs7Ozs7Ozs7O0NBU0MsR0FDRE4sZ0JBQWdCLEdBQUcsU0FBU08sU0FBVS9ELElBQUk7SUFDeEMsT0FBT3dELFFBQVFDLFNBQVMsQ0FDdEJ2RCxzQkFBc0JGLE1BQU1kLE1BQU13QixrQkFBa0I7QUFFeEQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbWFydC1hdWRpdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9xcmNvZGVAMS41LjMvbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9zZWdtZW50cy5qcz81YWZmIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IE1vZGUgPSByZXF1aXJlKCcuL21vZGUnKVxuY29uc3QgTnVtZXJpY0RhdGEgPSByZXF1aXJlKCcuL251bWVyaWMtZGF0YScpXG5jb25zdCBBbHBoYW51bWVyaWNEYXRhID0gcmVxdWlyZSgnLi9hbHBoYW51bWVyaWMtZGF0YScpXG5jb25zdCBCeXRlRGF0YSA9IHJlcXVpcmUoJy4vYnl0ZS1kYXRhJylcbmNvbnN0IEthbmppRGF0YSA9IHJlcXVpcmUoJy4va2FuamktZGF0YScpXG5jb25zdCBSZWdleCA9IHJlcXVpcmUoJy4vcmVnZXgnKVxuY29uc3QgVXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJylcbmNvbnN0IGRpamtzdHJhID0gcmVxdWlyZSgnZGlqa3N0cmFqcycpXG5cbi8qKlxuICogUmV0dXJucyBVVEY4IGJ5dGUgbGVuZ3RoXG4gKlxuICogQHBhcmFtICB7U3RyaW5nfSBzdHIgSW5wdXQgc3RyaW5nXG4gKiBAcmV0dXJuIHtOdW1iZXJ9ICAgICBOdW1iZXIgb2YgYnl0ZVxuICovXG5mdW5jdGlvbiBnZXRTdHJpbmdCeXRlTGVuZ3RoIChzdHIpIHtcbiAgcmV0dXJuIHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChzdHIpKS5sZW5ndGhcbn1cblxuLyoqXG4gKiBHZXQgYSBsaXN0IG9mIHNlZ21lbnRzIG9mIHRoZSBzcGVjaWZpZWQgbW9kZVxuICogZnJvbSBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSAge01vZGV9ICAgbW9kZSBTZWdtZW50IG1vZGVcbiAqIEBwYXJhbSAge1N0cmluZ30gc3RyICBTdHJpbmcgdG8gcHJvY2Vzc1xuICogQHJldHVybiB7QXJyYXl9ICAgICAgIEFycmF5IG9mIG9iamVjdCB3aXRoIHNlZ21lbnRzIGRhdGFcbiAqL1xuZnVuY3Rpb24gZ2V0U2VnbWVudHMgKHJlZ2V4LCBtb2RlLCBzdHIpIHtcbiAgY29uc3Qgc2VnbWVudHMgPSBbXVxuICBsZXQgcmVzdWx0XG5cbiAgd2hpbGUgKChyZXN1bHQgPSByZWdleC5leGVjKHN0cikpICE9PSBudWxsKSB7XG4gICAgc2VnbWVudHMucHVzaCh7XG4gICAgICBkYXRhOiByZXN1bHRbMF0sXG4gICAgICBpbmRleDogcmVzdWx0LmluZGV4LFxuICAgICAgbW9kZTogbW9kZSxcbiAgICAgIGxlbmd0aDogcmVzdWx0WzBdLmxlbmd0aFxuICAgIH0pXG4gIH1cblxuICByZXR1cm4gc2VnbWVudHNcbn1cblxuLyoqXG4gKiBFeHRyYWN0cyBhIHNlcmllcyBvZiBzZWdtZW50cyB3aXRoIHRoZSBhcHByb3ByaWF0ZVxuICogbW9kZXMgZnJvbSBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSAge1N0cmluZ30gZGF0YVN0ciBJbnB1dCBzdHJpbmdcbiAqIEByZXR1cm4ge0FycmF5fSAgICAgICAgICBBcnJheSBvZiBvYmplY3Qgd2l0aCBzZWdtZW50cyBkYXRhXG4gKi9cbmZ1bmN0aW9uIGdldFNlZ21lbnRzRnJvbVN0cmluZyAoZGF0YVN0cikge1xuICBjb25zdCBudW1TZWdzID0gZ2V0U2VnbWVudHMoUmVnZXguTlVNRVJJQywgTW9kZS5OVU1FUklDLCBkYXRhU3RyKVxuICBjb25zdCBhbHBoYU51bVNlZ3MgPSBnZXRTZWdtZW50cyhSZWdleC5BTFBIQU5VTUVSSUMsIE1vZGUuQUxQSEFOVU1FUklDLCBkYXRhU3RyKVxuICBsZXQgYnl0ZVNlZ3NcbiAgbGV0IGthbmppU2Vnc1xuXG4gIGlmIChVdGlscy5pc0thbmppTW9kZUVuYWJsZWQoKSkge1xuICAgIGJ5dGVTZWdzID0gZ2V0U2VnbWVudHMoUmVnZXguQllURSwgTW9kZS5CWVRFLCBkYXRhU3RyKVxuICAgIGthbmppU2VncyA9IGdldFNlZ21lbnRzKFJlZ2V4LktBTkpJLCBNb2RlLktBTkpJLCBkYXRhU3RyKVxuICB9IGVsc2Uge1xuICAgIGJ5dGVTZWdzID0gZ2V0U2VnbWVudHMoUmVnZXguQllURV9LQU5KSSwgTW9kZS5CWVRFLCBkYXRhU3RyKVxuICAgIGthbmppU2VncyA9IFtdXG4gIH1cblxuICBjb25zdCBzZWdzID0gbnVtU2Vncy5jb25jYXQoYWxwaGFOdW1TZWdzLCBieXRlU2Vncywga2FuamlTZWdzKVxuXG4gIHJldHVybiBzZWdzXG4gICAgLnNvcnQoZnVuY3Rpb24gKHMxLCBzMikge1xuICAgICAgcmV0dXJuIHMxLmluZGV4IC0gczIuaW5kZXhcbiAgICB9KVxuICAgIC5tYXAoZnVuY3Rpb24gKG9iaikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGF0YTogb2JqLmRhdGEsXG4gICAgICAgIG1vZGU6IG9iai5tb2RlLFxuICAgICAgICBsZW5ndGg6IG9iai5sZW5ndGhcbiAgICAgIH1cbiAgICB9KVxufVxuXG4vKipcbiAqIFJldHVybnMgaG93IG1hbnkgYml0cyBhcmUgbmVlZGVkIHRvIGVuY29kZSBhIHN0cmluZyBvZlxuICogc3BlY2lmaWVkIGxlbmd0aCB3aXRoIHRoZSBzcGVjaWZpZWQgbW9kZVxuICpcbiAqIEBwYXJhbSAge051bWJlcn0gbGVuZ3RoIFN0cmluZyBsZW5ndGhcbiAqIEBwYXJhbSAge01vZGV9IG1vZGUgICAgIFNlZ21lbnQgbW9kZVxuICogQHJldHVybiB7TnVtYmVyfSAgICAgICAgQml0IGxlbmd0aFxuICovXG5mdW5jdGlvbiBnZXRTZWdtZW50Qml0c0xlbmd0aCAobGVuZ3RoLCBtb2RlKSB7XG4gIHN3aXRjaCAobW9kZSkge1xuICAgIGNhc2UgTW9kZS5OVU1FUklDOlxuICAgICAgcmV0dXJuIE51bWVyaWNEYXRhLmdldEJpdHNMZW5ndGgobGVuZ3RoKVxuICAgIGNhc2UgTW9kZS5BTFBIQU5VTUVSSUM6XG4gICAgICByZXR1cm4gQWxwaGFudW1lcmljRGF0YS5nZXRCaXRzTGVuZ3RoKGxlbmd0aClcbiAgICBjYXNlIE1vZGUuS0FOSkk6XG4gICAgICByZXR1cm4gS2FuamlEYXRhLmdldEJpdHNMZW5ndGgobGVuZ3RoKVxuICAgIGNhc2UgTW9kZS5CWVRFOlxuICAgICAgcmV0dXJuIEJ5dGVEYXRhLmdldEJpdHNMZW5ndGgobGVuZ3RoKVxuICB9XG59XG5cbi8qKlxuICogTWVyZ2VzIGFkamFjZW50IHNlZ21lbnRzIHdoaWNoIGhhdmUgdGhlIHNhbWUgbW9kZVxuICpcbiAqIEBwYXJhbSAge0FycmF5fSBzZWdzIEFycmF5IG9mIG9iamVjdCB3aXRoIHNlZ21lbnRzIGRhdGFcbiAqIEByZXR1cm4ge0FycmF5fSAgICAgIEFycmF5IG9mIG9iamVjdCB3aXRoIHNlZ21lbnRzIGRhdGFcbiAqL1xuZnVuY3Rpb24gbWVyZ2VTZWdtZW50cyAoc2Vncykge1xuICByZXR1cm4gc2Vncy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgY3Vycikge1xuICAgIGNvbnN0IHByZXZTZWcgPSBhY2MubGVuZ3RoIC0gMSA+PSAwID8gYWNjW2FjYy5sZW5ndGggLSAxXSA6IG51bGxcbiAgICBpZiAocHJldlNlZyAmJiBwcmV2U2VnLm1vZGUgPT09IGN1cnIubW9kZSkge1xuICAgICAgYWNjW2FjYy5sZW5ndGggLSAxXS5kYXRhICs9IGN1cnIuZGF0YVxuICAgICAgcmV0dXJuIGFjY1xuICAgIH1cblxuICAgIGFjYy5wdXNoKGN1cnIpXG4gICAgcmV0dXJuIGFjY1xuICB9LCBbXSlcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZXMgYSBsaXN0IG9mIGFsbCBwb3NzaWJsZSBub2RlcyBjb21iaW5hdGlvbiB3aGljaFxuICogd2lsbCBiZSB1c2VkIHRvIGJ1aWxkIGEgc2VnbWVudHMgZ3JhcGguXG4gKlxuICogTm9kZXMgYXJlIGRpdmlkZWQgYnkgZ3JvdXBzLiBFYWNoIGdyb3VwIHdpbGwgY29udGFpbiBhIGxpc3Qgb2YgYWxsIHRoZSBtb2Rlc1xuICogaW4gd2hpY2ggaXMgcG9zc2libGUgdG8gZW5jb2RlIHRoZSBnaXZlbiB0ZXh0LlxuICpcbiAqIEZvciBleGFtcGxlIHRoZSB0ZXh0ICcxMjM0NScgY2FuIGJlIGVuY29kZWQgYXMgTnVtZXJpYywgQWxwaGFudW1lcmljIG9yIEJ5dGUuXG4gKiBUaGUgZ3JvdXAgZm9yICcxMjM0NScgd2lsbCBjb250YWluIHRoZW4gMyBvYmplY3RzLCBvbmUgZm9yIGVhY2hcbiAqIHBvc3NpYmxlIGVuY29kaW5nIG1vZGUuXG4gKlxuICogRWFjaCBub2RlIHJlcHJlc2VudHMgYSBwb3NzaWJsZSBzZWdtZW50LlxuICpcbiAqIEBwYXJhbSAge0FycmF5fSBzZWdzIEFycmF5IG9mIG9iamVjdCB3aXRoIHNlZ21lbnRzIGRhdGFcbiAqIEByZXR1cm4ge0FycmF5fSAgICAgIEFycmF5IG9mIG9iamVjdCB3aXRoIHNlZ21lbnRzIGRhdGFcbiAqL1xuZnVuY3Rpb24gYnVpbGROb2RlcyAoc2Vncykge1xuICBjb25zdCBub2RlcyA9IFtdXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2Vncy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHNlZyA9IHNlZ3NbaV1cblxuICAgIHN3aXRjaCAoc2VnLm1vZGUpIHtcbiAgICAgIGNhc2UgTW9kZS5OVU1FUklDOlxuICAgICAgICBub2Rlcy5wdXNoKFtzZWcsXG4gICAgICAgICAgeyBkYXRhOiBzZWcuZGF0YSwgbW9kZTogTW9kZS5BTFBIQU5VTUVSSUMsIGxlbmd0aDogc2VnLmxlbmd0aCB9LFxuICAgICAgICAgIHsgZGF0YTogc2VnLmRhdGEsIG1vZGU6IE1vZGUuQllURSwgbGVuZ3RoOiBzZWcubGVuZ3RoIH1cbiAgICAgICAgXSlcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgTW9kZS5BTFBIQU5VTUVSSUM6XG4gICAgICAgIG5vZGVzLnB1c2goW3NlZyxcbiAgICAgICAgICB7IGRhdGE6IHNlZy5kYXRhLCBtb2RlOiBNb2RlLkJZVEUsIGxlbmd0aDogc2VnLmxlbmd0aCB9XG4gICAgICAgIF0pXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIE1vZGUuS0FOSkk6XG4gICAgICAgIG5vZGVzLnB1c2goW3NlZyxcbiAgICAgICAgICB7IGRhdGE6IHNlZy5kYXRhLCBtb2RlOiBNb2RlLkJZVEUsIGxlbmd0aDogZ2V0U3RyaW5nQnl0ZUxlbmd0aChzZWcuZGF0YSkgfVxuICAgICAgICBdKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSBNb2RlLkJZVEU6XG4gICAgICAgIG5vZGVzLnB1c2goW1xuICAgICAgICAgIHsgZGF0YTogc2VnLmRhdGEsIG1vZGU6IE1vZGUuQllURSwgbGVuZ3RoOiBnZXRTdHJpbmdCeXRlTGVuZ3RoKHNlZy5kYXRhKSB9XG4gICAgICAgIF0pXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5vZGVzXG59XG5cbi8qKlxuICogQnVpbGRzIGEgZ3JhcGggZnJvbSBhIGxpc3Qgb2Ygbm9kZXMuXG4gKiBBbGwgc2VnbWVudHMgaW4gZWFjaCBub2RlIGdyb3VwIHdpbGwgYmUgY29ubmVjdGVkIHdpdGggYWxsIHRoZSBzZWdtZW50cyBvZlxuICogdGhlIG5leHQgZ3JvdXAgYW5kIHNvIG9uLlxuICpcbiAqIEF0IGVhY2ggY29ubmVjdGlvbiB3aWxsIGJlIGFzc2lnbmVkIGEgd2VpZ2h0IGRlcGVuZGluZyBvbiB0aGVcbiAqIHNlZ21lbnQncyBieXRlIGxlbmd0aC5cbiAqXG4gKiBAcGFyYW0gIHtBcnJheX0gbm9kZXMgICAgQXJyYXkgb2Ygb2JqZWN0IHdpdGggc2VnbWVudHMgZGF0YVxuICogQHBhcmFtICB7TnVtYmVyfSB2ZXJzaW9uIFFSIENvZGUgdmVyc2lvblxuICogQHJldHVybiB7T2JqZWN0fSAgICAgICAgIEdyYXBoIG9mIGFsbCBwb3NzaWJsZSBzZWdtZW50c1xuICovXG5mdW5jdGlvbiBidWlsZEdyYXBoIChub2RlcywgdmVyc2lvbikge1xuICBjb25zdCB0YWJsZSA9IHt9XG4gIGNvbnN0IGdyYXBoID0geyBzdGFydDoge30gfVxuICBsZXQgcHJldk5vZGVJZHMgPSBbJ3N0YXJ0J11cblxuICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3Qgbm9kZUdyb3VwID0gbm9kZXNbaV1cbiAgICBjb25zdCBjdXJyZW50Tm9kZUlkcyA9IFtdXG5cbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IG5vZGVHcm91cC5sZW5ndGg7IGorKykge1xuICAgICAgY29uc3Qgbm9kZSA9IG5vZGVHcm91cFtqXVxuICAgICAgY29uc3Qga2V5ID0gJycgKyBpICsgalxuXG4gICAgICBjdXJyZW50Tm9kZUlkcy5wdXNoKGtleSlcbiAgICAgIHRhYmxlW2tleV0gPSB7IG5vZGU6IG5vZGUsIGxhc3RDb3VudDogMCB9XG4gICAgICBncmFwaFtrZXldID0ge31cblxuICAgICAgZm9yIChsZXQgbiA9IDA7IG4gPCBwcmV2Tm9kZUlkcy5sZW5ndGg7IG4rKykge1xuICAgICAgICBjb25zdCBwcmV2Tm9kZUlkID0gcHJldk5vZGVJZHNbbl1cblxuICAgICAgICBpZiAodGFibGVbcHJldk5vZGVJZF0gJiYgdGFibGVbcHJldk5vZGVJZF0ubm9kZS5tb2RlID09PSBub2RlLm1vZGUpIHtcbiAgICAgICAgICBncmFwaFtwcmV2Tm9kZUlkXVtrZXldID1cbiAgICAgICAgICAgIGdldFNlZ21lbnRCaXRzTGVuZ3RoKHRhYmxlW3ByZXZOb2RlSWRdLmxhc3RDb3VudCArIG5vZGUubGVuZ3RoLCBub2RlLm1vZGUpIC1cbiAgICAgICAgICAgIGdldFNlZ21lbnRCaXRzTGVuZ3RoKHRhYmxlW3ByZXZOb2RlSWRdLmxhc3RDb3VudCwgbm9kZS5tb2RlKVxuXG4gICAgICAgICAgdGFibGVbcHJldk5vZGVJZF0ubGFzdENvdW50ICs9IG5vZGUubGVuZ3RoXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHRhYmxlW3ByZXZOb2RlSWRdKSB0YWJsZVtwcmV2Tm9kZUlkXS5sYXN0Q291bnQgPSBub2RlLmxlbmd0aFxuXG4gICAgICAgICAgZ3JhcGhbcHJldk5vZGVJZF1ba2V5XSA9IGdldFNlZ21lbnRCaXRzTGVuZ3RoKG5vZGUubGVuZ3RoLCBub2RlLm1vZGUpICtcbiAgICAgICAgICAgIDQgKyBNb2RlLmdldENoYXJDb3VudEluZGljYXRvcihub2RlLm1vZGUsIHZlcnNpb24pIC8vIHN3aXRjaCBjb3N0XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBwcmV2Tm9kZUlkcyA9IGN1cnJlbnROb2RlSWRzXG4gIH1cblxuICBmb3IgKGxldCBuID0gMDsgbiA8IHByZXZOb2RlSWRzLmxlbmd0aDsgbisrKSB7XG4gICAgZ3JhcGhbcHJldk5vZGVJZHNbbl1dLmVuZCA9IDBcbiAgfVxuXG4gIHJldHVybiB7IG1hcDogZ3JhcGgsIHRhYmxlOiB0YWJsZSB9XG59XG5cbi8qKlxuICogQnVpbGRzIGEgc2VnbWVudCBmcm9tIGEgc3BlY2lmaWVkIGRhdGEgYW5kIG1vZGUuXG4gKiBJZiBhIG1vZGUgaXMgbm90IHNwZWNpZmllZCwgdGhlIG1vcmUgc3VpdGFibGUgd2lsbCBiZSB1c2VkLlxuICpcbiAqIEBwYXJhbSAge1N0cmluZ30gZGF0YSAgICAgICAgICAgICBJbnB1dCBkYXRhXG4gKiBAcGFyYW0gIHtNb2RlIHwgU3RyaW5nfSBtb2Rlc0hpbnQgRGF0YSBtb2RlXG4gKiBAcmV0dXJuIHtTZWdtZW50fSAgICAgICAgICAgICAgICAgU2VnbWVudFxuICovXG5mdW5jdGlvbiBidWlsZFNpbmdsZVNlZ21lbnQgKGRhdGEsIG1vZGVzSGludCkge1xuICBsZXQgbW9kZVxuICBjb25zdCBiZXN0TW9kZSA9IE1vZGUuZ2V0QmVzdE1vZGVGb3JEYXRhKGRhdGEpXG5cbiAgbW9kZSA9IE1vZGUuZnJvbShtb2Rlc0hpbnQsIGJlc3RNb2RlKVxuXG4gIC8vIE1ha2Ugc3VyZSBkYXRhIGNhbiBiZSBlbmNvZGVkXG4gIGlmIChtb2RlICE9PSBNb2RlLkJZVEUgJiYgbW9kZS5iaXQgPCBiZXN0TW9kZS5iaXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1wiJyArIGRhdGEgKyAnXCInICtcbiAgICAgICcgY2Fubm90IGJlIGVuY29kZWQgd2l0aCBtb2RlICcgKyBNb2RlLnRvU3RyaW5nKG1vZGUpICtcbiAgICAgICcuXFxuIFN1Z2dlc3RlZCBtb2RlIGlzOiAnICsgTW9kZS50b1N0cmluZyhiZXN0TW9kZSkpXG4gIH1cblxuICAvLyBVc2UgTW9kZS5CWVRFIGlmIEthbmppIHN1cHBvcnQgaXMgZGlzYWJsZWRcbiAgaWYgKG1vZGUgPT09IE1vZGUuS0FOSkkgJiYgIVV0aWxzLmlzS2FuamlNb2RlRW5hYmxlZCgpKSB7XG4gICAgbW9kZSA9IE1vZGUuQllURVxuICB9XG5cbiAgc3dpdGNoIChtb2RlKSB7XG4gICAgY2FzZSBNb2RlLk5VTUVSSUM6XG4gICAgICByZXR1cm4gbmV3IE51bWVyaWNEYXRhKGRhdGEpXG5cbiAgICBjYXNlIE1vZGUuQUxQSEFOVU1FUklDOlxuICAgICAgcmV0dXJuIG5ldyBBbHBoYW51bWVyaWNEYXRhKGRhdGEpXG5cbiAgICBjYXNlIE1vZGUuS0FOSkk6XG4gICAgICByZXR1cm4gbmV3IEthbmppRGF0YShkYXRhKVxuXG4gICAgY2FzZSBNb2RlLkJZVEU6XG4gICAgICByZXR1cm4gbmV3IEJ5dGVEYXRhKGRhdGEpXG4gIH1cbn1cblxuLyoqXG4gKiBCdWlsZHMgYSBsaXN0IG9mIHNlZ21lbnRzIGZyb20gYW4gYXJyYXkuXG4gKiBBcnJheSBjYW4gY29udGFpbiBTdHJpbmdzIG9yIE9iamVjdHMgd2l0aCBzZWdtZW50J3MgaW5mby5cbiAqXG4gKiBGb3IgZWFjaCBpdGVtIHdoaWNoIGlzIGEgc3RyaW5nLCB3aWxsIGJlIGdlbmVyYXRlZCBhIHNlZ21lbnQgd2l0aCB0aGUgZ2l2ZW5cbiAqIHN0cmluZyBhbmQgdGhlIG1vcmUgYXBwcm9wcmlhdGUgZW5jb2RpbmcgbW9kZS5cbiAqXG4gKiBGb3IgZWFjaCBpdGVtIHdoaWNoIGlzIGFuIG9iamVjdCwgd2lsbCBiZSBnZW5lcmF0ZWQgYSBzZWdtZW50IHdpdGggdGhlIGdpdmVuXG4gKiBkYXRhIGFuZCBtb2RlLlxuICogT2JqZWN0cyBtdXN0IGNvbnRhaW4gYXQgbGVhc3QgdGhlIHByb3BlcnR5IFwiZGF0YVwiLlxuICogSWYgcHJvcGVydHkgXCJtb2RlXCIgaXMgbm90IHByZXNlbnQsIHRoZSBtb3JlIHN1aXRhYmxlIG1vZGUgd2lsbCBiZSB1c2VkLlxuICpcbiAqIEBwYXJhbSAge0FycmF5fSBhcnJheSBBcnJheSBvZiBvYmplY3RzIHdpdGggc2VnbWVudHMgZGF0YVxuICogQHJldHVybiB7QXJyYXl9ICAgICAgIEFycmF5IG9mIFNlZ21lbnRzXG4gKi9cbmV4cG9ydHMuZnJvbUFycmF5ID0gZnVuY3Rpb24gZnJvbUFycmF5IChhcnJheSkge1xuICByZXR1cm4gYXJyYXkucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHNlZykge1xuICAgIGlmICh0eXBlb2Ygc2VnID09PSAnc3RyaW5nJykge1xuICAgICAgYWNjLnB1c2goYnVpbGRTaW5nbGVTZWdtZW50KHNlZywgbnVsbCkpXG4gICAgfSBlbHNlIGlmIChzZWcuZGF0YSkge1xuICAgICAgYWNjLnB1c2goYnVpbGRTaW5nbGVTZWdtZW50KHNlZy5kYXRhLCBzZWcubW9kZSkpXG4gICAgfVxuXG4gICAgcmV0dXJuIGFjY1xuICB9LCBbXSlcbn1cblxuLyoqXG4gKiBCdWlsZHMgYW4gb3B0aW1pemVkIHNlcXVlbmNlIG9mIHNlZ21lbnRzIGZyb20gYSBzdHJpbmcsXG4gKiB3aGljaCB3aWxsIHByb2R1Y2UgdGhlIHNob3J0ZXN0IHBvc3NpYmxlIGJpdHN0cmVhbS5cbiAqXG4gKiBAcGFyYW0gIHtTdHJpbmd9IGRhdGEgICAgSW5wdXQgc3RyaW5nXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHZlcnNpb24gUVIgQ29kZSB2ZXJzaW9uXG4gKiBAcmV0dXJuIHtBcnJheX0gICAgICAgICAgQXJyYXkgb2Ygc2VnbWVudHNcbiAqL1xuZXhwb3J0cy5mcm9tU3RyaW5nID0gZnVuY3Rpb24gZnJvbVN0cmluZyAoZGF0YSwgdmVyc2lvbikge1xuICBjb25zdCBzZWdzID0gZ2V0U2VnbWVudHNGcm9tU3RyaW5nKGRhdGEsIFV0aWxzLmlzS2FuamlNb2RlRW5hYmxlZCgpKVxuXG4gIGNvbnN0IG5vZGVzID0gYnVpbGROb2RlcyhzZWdzKVxuICBjb25zdCBncmFwaCA9IGJ1aWxkR3JhcGgobm9kZXMsIHZlcnNpb24pXG4gIGNvbnN0IHBhdGggPSBkaWprc3RyYS5maW5kX3BhdGgoZ3JhcGgubWFwLCAnc3RhcnQnLCAnZW5kJylcblxuICBjb25zdCBvcHRpbWl6ZWRTZWdzID0gW11cbiAgZm9yIChsZXQgaSA9IDE7IGkgPCBwYXRoLmxlbmd0aCAtIDE7IGkrKykge1xuICAgIG9wdGltaXplZFNlZ3MucHVzaChncmFwaC50YWJsZVtwYXRoW2ldXS5ub2RlKVxuICB9XG5cbiAgcmV0dXJuIGV4cG9ydHMuZnJvbUFycmF5KG1lcmdlU2VnbWVudHMob3B0aW1pemVkU2VncykpXG59XG5cbi8qKlxuICogU3BsaXRzIGEgc3RyaW5nIGluIHZhcmlvdXMgc2VnbWVudHMgd2l0aCB0aGUgbW9kZXMgd2hpY2hcbiAqIGJlc3QgcmVwcmVzZW50IHRoZWlyIGNvbnRlbnQuXG4gKiBUaGUgcHJvZHVjZWQgc2VnbWVudHMgYXJlIGZhciBmcm9tIGJlaW5nIG9wdGltaXplZC5cbiAqIFRoZSBvdXRwdXQgb2YgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IHVzZWQgdG8gZXN0aW1hdGUgYSBRUiBDb2RlIHZlcnNpb25cbiAqIHdoaWNoIG1heSBjb250YWluIHRoZSBkYXRhLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gZGF0YSBJbnB1dCBzdHJpbmdcbiAqIEByZXR1cm4ge0FycmF5fSAgICAgICBBcnJheSBvZiBzZWdtZW50c1xuICovXG5leHBvcnRzLnJhd1NwbGl0ID0gZnVuY3Rpb24gcmF3U3BsaXQgKGRhdGEpIHtcbiAgcmV0dXJuIGV4cG9ydHMuZnJvbUFycmF5KFxuICAgIGdldFNlZ21lbnRzRnJvbVN0cmluZyhkYXRhLCBVdGlscy5pc0thbmppTW9kZUVuYWJsZWQoKSlcbiAgKVxufVxuIl0sIm5hbWVzIjpbIk1vZGUiLCJyZXF1aXJlIiwiTnVtZXJpY0RhdGEiLCJBbHBoYW51bWVyaWNEYXRhIiwiQnl0ZURhdGEiLCJLYW5qaURhdGEiLCJSZWdleCIsIlV0aWxzIiwiZGlqa3N0cmEiLCJnZXRTdHJpbmdCeXRlTGVuZ3RoIiwic3RyIiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJsZW5ndGgiLCJnZXRTZWdtZW50cyIsInJlZ2V4IiwibW9kZSIsInNlZ21lbnRzIiwicmVzdWx0IiwiZXhlYyIsInB1c2giLCJkYXRhIiwiaW5kZXgiLCJnZXRTZWdtZW50c0Zyb21TdHJpbmciLCJkYXRhU3RyIiwibnVtU2VncyIsIk5VTUVSSUMiLCJhbHBoYU51bVNlZ3MiLCJBTFBIQU5VTUVSSUMiLCJieXRlU2VncyIsImthbmppU2VncyIsImlzS2FuamlNb2RlRW5hYmxlZCIsIkJZVEUiLCJLQU5KSSIsIkJZVEVfS0FOSkkiLCJzZWdzIiwiY29uY2F0Iiwic29ydCIsInMxIiwiczIiLCJtYXAiLCJvYmoiLCJnZXRTZWdtZW50Qml0c0xlbmd0aCIsImdldEJpdHNMZW5ndGgiLCJtZXJnZVNlZ21lbnRzIiwicmVkdWNlIiwiYWNjIiwiY3VyciIsInByZXZTZWciLCJidWlsZE5vZGVzIiwibm9kZXMiLCJpIiwic2VnIiwiYnVpbGRHcmFwaCIsInZlcnNpb24iLCJ0YWJsZSIsImdyYXBoIiwic3RhcnQiLCJwcmV2Tm9kZUlkcyIsIm5vZGVHcm91cCIsImN1cnJlbnROb2RlSWRzIiwiaiIsIm5vZGUiLCJrZXkiLCJsYXN0Q291bnQiLCJuIiwicHJldk5vZGVJZCIsImdldENoYXJDb3VudEluZGljYXRvciIsImVuZCIsImJ1aWxkU2luZ2xlU2VnbWVudCIsIm1vZGVzSGludCIsImJlc3RNb2RlIiwiZ2V0QmVzdE1vZGVGb3JEYXRhIiwiZnJvbSIsImJpdCIsIkVycm9yIiwidG9TdHJpbmciLCJleHBvcnRzIiwiZnJvbUFycmF5IiwiYXJyYXkiLCJmcm9tU3RyaW5nIiwicGF0aCIsImZpbmRfcGF0aCIsIm9wdGltaXplZFNlZ3MiLCJyYXdTcGxpdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/segments.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/utils.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/utils.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("let toSJISFunction;\nconst CODEWORDS_COUNT = [\n    0,\n    26,\n    44,\n    70,\n    100,\n    134,\n    172,\n    196,\n    242,\n    292,\n    346,\n    404,\n    466,\n    532,\n    581,\n    655,\n    733,\n    815,\n    901,\n    991,\n    1085,\n    1156,\n    1258,\n    1364,\n    1474,\n    1588,\n    1706,\n    1828,\n    1921,\n    2051,\n    2185,\n    2323,\n    2465,\n    2611,\n    2761,\n    2876,\n    3034,\n    3196,\n    3362,\n    3532,\n    3706\n];\n/**\n * Returns the QR Code size for the specified version\n *\n * @param  {Number} version QR Code version\n * @return {Number}         size of QR code\n */ exports.getSymbolSize = function getSymbolSize(version) {\n    if (!version) throw new Error('\"version\" cannot be null or undefined');\n    if (version < 1 || version > 40) throw new Error('\"version\" should be in range from 1 to 40');\n    return version * 4 + 17;\n};\n/**\n * Returns the total number of codewords used to store data and EC information.\n *\n * @param  {Number} version QR Code version\n * @return {Number}         Data length in bits\n */ exports.getSymbolTotalCodewords = function getSymbolTotalCodewords(version) {\n    return CODEWORDS_COUNT[version];\n};\n/**\n * Encode data with Bose-Chaudhuri-Hocquenghem\n *\n * @param  {Number} data Value to encode\n * @return {Number}      Encoded value\n */ exports.getBCHDigit = function(data) {\n    let digit = 0;\n    while(data !== 0){\n        digit++;\n        data >>>= 1;\n    }\n    return digit;\n};\nexports.setToSJISFunction = function setToSJISFunction(f) {\n    if (typeof f !== \"function\") {\n        throw new Error('\"toSJISFunc\" is not a valid function.');\n    }\n    toSJISFunction = f;\n};\nexports.isKanjiModeEnabled = function() {\n    return typeof toSJISFunction !== \"undefined\";\n};\nexports.toSJIS = function toSJIS(kanji) {\n    return toSJISFunction(kanji);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS4zL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvdXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUE7QUFDSixNQUFNQyxrQkFBa0I7SUFDdEI7SUFDQTtJQUFJO0lBQUk7SUFBSTtJQUFLO0lBQUs7SUFBSztJQUFLO0lBQUs7SUFBSztJQUMxQztJQUFLO0lBQUs7SUFBSztJQUFLO0lBQUs7SUFBSztJQUFLO0lBQUs7SUFBSztJQUM3QztJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUN0RDtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtDQUN2RDtBQUVEOzs7OztDQUtDLEdBQ0RDLHFCQUFxQixHQUFHLFNBQVNDLGNBQWVDLE9BQU87SUFDckQsSUFBSSxDQUFDQSxTQUFTLE1BQU0sSUFBSUMsTUFBTTtJQUM5QixJQUFJRCxVQUFVLEtBQUtBLFVBQVUsSUFBSSxNQUFNLElBQUlDLE1BQU07SUFDakQsT0FBT0QsVUFBVSxJQUFJO0FBQ3ZCO0FBRUE7Ozs7O0NBS0MsR0FDREYsK0JBQStCLEdBQUcsU0FBU0ksd0JBQXlCRixPQUFPO0lBQ3pFLE9BQU9ILGVBQWUsQ0FBQ0csUUFBUTtBQUNqQztBQUVBOzs7OztDQUtDLEdBQ0RGLG1CQUFtQixHQUFHLFNBQVVNLElBQUk7SUFDbEMsSUFBSUMsUUFBUTtJQUVaLE1BQU9ELFNBQVMsRUFBRztRQUNqQkM7UUFDQUQsVUFBVTtJQUNaO0lBRUEsT0FBT0M7QUFDVDtBQUVBUCx5QkFBeUIsR0FBRyxTQUFTUSxrQkFBbUJDLENBQUM7SUFDdkQsSUFBSSxPQUFPQSxNQUFNLFlBQVk7UUFDM0IsTUFBTSxJQUFJTixNQUFNO0lBQ2xCO0lBRUFMLGlCQUFpQlc7QUFDbkI7QUFFQVQsMEJBQTBCLEdBQUc7SUFDM0IsT0FBTyxPQUFPRixtQkFBbUI7QUFDbkM7QUFFQUUsY0FBYyxHQUFHLFNBQVNXLE9BQVFDLEtBQUs7SUFDckMsT0FBT2QsZUFBZWM7QUFDeEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbWFydC1hdWRpdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9xcmNvZGVAMS41LjMvbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS91dGlscy5qcz9jOTRmIl0sInNvdXJjZXNDb250ZW50IjpbImxldCB0b1NKSVNGdW5jdGlvblxuY29uc3QgQ09ERVdPUkRTX0NPVU5UID0gW1xuICAwLCAvLyBOb3QgdXNlZFxuICAyNiwgNDQsIDcwLCAxMDAsIDEzNCwgMTcyLCAxOTYsIDI0MiwgMjkyLCAzNDYsXG4gIDQwNCwgNDY2LCA1MzIsIDU4MSwgNjU1LCA3MzMsIDgxNSwgOTAxLCA5OTEsIDEwODUsXG4gIDExNTYsIDEyNTgsIDEzNjQsIDE0NzQsIDE1ODgsIDE3MDYsIDE4MjgsIDE5MjEsIDIwNTEsIDIxODUsXG4gIDIzMjMsIDI0NjUsIDI2MTEsIDI3NjEsIDI4NzYsIDMwMzQsIDMxOTYsIDMzNjIsIDM1MzIsIDM3MDZcbl1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBRUiBDb2RlIHNpemUgZm9yIHRoZSBzcGVjaWZpZWQgdmVyc2lvblxuICpcbiAqIEBwYXJhbSAge051bWJlcn0gdmVyc2lvbiBRUiBDb2RlIHZlcnNpb25cbiAqIEByZXR1cm4ge051bWJlcn0gICAgICAgICBzaXplIG9mIFFSIGNvZGVcbiAqL1xuZXhwb3J0cy5nZXRTeW1ib2xTaXplID0gZnVuY3Rpb24gZ2V0U3ltYm9sU2l6ZSAodmVyc2lvbikge1xuICBpZiAoIXZlcnNpb24pIHRocm93IG5ldyBFcnJvcignXCJ2ZXJzaW9uXCIgY2Fubm90IGJlIG51bGwgb3IgdW5kZWZpbmVkJylcbiAgaWYgKHZlcnNpb24gPCAxIHx8IHZlcnNpb24gPiA0MCkgdGhyb3cgbmV3IEVycm9yKCdcInZlcnNpb25cIiBzaG91bGQgYmUgaW4gcmFuZ2UgZnJvbSAxIHRvIDQwJylcbiAgcmV0dXJuIHZlcnNpb24gKiA0ICsgMTdcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSB0b3RhbCBudW1iZXIgb2YgY29kZXdvcmRzIHVzZWQgdG8gc3RvcmUgZGF0YSBhbmQgRUMgaW5mb3JtYXRpb24uXG4gKlxuICogQHBhcmFtICB7TnVtYmVyfSB2ZXJzaW9uIFFSIENvZGUgdmVyc2lvblxuICogQHJldHVybiB7TnVtYmVyfSAgICAgICAgIERhdGEgbGVuZ3RoIGluIGJpdHNcbiAqL1xuZXhwb3J0cy5nZXRTeW1ib2xUb3RhbENvZGV3b3JkcyA9IGZ1bmN0aW9uIGdldFN5bWJvbFRvdGFsQ29kZXdvcmRzICh2ZXJzaW9uKSB7XG4gIHJldHVybiBDT0RFV09SRFNfQ09VTlRbdmVyc2lvbl1cbn1cblxuLyoqXG4gKiBFbmNvZGUgZGF0YSB3aXRoIEJvc2UtQ2hhdWRodXJpLUhvY3F1ZW5naGVtXG4gKlxuICogQHBhcmFtICB7TnVtYmVyfSBkYXRhIFZhbHVlIHRvIGVuY29kZVxuICogQHJldHVybiB7TnVtYmVyfSAgICAgIEVuY29kZWQgdmFsdWVcbiAqL1xuZXhwb3J0cy5nZXRCQ0hEaWdpdCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIGxldCBkaWdpdCA9IDBcblxuICB3aGlsZSAoZGF0YSAhPT0gMCkge1xuICAgIGRpZ2l0KytcbiAgICBkYXRhID4+Pj0gMVxuICB9XG5cbiAgcmV0dXJuIGRpZ2l0XG59XG5cbmV4cG9ydHMuc2V0VG9TSklTRnVuY3Rpb24gPSBmdW5jdGlvbiBzZXRUb1NKSVNGdW5jdGlvbiAoZikge1xuICBpZiAodHlwZW9mIGYgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1widG9TSklTRnVuY1wiIGlzIG5vdCBhIHZhbGlkIGZ1bmN0aW9uLicpXG4gIH1cblxuICB0b1NKSVNGdW5jdGlvbiA9IGZcbn1cblxuZXhwb3J0cy5pc0thbmppTW9kZUVuYWJsZWQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0eXBlb2YgdG9TSklTRnVuY3Rpb24gIT09ICd1bmRlZmluZWQnXG59XG5cbmV4cG9ydHMudG9TSklTID0gZnVuY3Rpb24gdG9TSklTIChrYW5qaSkge1xuICByZXR1cm4gdG9TSklTRnVuY3Rpb24oa2FuamkpXG59XG4iXSwibmFtZXMiOlsidG9TSklTRnVuY3Rpb24iLCJDT0RFV09SRFNfQ09VTlQiLCJleHBvcnRzIiwiZ2V0U3ltYm9sU2l6ZSIsInZlcnNpb24iLCJFcnJvciIsImdldFN5bWJvbFRvdGFsQ29kZXdvcmRzIiwiZ2V0QkNIRGlnaXQiLCJkYXRhIiwiZGlnaXQiLCJzZXRUb1NKSVNGdW5jdGlvbiIsImYiLCJpc0thbmppTW9kZUVuYWJsZWQiLCJ0b1NKSVMiLCJrYW5qaSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/version-check.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/version-check.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/**\n * Check if QR Code version is valid\n *\n * @param  {Number}  version QR Code version\n * @return {Boolean}         true if valid version, false otherwise\n */ exports.isValid = function isValid(version) {\n    return !isNaN(version) && version >= 1 && version <= 40;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS4zL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvdmVyc2lvbi1jaGVjay5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Q0FLQyxHQUNEQSxlQUFlLEdBQUcsU0FBU0MsUUFBU0MsT0FBTztJQUN6QyxPQUFPLENBQUNDLE1BQU1ELFlBQVlBLFdBQVcsS0FBS0EsV0FBVztBQUN2RCIsInNvdXJjZXMiOlsid2VicGFjazovL3NtYXJ0LWF1ZGl0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL3FyY29kZUAxLjUuMy9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9jb3JlL3ZlcnNpb24tY2hlY2suanM/YTA2NyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENoZWNrIGlmIFFSIENvZGUgdmVyc2lvbiBpcyB2YWxpZFxuICpcbiAqIEBwYXJhbSAge051bWJlcn0gIHZlcnNpb24gUVIgQ29kZSB2ZXJzaW9uXG4gKiBAcmV0dXJuIHtCb29sZWFufSAgICAgICAgIHRydWUgaWYgdmFsaWQgdmVyc2lvbiwgZmFsc2Ugb3RoZXJ3aXNlXG4gKi9cbmV4cG9ydHMuaXNWYWxpZCA9IGZ1bmN0aW9uIGlzVmFsaWQgKHZlcnNpb24pIHtcbiAgcmV0dXJuICFpc05hTih2ZXJzaW9uKSAmJiB2ZXJzaW9uID49IDEgJiYgdmVyc2lvbiA8PSA0MFxufVxuIl0sIm5hbWVzIjpbImV4cG9ydHMiLCJpc1ZhbGlkIiwidmVyc2lvbiIsImlzTmFOIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/version-check.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/version.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/version.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const Utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/utils.js\");\nconst ECCode = __webpack_require__(/*! ./error-correction-code */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/error-correction-code.js\");\nconst ECLevel = __webpack_require__(/*! ./error-correction-level */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/error-correction-level.js\");\nconst Mode = __webpack_require__(/*! ./mode */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/mode.js\");\nconst VersionCheck = __webpack_require__(/*! ./version-check */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/version-check.js\");\n// Generator polynomial used to encode version information\nconst G18 = 1 << 12 | 1 << 11 | 1 << 10 | 1 << 9 | 1 << 8 | 1 << 5 | 1 << 2 | 1 << 0;\nconst G18_BCH = Utils.getBCHDigit(G18);\nfunction getBestVersionForDataLength(mode, length, errorCorrectionLevel) {\n    for(let currentVersion = 1; currentVersion <= 40; currentVersion++){\n        if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel, mode)) {\n            return currentVersion;\n        }\n    }\n    return undefined;\n}\nfunction getReservedBitsCount(mode, version) {\n    // Character count indicator + mode indicator bits\n    return Mode.getCharCountIndicator(mode, version) + 4;\n}\nfunction getTotalBitsFromDataArray(segments, version) {\n    let totalBits = 0;\n    segments.forEach(function(data) {\n        const reservedBits = getReservedBitsCount(data.mode, version);\n        totalBits += reservedBits + data.getBitsLength();\n    });\n    return totalBits;\n}\nfunction getBestVersionForMixedData(segments, errorCorrectionLevel) {\n    for(let currentVersion = 1; currentVersion <= 40; currentVersion++){\n        const length = getTotalBitsFromDataArray(segments, currentVersion);\n        if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel, Mode.MIXED)) {\n            return currentVersion;\n        }\n    }\n    return undefined;\n}\n/**\n * Returns version number from a value.\n * If value is not a valid version, returns defaultValue\n *\n * @param  {Number|String} value        QR Code version\n * @param  {Number}        defaultValue Fallback value\n * @return {Number}                     QR Code version number\n */ exports.from = function from(value, defaultValue) {\n    if (VersionCheck.isValid(value)) {\n        return parseInt(value, 10);\n    }\n    return defaultValue;\n};\n/**\n * Returns how much data can be stored with the specified QR code version\n * and error correction level\n *\n * @param  {Number} version              QR Code version (1-40)\n * @param  {Number} errorCorrectionLevel Error correction level\n * @param  {Mode}   mode                 Data mode\n * @return {Number}                      Quantity of storable data\n */ exports.getCapacity = function getCapacity(version, errorCorrectionLevel, mode) {\n    if (!VersionCheck.isValid(version)) {\n        throw new Error(\"Invalid QR Code version\");\n    }\n    // Use Byte mode as default\n    if (typeof mode === \"undefined\") mode = Mode.BYTE;\n    // Total codewords for this QR code version (Data + Error correction)\n    const totalCodewords = Utils.getSymbolTotalCodewords(version);\n    // Total number of error correction codewords\n    const ecTotalCodewords = ECCode.getTotalCodewordsCount(version, errorCorrectionLevel);\n    // Total number of data codewords\n    const dataTotalCodewordsBits = (totalCodewords - ecTotalCodewords) * 8;\n    if (mode === Mode.MIXED) return dataTotalCodewordsBits;\n    const usableBits = dataTotalCodewordsBits - getReservedBitsCount(mode, version);\n    // Return max number of storable codewords\n    switch(mode){\n        case Mode.NUMERIC:\n            return Math.floor(usableBits / 10 * 3);\n        case Mode.ALPHANUMERIC:\n            return Math.floor(usableBits / 11 * 2);\n        case Mode.KANJI:\n            return Math.floor(usableBits / 13);\n        case Mode.BYTE:\n        default:\n            return Math.floor(usableBits / 8);\n    }\n};\n/**\n * Returns the minimum version needed to contain the amount of data\n *\n * @param  {Segment} data                    Segment of data\n * @param  {Number} [errorCorrectionLevel=H] Error correction level\n * @param  {Mode} mode                       Data mode\n * @return {Number}                          QR Code version\n */ exports.getBestVersionForData = function getBestVersionForData(data, errorCorrectionLevel) {\n    let seg;\n    const ecl = ECLevel.from(errorCorrectionLevel, ECLevel.M);\n    if (Array.isArray(data)) {\n        if (data.length > 1) {\n            return getBestVersionForMixedData(data, ecl);\n        }\n        if (data.length === 0) {\n            return 1;\n        }\n        seg = data[0];\n    } else {\n        seg = data;\n    }\n    return getBestVersionForDataLength(seg.mode, seg.getLength(), ecl);\n};\n/**\n * Returns version information with relative error correction bits\n *\n * The version information is included in QR Code symbols of version 7 or larger.\n * It consists of an 18-bit sequence containing 6 data bits,\n * with 12 error correction bits calculated using the (18, 6) Golay code.\n *\n * @param  {Number} version QR Code version\n * @return {Number}         Encoded version info bits\n */ exports.getEncodedBits = function getEncodedBits(version) {\n    if (!VersionCheck.isValid(version) || version < 7) {\n        throw new Error(\"Invalid QR Code version\");\n    }\n    let d = version << 12;\n    while(Utils.getBCHDigit(d) - G18_BCH >= 0){\n        d ^= G18 << Utils.getBCHDigit(d) - G18_BCH;\n    }\n    return version << 12 | d;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/version.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/index.js":
/*!**************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/index.js ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*\n*copyright Ryan Day 2012\n*\n* Licensed under the MIT license:\n*   http://www.opensource.org/licenses/mit-license.php\n*\n* this is the main server side application file for node-qrcode.\n* these exports use serverside canvas api methods for file IO and buffers\n*\n*/ \nmodule.exports = __webpack_require__(/*! ./server */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/server.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS4zL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7QUFTQTtBQUVBQSxpSUFBeUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbWFydC1hdWRpdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9xcmNvZGVAMS41LjMvbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvaW5kZXguanM/YTA5NiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuKmNvcHlyaWdodCBSeWFuIERheSAyMDEyXG4qXG4qIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZTpcbiogICBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuKlxuKiB0aGlzIGlzIHRoZSBtYWluIHNlcnZlciBzaWRlIGFwcGxpY2F0aW9uIGZpbGUgZm9yIG5vZGUtcXJjb2RlLlxuKiB0aGVzZSBleHBvcnRzIHVzZSBzZXJ2ZXJzaWRlIGNhbnZhcyBhcGkgbWV0aG9kcyBmb3IgZmlsZSBJTyBhbmQgYnVmZmVyc1xuKlxuKi9cblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL3NlcnZlcicpXG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInJlcXVpcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/renderer/canvas.js":
/*!************************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/renderer/canvas.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const Utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/renderer/utils.js\");\nfunction clearCanvas(ctx, canvas, size) {\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    if (!canvas.style) canvas.style = {};\n    canvas.height = size;\n    canvas.width = size;\n    canvas.style.height = size + \"px\";\n    canvas.style.width = size + \"px\";\n}\nfunction getCanvasElement() {\n    try {\n        return document.createElement(\"canvas\");\n    } catch (e) {\n        throw new Error(\"You need to specify a canvas element\");\n    }\n}\nexports.render = function render(qrData, canvas, options) {\n    let opts = options;\n    let canvasEl = canvas;\n    if (typeof opts === \"undefined\" && (!canvas || !canvas.getContext)) {\n        opts = canvas;\n        canvas = undefined;\n    }\n    if (!canvas) {\n        canvasEl = getCanvasElement();\n    }\n    opts = Utils.getOptions(opts);\n    const size = Utils.getImageWidth(qrData.modules.size, opts);\n    const ctx = canvasEl.getContext(\"2d\");\n    const image = ctx.createImageData(size, size);\n    Utils.qrToImageData(image.data, qrData, opts);\n    clearCanvas(ctx, canvasEl, size);\n    ctx.putImageData(image, 0, 0);\n    return canvasEl;\n};\nexports.renderToDataURL = function renderToDataURL(qrData, canvas, options) {\n    let opts = options;\n    if (typeof opts === \"undefined\" && (!canvas || !canvas.getContext)) {\n        opts = canvas;\n        canvas = undefined;\n    }\n    if (!opts) opts = {};\n    const canvasEl = exports.render(qrData, canvas, opts);\n    const type = opts.type || \"image/png\";\n    const rendererOpts = opts.rendererOpts || {};\n    return canvasEl.toDataURL(type, rendererOpts.quality);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS4zL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL3JlbmRlcmVyL2NhbnZhcy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxRQUFRQyxtQkFBT0EsQ0FBQztBQUV0QixTQUFTQyxZQUFhQyxHQUFHLEVBQUVDLE1BQU0sRUFBRUMsSUFBSTtJQUNyQ0YsSUFBSUcsU0FBUyxDQUFDLEdBQUcsR0FBR0YsT0FBT0csS0FBSyxFQUFFSCxPQUFPSSxNQUFNO0lBRS9DLElBQUksQ0FBQ0osT0FBT0ssS0FBSyxFQUFFTCxPQUFPSyxLQUFLLEdBQUcsQ0FBQztJQUNuQ0wsT0FBT0ksTUFBTSxHQUFHSDtJQUNoQkQsT0FBT0csS0FBSyxHQUFHRjtJQUNmRCxPQUFPSyxLQUFLLENBQUNELE1BQU0sR0FBR0gsT0FBTztJQUM3QkQsT0FBT0ssS0FBSyxDQUFDRixLQUFLLEdBQUdGLE9BQU87QUFDOUI7QUFFQSxTQUFTSztJQUNQLElBQUk7UUFDRixPQUFPQyxTQUFTQyxhQUFhLENBQUM7SUFDaEMsRUFBRSxPQUFPQyxHQUFHO1FBQ1YsTUFBTSxJQUFJQyxNQUFNO0lBQ2xCO0FBQ0Y7QUFFQUMsY0FBYyxHQUFHLFNBQVNDLE9BQVFDLE1BQU0sRUFBRWIsTUFBTSxFQUFFYyxPQUFPO0lBQ3ZELElBQUlDLE9BQU9EO0lBQ1gsSUFBSUUsV0FBV2hCO0lBRWYsSUFBSSxPQUFPZSxTQUFTLGVBQWdCLEVBQUNmLFVBQVUsQ0FBQ0EsT0FBT2lCLFVBQVUsR0FBRztRQUNsRUYsT0FBT2Y7UUFDUEEsU0FBU2tCO0lBQ1g7SUFFQSxJQUFJLENBQUNsQixRQUFRO1FBQ1hnQixXQUFXVjtJQUNiO0lBRUFTLE9BQU9uQixNQUFNdUIsVUFBVSxDQUFDSjtJQUN4QixNQUFNZCxPQUFPTCxNQUFNd0IsYUFBYSxDQUFDUCxPQUFPUSxPQUFPLENBQUNwQixJQUFJLEVBQUVjO0lBRXRELE1BQU1oQixNQUFNaUIsU0FBU0MsVUFBVSxDQUFDO0lBQ2hDLE1BQU1LLFFBQVF2QixJQUFJd0IsZUFBZSxDQUFDdEIsTUFBTUE7SUFDeENMLE1BQU00QixhQUFhLENBQUNGLE1BQU1HLElBQUksRUFBRVosUUFBUUU7SUFFeENqQixZQUFZQyxLQUFLaUIsVUFBVWY7SUFDM0JGLElBQUkyQixZQUFZLENBQUNKLE9BQU8sR0FBRztJQUUzQixPQUFPTjtBQUNUO0FBRUFMLHVCQUF1QixHQUFHLFNBQVNnQixnQkFBaUJkLE1BQU0sRUFBRWIsTUFBTSxFQUFFYyxPQUFPO0lBQ3pFLElBQUlDLE9BQU9EO0lBRVgsSUFBSSxPQUFPQyxTQUFTLGVBQWdCLEVBQUNmLFVBQVUsQ0FBQ0EsT0FBT2lCLFVBQVUsR0FBRztRQUNsRUYsT0FBT2Y7UUFDUEEsU0FBU2tCO0lBQ1g7SUFFQSxJQUFJLENBQUNILE1BQU1BLE9BQU8sQ0FBQztJQUVuQixNQUFNQyxXQUFXTCxRQUFRQyxNQUFNLENBQUNDLFFBQVFiLFFBQVFlO0lBRWhELE1BQU1hLE9BQU9iLEtBQUthLElBQUksSUFBSTtJQUMxQixNQUFNQyxlQUFlZCxLQUFLYyxZQUFZLElBQUksQ0FBQztJQUUzQyxPQUFPYixTQUFTYyxTQUFTLENBQUNGLE1BQU1DLGFBQWFFLE9BQU87QUFDdEQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbWFydC1hdWRpdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9xcmNvZGVAMS41LjMvbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvcmVuZGVyZXIvY2FudmFzLmpzP2M2YmYiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgVXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJylcblxuZnVuY3Rpb24gY2xlYXJDYW52YXMgKGN0eCwgY2FudmFzLCBzaXplKSB7XG4gIGN0eC5jbGVhclJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KVxuXG4gIGlmICghY2FudmFzLnN0eWxlKSBjYW52YXMuc3R5bGUgPSB7fVxuICBjYW52YXMuaGVpZ2h0ID0gc2l6ZVxuICBjYW52YXMud2lkdGggPSBzaXplXG4gIGNhbnZhcy5zdHlsZS5oZWlnaHQgPSBzaXplICsgJ3B4J1xuICBjYW52YXMuc3R5bGUud2lkdGggPSBzaXplICsgJ3B4J1xufVxuXG5mdW5jdGlvbiBnZXRDYW52YXNFbGVtZW50ICgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJylcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRocm93IG5ldyBFcnJvcignWW91IG5lZWQgdG8gc3BlY2lmeSBhIGNhbnZhcyBlbGVtZW50JylcbiAgfVxufVxuXG5leHBvcnRzLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlciAocXJEYXRhLCBjYW52YXMsIG9wdGlvbnMpIHtcbiAgbGV0IG9wdHMgPSBvcHRpb25zXG4gIGxldCBjYW52YXNFbCA9IGNhbnZhc1xuXG4gIGlmICh0eXBlb2Ygb3B0cyA9PT0gJ3VuZGVmaW5lZCcgJiYgKCFjYW52YXMgfHwgIWNhbnZhcy5nZXRDb250ZXh0KSkge1xuICAgIG9wdHMgPSBjYW52YXNcbiAgICBjYW52YXMgPSB1bmRlZmluZWRcbiAgfVxuXG4gIGlmICghY2FudmFzKSB7XG4gICAgY2FudmFzRWwgPSBnZXRDYW52YXNFbGVtZW50KClcbiAgfVxuXG4gIG9wdHMgPSBVdGlscy5nZXRPcHRpb25zKG9wdHMpXG4gIGNvbnN0IHNpemUgPSBVdGlscy5nZXRJbWFnZVdpZHRoKHFyRGF0YS5tb2R1bGVzLnNpemUsIG9wdHMpXG5cbiAgY29uc3QgY3R4ID0gY2FudmFzRWwuZ2V0Q29udGV4dCgnMmQnKVxuICBjb25zdCBpbWFnZSA9IGN0eC5jcmVhdGVJbWFnZURhdGEoc2l6ZSwgc2l6ZSlcbiAgVXRpbHMucXJUb0ltYWdlRGF0YShpbWFnZS5kYXRhLCBxckRhdGEsIG9wdHMpXG5cbiAgY2xlYXJDYW52YXMoY3R4LCBjYW52YXNFbCwgc2l6ZSlcbiAgY3R4LnB1dEltYWdlRGF0YShpbWFnZSwgMCwgMClcblxuICByZXR1cm4gY2FudmFzRWxcbn1cblxuZXhwb3J0cy5yZW5kZXJUb0RhdGFVUkwgPSBmdW5jdGlvbiByZW5kZXJUb0RhdGFVUkwgKHFyRGF0YSwgY2FudmFzLCBvcHRpb25zKSB7XG4gIGxldCBvcHRzID0gb3B0aW9uc1xuXG4gIGlmICh0eXBlb2Ygb3B0cyA9PT0gJ3VuZGVmaW5lZCcgJiYgKCFjYW52YXMgfHwgIWNhbnZhcy5nZXRDb250ZXh0KSkge1xuICAgIG9wdHMgPSBjYW52YXNcbiAgICBjYW52YXMgPSB1bmRlZmluZWRcbiAgfVxuXG4gIGlmICghb3B0cykgb3B0cyA9IHt9XG5cbiAgY29uc3QgY2FudmFzRWwgPSBleHBvcnRzLnJlbmRlcihxckRhdGEsIGNhbnZhcywgb3B0cylcblxuICBjb25zdCB0eXBlID0gb3B0cy50eXBlIHx8ICdpbWFnZS9wbmcnXG4gIGNvbnN0IHJlbmRlcmVyT3B0cyA9IG9wdHMucmVuZGVyZXJPcHRzIHx8IHt9XG5cbiAgcmV0dXJuIGNhbnZhc0VsLnRvRGF0YVVSTCh0eXBlLCByZW5kZXJlck9wdHMucXVhbGl0eSlcbn1cbiJdLCJuYW1lcyI6WyJVdGlscyIsInJlcXVpcmUiLCJjbGVhckNhbnZhcyIsImN0eCIsImNhbnZhcyIsInNpemUiLCJjbGVhclJlY3QiLCJ3aWR0aCIsImhlaWdodCIsInN0eWxlIiwiZ2V0Q2FudmFzRWxlbWVudCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImUiLCJFcnJvciIsImV4cG9ydHMiLCJyZW5kZXIiLCJxckRhdGEiLCJvcHRpb25zIiwib3B0cyIsImNhbnZhc0VsIiwiZ2V0Q29udGV4dCIsInVuZGVmaW5lZCIsImdldE9wdGlvbnMiLCJnZXRJbWFnZVdpZHRoIiwibW9kdWxlcyIsImltYWdlIiwiY3JlYXRlSW1hZ2VEYXRhIiwicXJUb0ltYWdlRGF0YSIsImRhdGEiLCJwdXRJbWFnZURhdGEiLCJyZW5kZXJUb0RhdGFVUkwiLCJ0eXBlIiwicmVuZGVyZXJPcHRzIiwidG9EYXRhVVJMIiwicXVhbGl0eSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/renderer/canvas.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/renderer/png.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/renderer/png.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const fs = __webpack_require__(/*! fs */ \"fs\");\nconst PNG = (__webpack_require__(/*! pngjs */ \"(ssr)/./node_modules/.pnpm/pngjs@5.0.0/node_modules/pngjs/lib/png.js\").PNG);\nconst Utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/renderer/utils.js\");\nexports.render = function render(qrData, options) {\n    const opts = Utils.getOptions(options);\n    const pngOpts = opts.rendererOpts;\n    const size = Utils.getImageWidth(qrData.modules.size, opts);\n    pngOpts.width = size;\n    pngOpts.height = size;\n    const pngImage = new PNG(pngOpts);\n    Utils.qrToImageData(pngImage.data, qrData, opts);\n    return pngImage;\n};\nexports.renderToDataURL = function renderToDataURL(qrData, options, cb) {\n    if (typeof cb === \"undefined\") {\n        cb = options;\n        options = undefined;\n    }\n    exports.renderToBuffer(qrData, options, function(err, output) {\n        if (err) cb(err);\n        let url = \"data:image/png;base64,\";\n        url += output.toString(\"base64\");\n        cb(null, url);\n    });\n};\nexports.renderToBuffer = function renderToBuffer(qrData, options, cb) {\n    if (typeof cb === \"undefined\") {\n        cb = options;\n        options = undefined;\n    }\n    const png = exports.render(qrData, options);\n    const buffer = [];\n    png.on(\"error\", cb);\n    png.on(\"data\", function(data) {\n        buffer.push(data);\n    });\n    png.on(\"end\", function() {\n        cb(null, Buffer.concat(buffer));\n    });\n    png.pack();\n};\nexports.renderToFile = function renderToFile(path, qrData, options, cb) {\n    if (typeof cb === \"undefined\") {\n        cb = options;\n        options = undefined;\n    }\n    let called = false;\n    const done = (...args)=>{\n        if (called) return;\n        called = true;\n        cb.apply(null, args);\n    };\n    const stream = fs.createWriteStream(path);\n    stream.on(\"error\", done);\n    stream.on(\"close\", done);\n    exports.renderToFileStream(stream, qrData, options);\n};\nexports.renderToFileStream = function renderToFileStream(stream, qrData, options) {\n    const png = exports.render(qrData, options);\n    png.pack().pipe(stream);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS4zL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL3JlbmRlcmVyL3BuZy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxLQUFLQyxtQkFBT0EsQ0FBQztBQUNuQixNQUFNQyxNQUFNRCw4R0FBb0I7QUFDaEMsTUFBTUUsUUFBUUYsbUJBQU9BLENBQUM7QUFFdEJHLGNBQWMsR0FBRyxTQUFTQyxPQUFRQyxNQUFNLEVBQUVDLE9BQU87SUFDL0MsTUFBTUMsT0FBT0wsTUFBTU0sVUFBVSxDQUFDRjtJQUM5QixNQUFNRyxVQUFVRixLQUFLRyxZQUFZO0lBQ2pDLE1BQU1DLE9BQU9ULE1BQU1VLGFBQWEsQ0FBQ1AsT0FBT1EsT0FBTyxDQUFDRixJQUFJLEVBQUVKO0lBRXRERSxRQUFRSyxLQUFLLEdBQUdIO0lBQ2hCRixRQUFRTSxNQUFNLEdBQUdKO0lBRWpCLE1BQU1LLFdBQVcsSUFBSWYsSUFBSVE7SUFDekJQLE1BQU1lLGFBQWEsQ0FBQ0QsU0FBU0UsSUFBSSxFQUFFYixRQUFRRTtJQUUzQyxPQUFPUztBQUNUO0FBRUFiLHVCQUF1QixHQUFHLFNBQVNnQixnQkFBaUJkLE1BQU0sRUFBRUMsT0FBTyxFQUFFYyxFQUFFO0lBQ3JFLElBQUksT0FBT0EsT0FBTyxhQUFhO1FBQzdCQSxLQUFLZDtRQUNMQSxVQUFVZTtJQUNaO0lBRUFsQixRQUFRbUIsY0FBYyxDQUFDakIsUUFBUUMsU0FBUyxTQUFVaUIsR0FBRyxFQUFFQyxNQUFNO1FBQzNELElBQUlELEtBQUtILEdBQUdHO1FBQ1osSUFBSUUsTUFBTTtRQUNWQSxPQUFPRCxPQUFPRSxRQUFRLENBQUM7UUFDdkJOLEdBQUcsTUFBTUs7SUFDWDtBQUNGO0FBRUF0QixzQkFBc0IsR0FBRyxTQUFTbUIsZUFBZ0JqQixNQUFNLEVBQUVDLE9BQU8sRUFBRWMsRUFBRTtJQUNuRSxJQUFJLE9BQU9BLE9BQU8sYUFBYTtRQUM3QkEsS0FBS2Q7UUFDTEEsVUFBVWU7SUFDWjtJQUVBLE1BQU1NLE1BQU14QixRQUFRQyxNQUFNLENBQUNDLFFBQVFDO0lBQ25DLE1BQU1zQixTQUFTLEVBQUU7SUFFakJELElBQUlFLEVBQUUsQ0FBQyxTQUFTVDtJQUVoQk8sSUFBSUUsRUFBRSxDQUFDLFFBQVEsU0FBVVgsSUFBSTtRQUMzQlUsT0FBT0UsSUFBSSxDQUFDWjtJQUNkO0lBRUFTLElBQUlFLEVBQUUsQ0FBQyxPQUFPO1FBQ1pULEdBQUcsTUFBTVcsT0FBT0MsTUFBTSxDQUFDSjtJQUN6QjtJQUVBRCxJQUFJTSxJQUFJO0FBQ1Y7QUFFQTlCLG9CQUFvQixHQUFHLFNBQVMrQixhQUFjQyxJQUFJLEVBQUU5QixNQUFNLEVBQUVDLE9BQU8sRUFBRWMsRUFBRTtJQUNyRSxJQUFJLE9BQU9BLE9BQU8sYUFBYTtRQUM3QkEsS0FBS2Q7UUFDTEEsVUFBVWU7SUFDWjtJQUVBLElBQUllLFNBQVM7SUFDYixNQUFNQyxPQUFPLENBQUMsR0FBR0M7UUFDZixJQUFJRixRQUFRO1FBQ1pBLFNBQVM7UUFDVGhCLEdBQUdtQixLQUFLLENBQUMsTUFBTUQ7SUFDakI7SUFDQSxNQUFNRSxTQUFTekMsR0FBRzBDLGlCQUFpQixDQUFDTjtJQUVwQ0ssT0FBT1gsRUFBRSxDQUFDLFNBQVNRO0lBQ25CRyxPQUFPWCxFQUFFLENBQUMsU0FBU1E7SUFFbkJsQyxRQUFRdUMsa0JBQWtCLENBQUNGLFFBQVFuQyxRQUFRQztBQUM3QztBQUVBSCwwQkFBMEIsR0FBRyxTQUFTdUMsbUJBQW9CRixNQUFNLEVBQUVuQyxNQUFNLEVBQUVDLE9BQU87SUFDL0UsTUFBTXFCLE1BQU14QixRQUFRQyxNQUFNLENBQUNDLFFBQVFDO0lBQ25DcUIsSUFBSU0sSUFBSSxHQUFHVSxJQUFJLENBQUNIO0FBQ2xCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc21hcnQtYXVkaXQvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS4zL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL3JlbmRlcmVyL3BuZy5qcz80MTZlIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKVxuY29uc3QgUE5HID0gcmVxdWlyZSgncG5nanMnKS5QTkdcbmNvbnN0IFV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpXG5cbmV4cG9ydHMucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyIChxckRhdGEsIG9wdGlvbnMpIHtcbiAgY29uc3Qgb3B0cyA9IFV0aWxzLmdldE9wdGlvbnMob3B0aW9ucylcbiAgY29uc3QgcG5nT3B0cyA9IG9wdHMucmVuZGVyZXJPcHRzXG4gIGNvbnN0IHNpemUgPSBVdGlscy5nZXRJbWFnZVdpZHRoKHFyRGF0YS5tb2R1bGVzLnNpemUsIG9wdHMpXG5cbiAgcG5nT3B0cy53aWR0aCA9IHNpemVcbiAgcG5nT3B0cy5oZWlnaHQgPSBzaXplXG5cbiAgY29uc3QgcG5nSW1hZ2UgPSBuZXcgUE5HKHBuZ09wdHMpXG4gIFV0aWxzLnFyVG9JbWFnZURhdGEocG5nSW1hZ2UuZGF0YSwgcXJEYXRhLCBvcHRzKVxuXG4gIHJldHVybiBwbmdJbWFnZVxufVxuXG5leHBvcnRzLnJlbmRlclRvRGF0YVVSTCA9IGZ1bmN0aW9uIHJlbmRlclRvRGF0YVVSTCAocXJEYXRhLCBvcHRpb25zLCBjYikge1xuICBpZiAodHlwZW9mIGNiID09PSAndW5kZWZpbmVkJykge1xuICAgIGNiID0gb3B0aW9uc1xuICAgIG9wdGlvbnMgPSB1bmRlZmluZWRcbiAgfVxuXG4gIGV4cG9ydHMucmVuZGVyVG9CdWZmZXIocXJEYXRhLCBvcHRpb25zLCBmdW5jdGlvbiAoZXJyLCBvdXRwdXQpIHtcbiAgICBpZiAoZXJyKSBjYihlcnIpXG4gICAgbGV0IHVybCA9ICdkYXRhOmltYWdlL3BuZztiYXNlNjQsJ1xuICAgIHVybCArPSBvdXRwdXQudG9TdHJpbmcoJ2Jhc2U2NCcpXG4gICAgY2IobnVsbCwgdXJsKVxuICB9KVxufVxuXG5leHBvcnRzLnJlbmRlclRvQnVmZmVyID0gZnVuY3Rpb24gcmVuZGVyVG9CdWZmZXIgKHFyRGF0YSwgb3B0aW9ucywgY2IpIHtcbiAgaWYgKHR5cGVvZiBjYiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjYiA9IG9wdGlvbnNcbiAgICBvcHRpb25zID0gdW5kZWZpbmVkXG4gIH1cblxuICBjb25zdCBwbmcgPSBleHBvcnRzLnJlbmRlcihxckRhdGEsIG9wdGlvbnMpXG4gIGNvbnN0IGJ1ZmZlciA9IFtdXG5cbiAgcG5nLm9uKCdlcnJvcicsIGNiKVxuXG4gIHBuZy5vbignZGF0YScsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgYnVmZmVyLnB1c2goZGF0YSlcbiAgfSlcblxuICBwbmcub24oJ2VuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICBjYihudWxsLCBCdWZmZXIuY29uY2F0KGJ1ZmZlcikpXG4gIH0pXG5cbiAgcG5nLnBhY2soKVxufVxuXG5leHBvcnRzLnJlbmRlclRvRmlsZSA9IGZ1bmN0aW9uIHJlbmRlclRvRmlsZSAocGF0aCwgcXJEYXRhLCBvcHRpb25zLCBjYikge1xuICBpZiAodHlwZW9mIGNiID09PSAndW5kZWZpbmVkJykge1xuICAgIGNiID0gb3B0aW9uc1xuICAgIG9wdGlvbnMgPSB1bmRlZmluZWRcbiAgfVxuXG4gIGxldCBjYWxsZWQgPSBmYWxzZVxuICBjb25zdCBkb25lID0gKC4uLmFyZ3MpID0+IHtcbiAgICBpZiAoY2FsbGVkKSByZXR1cm5cbiAgICBjYWxsZWQgPSB0cnVlXG4gICAgY2IuYXBwbHkobnVsbCwgYXJncylcbiAgfVxuICBjb25zdCBzdHJlYW0gPSBmcy5jcmVhdGVXcml0ZVN0cmVhbShwYXRoKVxuXG4gIHN0cmVhbS5vbignZXJyb3InLCBkb25lKVxuICBzdHJlYW0ub24oJ2Nsb3NlJywgZG9uZSlcblxuICBleHBvcnRzLnJlbmRlclRvRmlsZVN0cmVhbShzdHJlYW0sIHFyRGF0YSwgb3B0aW9ucylcbn1cblxuZXhwb3J0cy5yZW5kZXJUb0ZpbGVTdHJlYW0gPSBmdW5jdGlvbiByZW5kZXJUb0ZpbGVTdHJlYW0gKHN0cmVhbSwgcXJEYXRhLCBvcHRpb25zKSB7XG4gIGNvbnN0IHBuZyA9IGV4cG9ydHMucmVuZGVyKHFyRGF0YSwgb3B0aW9ucylcbiAgcG5nLnBhY2soKS5waXBlKHN0cmVhbSlcbn1cbiJdLCJuYW1lcyI6WyJmcyIsInJlcXVpcmUiLCJQTkciLCJVdGlscyIsImV4cG9ydHMiLCJyZW5kZXIiLCJxckRhdGEiLCJvcHRpb25zIiwib3B0cyIsImdldE9wdGlvbnMiLCJwbmdPcHRzIiwicmVuZGVyZXJPcHRzIiwic2l6ZSIsImdldEltYWdlV2lkdGgiLCJtb2R1bGVzIiwid2lkdGgiLCJoZWlnaHQiLCJwbmdJbWFnZSIsInFyVG9JbWFnZURhdGEiLCJkYXRhIiwicmVuZGVyVG9EYXRhVVJMIiwiY2IiLCJ1bmRlZmluZWQiLCJyZW5kZXJUb0J1ZmZlciIsImVyciIsIm91dHB1dCIsInVybCIsInRvU3RyaW5nIiwicG5nIiwiYnVmZmVyIiwib24iLCJwdXNoIiwiQnVmZmVyIiwiY29uY2F0IiwicGFjayIsInJlbmRlclRvRmlsZSIsInBhdGgiLCJjYWxsZWQiLCJkb25lIiwiYXJncyIsImFwcGx5Iiwic3RyZWFtIiwiY3JlYXRlV3JpdGVTdHJlYW0iLCJyZW5kZXJUb0ZpbGVTdHJlYW0iLCJwaXBlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/renderer/png.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/renderer/svg-tag.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/renderer/svg-tag.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const Utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/renderer/utils.js\");\nfunction getColorAttrib(color, attrib) {\n    const alpha = color.a / 255;\n    const str = attrib + '=\"' + color.hex + '\"';\n    return alpha < 1 ? str + \" \" + attrib + '-opacity=\"' + alpha.toFixed(2).slice(1) + '\"' : str;\n}\nfunction svgCmd(cmd, x, y) {\n    let str = cmd + x;\n    if (typeof y !== \"undefined\") str += \" \" + y;\n    return str;\n}\nfunction qrToPath(data, size, margin) {\n    let path = \"\";\n    let moveBy = 0;\n    let newRow = false;\n    let lineLength = 0;\n    for(let i = 0; i < data.length; i++){\n        const col = Math.floor(i % size);\n        const row = Math.floor(i / size);\n        if (!col && !newRow) newRow = true;\n        if (data[i]) {\n            lineLength++;\n            if (!(i > 0 && col > 0 && data[i - 1])) {\n                path += newRow ? svgCmd(\"M\", col + margin, 0.5 + row + margin) : svgCmd(\"m\", moveBy, 0);\n                moveBy = 0;\n                newRow = false;\n            }\n            if (!(col + 1 < size && data[i + 1])) {\n                path += svgCmd(\"h\", lineLength);\n                lineLength = 0;\n            }\n        } else {\n            moveBy++;\n        }\n    }\n    return path;\n}\nexports.render = function render(qrData, options, cb) {\n    const opts = Utils.getOptions(options);\n    const size = qrData.modules.size;\n    const data = qrData.modules.data;\n    const qrcodesize = size + opts.margin * 2;\n    const bg = !opts.color.light.a ? \"\" : \"<path \" + getColorAttrib(opts.color.light, \"fill\") + ' d=\"M0 0h' + qrcodesize + \"v\" + qrcodesize + 'H0z\"/>';\n    const path = \"<path \" + getColorAttrib(opts.color.dark, \"stroke\") + ' d=\"' + qrToPath(data, size, opts.margin) + '\"/>';\n    const viewBox = 'viewBox=\"' + \"0 0 \" + qrcodesize + \" \" + qrcodesize + '\"';\n    const width = !opts.width ? \"\" : 'width=\"' + opts.width + '\" height=\"' + opts.width + '\" ';\n    const svgTag = '<svg xmlns=\"http://www.w3.org/2000/svg\" ' + width + viewBox + ' shape-rendering=\"crispEdges\">' + bg + path + \"</svg>\\n\";\n    if (typeof cb === \"function\") {\n        cb(null, svgTag);\n    }\n    return svgTag;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS4zL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL3JlbmRlcmVyL3N2Zy10YWcuanMiLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsUUFBUUMsbUJBQU9BLENBQUM7QUFFdEIsU0FBU0MsZUFBZ0JDLEtBQUssRUFBRUMsTUFBTTtJQUNwQyxNQUFNQyxRQUFRRixNQUFNRyxDQUFDLEdBQUc7SUFDeEIsTUFBTUMsTUFBTUgsU0FBUyxPQUFPRCxNQUFNSyxHQUFHLEdBQUc7SUFFeEMsT0FBT0gsUUFBUSxJQUNYRSxNQUFNLE1BQU1ILFNBQVMsZUFBZUMsTUFBTUksT0FBTyxDQUFDLEdBQUdDLEtBQUssQ0FBQyxLQUFLLE1BQ2hFSDtBQUNOO0FBRUEsU0FBU0ksT0FBUUMsR0FBRyxFQUFFQyxDQUFDLEVBQUVDLENBQUM7SUFDeEIsSUFBSVAsTUFBTUssTUFBTUM7SUFDaEIsSUFBSSxPQUFPQyxNQUFNLGFBQWFQLE9BQU8sTUFBTU87SUFFM0MsT0FBT1A7QUFDVDtBQUVBLFNBQVNRLFNBQVVDLElBQUksRUFBRUMsSUFBSSxFQUFFQyxNQUFNO0lBQ25DLElBQUlDLE9BQU87SUFDWCxJQUFJQyxTQUFTO0lBQ2IsSUFBSUMsU0FBUztJQUNiLElBQUlDLGFBQWE7SUFFakIsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlQLEtBQUtRLE1BQU0sRUFBRUQsSUFBSztRQUNwQyxNQUFNRSxNQUFNQyxLQUFLQyxLQUFLLENBQUNKLElBQUlOO1FBQzNCLE1BQU1XLE1BQU1GLEtBQUtDLEtBQUssQ0FBQ0osSUFBSU47UUFFM0IsSUFBSSxDQUFDUSxPQUFPLENBQUNKLFFBQVFBLFNBQVM7UUFFOUIsSUFBSUwsSUFBSSxDQUFDTyxFQUFFLEVBQUU7WUFDWEQ7WUFFQSxJQUFJLENBQUVDLENBQUFBLElBQUksS0FBS0UsTUFBTSxLQUFLVCxJQUFJLENBQUNPLElBQUksRUFBRSxHQUFHO2dCQUN0Q0osUUFBUUUsU0FDSlYsT0FBTyxLQUFLYyxNQUFNUCxRQUFRLE1BQU1VLE1BQU1WLFVBQ3RDUCxPQUFPLEtBQUtTLFFBQVE7Z0JBRXhCQSxTQUFTO2dCQUNUQyxTQUFTO1lBQ1g7WUFFQSxJQUFJLENBQUVJLENBQUFBLE1BQU0sSUFBSVIsUUFBUUQsSUFBSSxDQUFDTyxJQUFJLEVBQUUsR0FBRztnQkFDcENKLFFBQVFSLE9BQU8sS0FBS1c7Z0JBQ3BCQSxhQUFhO1lBQ2Y7UUFDRixPQUFPO1lBQ0xGO1FBQ0Y7SUFDRjtJQUVBLE9BQU9EO0FBQ1Q7QUFFQVUsY0FBYyxHQUFHLFNBQVNDLE9BQVFDLE1BQU0sRUFBRUMsT0FBTyxFQUFFQyxFQUFFO0lBQ25ELE1BQU1DLE9BQU9sQyxNQUFNbUMsVUFBVSxDQUFDSDtJQUM5QixNQUFNZixPQUFPYyxPQUFPSyxPQUFPLENBQUNuQixJQUFJO0lBQ2hDLE1BQU1ELE9BQU9lLE9BQU9LLE9BQU8sQ0FBQ3BCLElBQUk7SUFDaEMsTUFBTXFCLGFBQWFwQixPQUFPaUIsS0FBS2hCLE1BQU0sR0FBRztJQUV4QyxNQUFNb0IsS0FBSyxDQUFDSixLQUFLL0IsS0FBSyxDQUFDb0MsS0FBSyxDQUFDakMsQ0FBQyxHQUMxQixLQUNBLFdBQVdKLGVBQWVnQyxLQUFLL0IsS0FBSyxDQUFDb0MsS0FBSyxFQUFFLFVBQzVDLGNBQWNGLGFBQWEsTUFBTUEsYUFBYTtJQUVsRCxNQUFNbEIsT0FDSixXQUFXakIsZUFBZWdDLEtBQUsvQixLQUFLLENBQUNxQyxJQUFJLEVBQUUsWUFDM0MsU0FBU3pCLFNBQVNDLE1BQU1DLE1BQU1pQixLQUFLaEIsTUFBTSxJQUFJO0lBRS9DLE1BQU11QixVQUFVLGNBQWMsU0FBU0osYUFBYSxNQUFNQSxhQUFhO0lBRXZFLE1BQU1LLFFBQVEsQ0FBQ1IsS0FBS1EsS0FBSyxHQUFHLEtBQUssWUFBWVIsS0FBS1EsS0FBSyxHQUFHLGVBQWVSLEtBQUtRLEtBQUssR0FBRztJQUV0RixNQUFNQyxTQUFTLDZDQUE2Q0QsUUFBUUQsVUFBVSxtQ0FBbUNILEtBQUtuQixPQUFPO0lBRTdILElBQUksT0FBT2MsT0FBTyxZQUFZO1FBQzVCQSxHQUFHLE1BQU1VO0lBQ1g7SUFFQSxPQUFPQTtBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc21hcnQtYXVkaXQvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS4zL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL3JlbmRlcmVyL3N2Zy10YWcuanM/YmY2NCJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBVdGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKVxuXG5mdW5jdGlvbiBnZXRDb2xvckF0dHJpYiAoY29sb3IsIGF0dHJpYikge1xuICBjb25zdCBhbHBoYSA9IGNvbG9yLmEgLyAyNTVcbiAgY29uc3Qgc3RyID0gYXR0cmliICsgJz1cIicgKyBjb2xvci5oZXggKyAnXCInXG5cbiAgcmV0dXJuIGFscGhhIDwgMVxuICAgID8gc3RyICsgJyAnICsgYXR0cmliICsgJy1vcGFjaXR5PVwiJyArIGFscGhhLnRvRml4ZWQoMikuc2xpY2UoMSkgKyAnXCInXG4gICAgOiBzdHJcbn1cblxuZnVuY3Rpb24gc3ZnQ21kIChjbWQsIHgsIHkpIHtcbiAgbGV0IHN0ciA9IGNtZCArIHhcbiAgaWYgKHR5cGVvZiB5ICE9PSAndW5kZWZpbmVkJykgc3RyICs9ICcgJyArIHlcblxuICByZXR1cm4gc3RyXG59XG5cbmZ1bmN0aW9uIHFyVG9QYXRoIChkYXRhLCBzaXplLCBtYXJnaW4pIHtcbiAgbGV0IHBhdGggPSAnJ1xuICBsZXQgbW92ZUJ5ID0gMFxuICBsZXQgbmV3Um93ID0gZmFsc2VcbiAgbGV0IGxpbmVMZW5ndGggPSAwXG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgY29sID0gTWF0aC5mbG9vcihpICUgc2l6ZSlcbiAgICBjb25zdCByb3cgPSBNYXRoLmZsb29yKGkgLyBzaXplKVxuXG4gICAgaWYgKCFjb2wgJiYgIW5ld1JvdykgbmV3Um93ID0gdHJ1ZVxuXG4gICAgaWYgKGRhdGFbaV0pIHtcbiAgICAgIGxpbmVMZW5ndGgrK1xuXG4gICAgICBpZiAoIShpID4gMCAmJiBjb2wgPiAwICYmIGRhdGFbaSAtIDFdKSkge1xuICAgICAgICBwYXRoICs9IG5ld1Jvd1xuICAgICAgICAgID8gc3ZnQ21kKCdNJywgY29sICsgbWFyZ2luLCAwLjUgKyByb3cgKyBtYXJnaW4pXG4gICAgICAgICAgOiBzdmdDbWQoJ20nLCBtb3ZlQnksIDApXG5cbiAgICAgICAgbW92ZUJ5ID0gMFxuICAgICAgICBuZXdSb3cgPSBmYWxzZVxuICAgICAgfVxuXG4gICAgICBpZiAoIShjb2wgKyAxIDwgc2l6ZSAmJiBkYXRhW2kgKyAxXSkpIHtcbiAgICAgICAgcGF0aCArPSBzdmdDbWQoJ2gnLCBsaW5lTGVuZ3RoKVxuICAgICAgICBsaW5lTGVuZ3RoID0gMFxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBtb3ZlQnkrK1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwYXRoXG59XG5cbmV4cG9ydHMucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyIChxckRhdGEsIG9wdGlvbnMsIGNiKSB7XG4gIGNvbnN0IG9wdHMgPSBVdGlscy5nZXRPcHRpb25zKG9wdGlvbnMpXG4gIGNvbnN0IHNpemUgPSBxckRhdGEubW9kdWxlcy5zaXplXG4gIGNvbnN0IGRhdGEgPSBxckRhdGEubW9kdWxlcy5kYXRhXG4gIGNvbnN0IHFyY29kZXNpemUgPSBzaXplICsgb3B0cy5tYXJnaW4gKiAyXG5cbiAgY29uc3QgYmcgPSAhb3B0cy5jb2xvci5saWdodC5hXG4gICAgPyAnJ1xuICAgIDogJzxwYXRoICcgKyBnZXRDb2xvckF0dHJpYihvcHRzLmNvbG9yLmxpZ2h0LCAnZmlsbCcpICtcbiAgICAgICcgZD1cIk0wIDBoJyArIHFyY29kZXNpemUgKyAndicgKyBxcmNvZGVzaXplICsgJ0gwelwiLz4nXG5cbiAgY29uc3QgcGF0aCA9XG4gICAgJzxwYXRoICcgKyBnZXRDb2xvckF0dHJpYihvcHRzLmNvbG9yLmRhcmssICdzdHJva2UnKSArXG4gICAgJyBkPVwiJyArIHFyVG9QYXRoKGRhdGEsIHNpemUsIG9wdHMubWFyZ2luKSArICdcIi8+J1xuXG4gIGNvbnN0IHZpZXdCb3ggPSAndmlld0JveD1cIicgKyAnMCAwICcgKyBxcmNvZGVzaXplICsgJyAnICsgcXJjb2Rlc2l6ZSArICdcIidcblxuICBjb25zdCB3aWR0aCA9ICFvcHRzLndpZHRoID8gJycgOiAnd2lkdGg9XCInICsgb3B0cy53aWR0aCArICdcIiBoZWlnaHQ9XCInICsgb3B0cy53aWR0aCArICdcIiAnXG5cbiAgY29uc3Qgc3ZnVGFnID0gJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiICcgKyB3aWR0aCArIHZpZXdCb3ggKyAnIHNoYXBlLXJlbmRlcmluZz1cImNyaXNwRWRnZXNcIj4nICsgYmcgKyBwYXRoICsgJzwvc3ZnPlxcbidcblxuICBpZiAodHlwZW9mIGNiID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IobnVsbCwgc3ZnVGFnKVxuICB9XG5cbiAgcmV0dXJuIHN2Z1RhZ1xufVxuIl0sIm5hbWVzIjpbIlV0aWxzIiwicmVxdWlyZSIsImdldENvbG9yQXR0cmliIiwiY29sb3IiLCJhdHRyaWIiLCJhbHBoYSIsImEiLCJzdHIiLCJoZXgiLCJ0b0ZpeGVkIiwic2xpY2UiLCJzdmdDbWQiLCJjbWQiLCJ4IiwieSIsInFyVG9QYXRoIiwiZGF0YSIsInNpemUiLCJtYXJnaW4iLCJwYXRoIiwibW92ZUJ5IiwibmV3Um93IiwibGluZUxlbmd0aCIsImkiLCJsZW5ndGgiLCJjb2wiLCJNYXRoIiwiZmxvb3IiLCJyb3ciLCJleHBvcnRzIiwicmVuZGVyIiwicXJEYXRhIiwib3B0aW9ucyIsImNiIiwib3B0cyIsImdldE9wdGlvbnMiLCJtb2R1bGVzIiwicXJjb2Rlc2l6ZSIsImJnIiwibGlnaHQiLCJkYXJrIiwidmlld0JveCIsIndpZHRoIiwic3ZnVGFnIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/renderer/svg-tag.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/renderer/svg.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/renderer/svg.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const svgTagRenderer = __webpack_require__(/*! ./svg-tag */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/renderer/svg-tag.js\");\nexports.render = svgTagRenderer.render;\nexports.renderToFile = function renderToFile(path, qrData, options, cb) {\n    if (typeof cb === \"undefined\") {\n        cb = options;\n        options = undefined;\n    }\n    const fs = __webpack_require__(/*! fs */ \"fs\");\n    const svgTag = exports.render(qrData, options);\n    const xmlStr = '<?xml version=\"1.0\" encoding=\"utf-8\"?>' + '<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">' + svgTag;\n    fs.writeFile(path, xmlStr, cb);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS4zL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL3JlbmRlcmVyL3N2Zy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxpQkFBaUJDLG1CQUFPQSxDQUFDO0FBRS9CQyxjQUFjLEdBQUdGLGVBQWVHLE1BQU07QUFFdENELG9CQUFvQixHQUFHLFNBQVNFLGFBQWNDLElBQUksRUFBRUMsTUFBTSxFQUFFQyxPQUFPLEVBQUVDLEVBQUU7SUFDckUsSUFBSSxPQUFPQSxPQUFPLGFBQWE7UUFDN0JBLEtBQUtEO1FBQ0xBLFVBQVVFO0lBQ1o7SUFFQSxNQUFNQyxLQUFLVCxtQkFBT0EsQ0FBQztJQUNuQixNQUFNVSxTQUFTVCxRQUFRQyxNQUFNLENBQUNHLFFBQVFDO0lBRXRDLE1BQU1LLFNBQVMsMkNBQ2IsdUdBQ0FEO0lBRUZELEdBQUdHLFNBQVMsQ0FBQ1IsTUFBTU8sUUFBUUo7QUFDN0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbWFydC1hdWRpdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9xcmNvZGVAMS41LjMvbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvcmVuZGVyZXIvc3ZnLmpzPzlkODYiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qgc3ZnVGFnUmVuZGVyZXIgPSByZXF1aXJlKCcuL3N2Zy10YWcnKVxuXG5leHBvcnRzLnJlbmRlciA9IHN2Z1RhZ1JlbmRlcmVyLnJlbmRlclxuXG5leHBvcnRzLnJlbmRlclRvRmlsZSA9IGZ1bmN0aW9uIHJlbmRlclRvRmlsZSAocGF0aCwgcXJEYXRhLCBvcHRpb25zLCBjYikge1xuICBpZiAodHlwZW9mIGNiID09PSAndW5kZWZpbmVkJykge1xuICAgIGNiID0gb3B0aW9uc1xuICAgIG9wdGlvbnMgPSB1bmRlZmluZWRcbiAgfVxuXG4gIGNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKVxuICBjb25zdCBzdmdUYWcgPSBleHBvcnRzLnJlbmRlcihxckRhdGEsIG9wdGlvbnMpXG5cbiAgY29uc3QgeG1sU3RyID0gJzw/eG1sIHZlcnNpb249XCIxLjBcIiBlbmNvZGluZz1cInV0Zi04XCI/PicgK1xuICAgICc8IURPQ1RZUEUgc3ZnIFBVQkxJQyBcIi0vL1czQy8vRFREIFNWRyAxLjEvL0VOXCIgXCJodHRwOi8vd3d3LnczLm9yZy9HcmFwaGljcy9TVkcvMS4xL0RURC9zdmcxMS5kdGRcIj4nICtcbiAgICBzdmdUYWdcblxuICBmcy53cml0ZUZpbGUocGF0aCwgeG1sU3RyLCBjYilcbn1cbiJdLCJuYW1lcyI6WyJzdmdUYWdSZW5kZXJlciIsInJlcXVpcmUiLCJleHBvcnRzIiwicmVuZGVyIiwicmVuZGVyVG9GaWxlIiwicGF0aCIsInFyRGF0YSIsIm9wdGlvbnMiLCJjYiIsInVuZGVmaW5lZCIsImZzIiwic3ZnVGFnIiwieG1sU3RyIiwid3JpdGVGaWxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/renderer/svg.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/renderer/terminal.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/renderer/terminal.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const big = __webpack_require__(/*! ./terminal/terminal */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/renderer/terminal/terminal.js\");\nconst small = __webpack_require__(/*! ./terminal/terminal-small */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/renderer/terminal/terminal-small.js\");\nexports.render = function(qrData, options, cb) {\n    if (options && options.small) {\n        return small.render(qrData, options, cb);\n    }\n    return big.render(qrData, options, cb);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS4zL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL3JlbmRlcmVyL3Rlcm1pbmFsLmpzIiwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLE1BQU1DLG1CQUFPQSxDQUFDO0FBQ3BCLE1BQU1DLFFBQVFELG1CQUFPQSxDQUFDO0FBRXRCRSxjQUFjLEdBQUcsU0FBVUUsTUFBTSxFQUFFQyxPQUFPLEVBQUVDLEVBQUU7SUFDNUMsSUFBSUQsV0FBV0EsUUFBUUosS0FBSyxFQUFFO1FBQzVCLE9BQU9BLE1BQU1FLE1BQU0sQ0FBQ0MsUUFBUUMsU0FBU0M7SUFDdkM7SUFDQSxPQUFPUCxJQUFJSSxNQUFNLENBQUNDLFFBQVFDLFNBQVNDO0FBQ3JDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc21hcnQtYXVkaXQvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS4zL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL3JlbmRlcmVyL3Rlcm1pbmFsLmpzPzY4YTAiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgYmlnID0gcmVxdWlyZSgnLi90ZXJtaW5hbC90ZXJtaW5hbCcpXG5jb25zdCBzbWFsbCA9IHJlcXVpcmUoJy4vdGVybWluYWwvdGVybWluYWwtc21hbGwnKVxuXG5leHBvcnRzLnJlbmRlciA9IGZ1bmN0aW9uIChxckRhdGEsIG9wdGlvbnMsIGNiKSB7XG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMuc21hbGwpIHtcbiAgICByZXR1cm4gc21hbGwucmVuZGVyKHFyRGF0YSwgb3B0aW9ucywgY2IpXG4gIH1cbiAgcmV0dXJuIGJpZy5yZW5kZXIocXJEYXRhLCBvcHRpb25zLCBjYilcbn1cbiJdLCJuYW1lcyI6WyJiaWciLCJyZXF1aXJlIiwic21hbGwiLCJleHBvcnRzIiwicmVuZGVyIiwicXJEYXRhIiwib3B0aW9ucyIsImNiIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/renderer/terminal.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/renderer/terminal/terminal-small.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/renderer/terminal/terminal-small.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("const backgroundWhite = \"\\x1b[47m\";\nconst backgroundBlack = \"\\x1b[40m\";\nconst foregroundWhite = \"\\x1b[37m\";\nconst foregroundBlack = \"\\x1b[30m\";\nconst reset = \"\\x1b[0m\";\nconst lineSetupNormal = backgroundWhite + foregroundBlack // setup colors\n;\nconst lineSetupInverse = backgroundBlack + foregroundWhite // setup colors\n;\nconst createPalette = function(lineSetup, foregroundWhite, foregroundBlack) {\n    return {\n        // 1 ... white, 2 ... black, 0 ... transparent (default)\n        \"00\": reset + \" \" + lineSetup,\n        \"01\": reset + foregroundWhite + \"▄\" + lineSetup,\n        \"02\": reset + foregroundBlack + \"▄\" + lineSetup,\n        10: reset + foregroundWhite + \"▀\" + lineSetup,\n        11: \" \",\n        12: \"▄\",\n        20: reset + foregroundBlack + \"▀\" + lineSetup,\n        21: \"▀\",\n        22: \"█\"\n    };\n};\n/**\n * Returns code for QR pixel\n * @param {boolean[][]} modules\n * @param {number} size\n * @param {number} x\n * @param {number} y\n * @return {'0' | '1' | '2'}\n */ const mkCodePixel = function(modules, size, x, y) {\n    const sizePlus = size + 1;\n    if (x >= sizePlus || y >= sizePlus || y < -1 || x < -1) return \"0\";\n    if (x >= size || y >= size || y < 0 || x < 0) return \"1\";\n    const idx = y * size + x;\n    return modules[idx] ? \"2\" : \"1\";\n};\n/**\n * Returns code for four QR pixels. Suitable as key in palette.\n * @param {boolean[][]} modules\n * @param {number} size\n * @param {number} x\n * @param {number} y\n * @return {keyof palette}\n */ const mkCode = function(modules, size, x, y) {\n    return mkCodePixel(modules, size, x, y) + mkCodePixel(modules, size, x, y + 1);\n};\nexports.render = function(qrData, options, cb) {\n    const size = qrData.modules.size;\n    const data = qrData.modules.data;\n    const inverse = !!(options && options.inverse);\n    const lineSetup = options && options.inverse ? lineSetupInverse : lineSetupNormal;\n    const white = inverse ? foregroundBlack : foregroundWhite;\n    const black = inverse ? foregroundWhite : foregroundBlack;\n    const palette = createPalette(lineSetup, white, black);\n    const newLine = reset + \"\\n\" + lineSetup;\n    let output = lineSetup // setup colors\n    ;\n    for(let y = -1; y < size + 1; y += 2){\n        for(let x = -1; x < size; x++){\n            output += palette[mkCode(data, size, x, y)];\n        }\n        output += palette[mkCode(data, size, size, y)] + newLine;\n    }\n    output += reset;\n    if (typeof cb === \"function\") {\n        cb(null, output);\n    }\n    return output;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS4zL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL3JlbmRlcmVyL3Rlcm1pbmFsL3Rlcm1pbmFsLXNtYWxsLmpzIiwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLGtCQUFrQjtBQUN4QixNQUFNQyxrQkFBa0I7QUFDeEIsTUFBTUMsa0JBQWtCO0FBQ3hCLE1BQU1DLGtCQUFrQjtBQUN4QixNQUFNQyxRQUFRO0FBQ2QsTUFBTUMsa0JBQWtCTCxrQkFBa0JHLGdCQUFnQixlQUFlOztBQUN6RSxNQUFNRyxtQkFBbUJMLGtCQUFrQkMsZ0JBQWdCLGVBQWU7O0FBRTFFLE1BQU1LLGdCQUFnQixTQUFVQyxTQUFTLEVBQUVOLGVBQWUsRUFBRUMsZUFBZTtJQUN6RSxPQUFPO1FBQ0wsd0RBQXdEO1FBRXhELE1BQU1DLFFBQVEsTUFBTUk7UUFDcEIsTUFBTUosUUFBUUYsa0JBQWtCLE1BQU1NO1FBQ3RDLE1BQU1KLFFBQVFELGtCQUFrQixNQUFNSztRQUN0QyxJQUFJSixRQUFRRixrQkFBa0IsTUFBTU07UUFDcEMsSUFBSTtRQUNKLElBQUk7UUFDSixJQUFJSixRQUFRRCxrQkFBa0IsTUFBTUs7UUFDcEMsSUFBSTtRQUNKLElBQUk7SUFDTjtBQUNGO0FBRUE7Ozs7Ozs7Q0FPQyxHQUNELE1BQU1DLGNBQWMsU0FBVUMsT0FBTyxFQUFFQyxJQUFJLEVBQUVDLENBQUMsRUFBRUMsQ0FBQztJQUMvQyxNQUFNQyxXQUFXSCxPQUFPO0lBQ3hCLElBQUksS0FBTUcsWUFBY0QsS0FBS0MsWUFBY0QsSUFBSSxDQUFDLEtBQU9ELElBQUksQ0FBQyxHQUFJLE9BQU87SUFDdkUsSUFBSSxLQUFNRCxRQUFVRSxLQUFLRixRQUFVRSxJQUFJLEtBQU9ELElBQUksR0FBSSxPQUFPO0lBQzdELE1BQU1HLE1BQU0sSUFBS0osT0FBUUM7SUFDekIsT0FBT0YsT0FBTyxDQUFDSyxJQUFJLEdBQUcsTUFBTTtBQUM5QjtBQUVBOzs7Ozs7O0NBT0MsR0FDRCxNQUFNQyxTQUFTLFNBQVVOLE9BQU8sRUFBRUMsSUFBSSxFQUFFQyxDQUFDLEVBQUVDLENBQUM7SUFDMUMsT0FDRUosWUFBWUMsU0FBU0MsTUFBTUMsR0FBR0MsS0FDOUJKLFlBQVlDLFNBQVNDLE1BQU1DLEdBQUdDLElBQUk7QUFFdEM7QUFFQUksY0FBYyxHQUFHLFNBQVVFLE1BQU0sRUFBRUMsT0FBTyxFQUFFQyxFQUFFO0lBQzVDLE1BQU1WLE9BQU9RLE9BQU9ULE9BQU8sQ0FBQ0MsSUFBSTtJQUNoQyxNQUFNVyxPQUFPSCxPQUFPVCxPQUFPLENBQUNZLElBQUk7SUFFaEMsTUFBTUMsVUFBVSxDQUFDLENBQUVILENBQUFBLFdBQVdBLFFBQVFHLE9BQU87SUFDN0MsTUFBTWYsWUFBWVksV0FBV0EsUUFBUUcsT0FBTyxHQUFHakIsbUJBQW1CRDtJQUNsRSxNQUFNbUIsUUFBUUQsVUFBVXBCLGtCQUFrQkQ7SUFDMUMsTUFBTXVCLFFBQVFGLFVBQVVyQixrQkFBa0JDO0lBRTFDLE1BQU11QixVQUFVbkIsY0FBY0MsV0FBV2dCLE9BQU9DO0lBQ2hELE1BQU1FLFVBQVV2QixRQUFRLE9BQU9JO0lBRS9CLElBQUlvQixTQUFTcEIsVUFBVSxlQUFlOztJQUV0QyxJQUFLLElBQUlLLElBQUksQ0FBQyxHQUFHQSxJQUFJRixPQUFPLEdBQUdFLEtBQUssRUFBRztRQUNyQyxJQUFLLElBQUlELElBQUksQ0FBQyxHQUFHQSxJQUFJRCxNQUFNQyxJQUFLO1lBQzlCZ0IsVUFBVUYsT0FBTyxDQUFDVixPQUFPTSxNQUFNWCxNQUFNQyxHQUFHQyxHQUFHO1FBQzdDO1FBRUFlLFVBQVVGLE9BQU8sQ0FBQ1YsT0FBT00sTUFBTVgsTUFBTUEsTUFBTUUsR0FBRyxHQUFHYztJQUNuRDtJQUVBQyxVQUFVeEI7SUFFVixJQUFJLE9BQU9pQixPQUFPLFlBQVk7UUFDNUJBLEdBQUcsTUFBTU87SUFDWDtJQUVBLE9BQU9BO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbWFydC1hdWRpdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9xcmNvZGVAMS41LjMvbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvcmVuZGVyZXIvdGVybWluYWwvdGVybWluYWwtc21hbGwuanM/ZTYyZiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBiYWNrZ3JvdW5kV2hpdGUgPSAnXFx4MWJbNDdtJ1xuY29uc3QgYmFja2dyb3VuZEJsYWNrID0gJ1xceDFiWzQwbSdcbmNvbnN0IGZvcmVncm91bmRXaGl0ZSA9ICdcXHgxYlszN20nXG5jb25zdCBmb3JlZ3JvdW5kQmxhY2sgPSAnXFx4MWJbMzBtJ1xuY29uc3QgcmVzZXQgPSAnXFx4MWJbMG0nXG5jb25zdCBsaW5lU2V0dXBOb3JtYWwgPSBiYWNrZ3JvdW5kV2hpdGUgKyBmb3JlZ3JvdW5kQmxhY2sgLy8gc2V0dXAgY29sb3JzXG5jb25zdCBsaW5lU2V0dXBJbnZlcnNlID0gYmFja2dyb3VuZEJsYWNrICsgZm9yZWdyb3VuZFdoaXRlIC8vIHNldHVwIGNvbG9yc1xuXG5jb25zdCBjcmVhdGVQYWxldHRlID0gZnVuY3Rpb24gKGxpbmVTZXR1cCwgZm9yZWdyb3VuZFdoaXRlLCBmb3JlZ3JvdW5kQmxhY2spIHtcbiAgcmV0dXJuIHtcbiAgICAvLyAxIC4uLiB3aGl0ZSwgMiAuLi4gYmxhY2ssIDAgLi4uIHRyYW5zcGFyZW50IChkZWZhdWx0KVxuXG4gICAgJzAwJzogcmVzZXQgKyAnICcgKyBsaW5lU2V0dXAsXG4gICAgJzAxJzogcmVzZXQgKyBmb3JlZ3JvdW5kV2hpdGUgKyAn4paEJyArIGxpbmVTZXR1cCxcbiAgICAnMDInOiByZXNldCArIGZvcmVncm91bmRCbGFjayArICfiloQnICsgbGluZVNldHVwLFxuICAgIDEwOiByZXNldCArIGZvcmVncm91bmRXaGl0ZSArICfiloAnICsgbGluZVNldHVwLFxuICAgIDExOiAnICcsXG4gICAgMTI6ICfiloQnLFxuICAgIDIwOiByZXNldCArIGZvcmVncm91bmRCbGFjayArICfiloAnICsgbGluZVNldHVwLFxuICAgIDIxOiAn4paAJyxcbiAgICAyMjogJ+KWiCdcbiAgfVxufVxuXG4vKipcbiAqIFJldHVybnMgY29kZSBmb3IgUVIgcGl4ZWxcbiAqIEBwYXJhbSB7Ym9vbGVhbltdW119IG1vZHVsZXNcbiAqIEBwYXJhbSB7bnVtYmVyfSBzaXplXG4gKiBAcGFyYW0ge251bWJlcn0geFxuICogQHBhcmFtIHtudW1iZXJ9IHlcbiAqIEByZXR1cm4geycwJyB8ICcxJyB8ICcyJ31cbiAqL1xuY29uc3QgbWtDb2RlUGl4ZWwgPSBmdW5jdGlvbiAobW9kdWxlcywgc2l6ZSwgeCwgeSkge1xuICBjb25zdCBzaXplUGx1cyA9IHNpemUgKyAxXG4gIGlmICgoeCA+PSBzaXplUGx1cykgfHwgKHkgPj0gc2l6ZVBsdXMpIHx8ICh5IDwgLTEpIHx8ICh4IDwgLTEpKSByZXR1cm4gJzAnXG4gIGlmICgoeCA+PSBzaXplKSB8fCAoeSA+PSBzaXplKSB8fCAoeSA8IDApIHx8ICh4IDwgMCkpIHJldHVybiAnMSdcbiAgY29uc3QgaWR4ID0gKHkgKiBzaXplKSArIHhcbiAgcmV0dXJuIG1vZHVsZXNbaWR4XSA/ICcyJyA6ICcxJ1xufVxuXG4vKipcbiAqIFJldHVybnMgY29kZSBmb3IgZm91ciBRUiBwaXhlbHMuIFN1aXRhYmxlIGFzIGtleSBpbiBwYWxldHRlLlxuICogQHBhcmFtIHtib29sZWFuW11bXX0gbW9kdWxlc1xuICogQHBhcmFtIHtudW1iZXJ9IHNpemVcbiAqIEBwYXJhbSB7bnVtYmVyfSB4XG4gKiBAcGFyYW0ge251bWJlcn0geVxuICogQHJldHVybiB7a2V5b2YgcGFsZXR0ZX1cbiAqL1xuY29uc3QgbWtDb2RlID0gZnVuY3Rpb24gKG1vZHVsZXMsIHNpemUsIHgsIHkpIHtcbiAgcmV0dXJuIChcbiAgICBta0NvZGVQaXhlbChtb2R1bGVzLCBzaXplLCB4LCB5KSArXG4gICAgbWtDb2RlUGl4ZWwobW9kdWxlcywgc2l6ZSwgeCwgeSArIDEpXG4gIClcbn1cblxuZXhwb3J0cy5yZW5kZXIgPSBmdW5jdGlvbiAocXJEYXRhLCBvcHRpb25zLCBjYikge1xuICBjb25zdCBzaXplID0gcXJEYXRhLm1vZHVsZXMuc2l6ZVxuICBjb25zdCBkYXRhID0gcXJEYXRhLm1vZHVsZXMuZGF0YVxuXG4gIGNvbnN0IGludmVyc2UgPSAhIShvcHRpb25zICYmIG9wdGlvbnMuaW52ZXJzZSlcbiAgY29uc3QgbGluZVNldHVwID0gb3B0aW9ucyAmJiBvcHRpb25zLmludmVyc2UgPyBsaW5lU2V0dXBJbnZlcnNlIDogbGluZVNldHVwTm9ybWFsXG4gIGNvbnN0IHdoaXRlID0gaW52ZXJzZSA/IGZvcmVncm91bmRCbGFjayA6IGZvcmVncm91bmRXaGl0ZVxuICBjb25zdCBibGFjayA9IGludmVyc2UgPyBmb3JlZ3JvdW5kV2hpdGUgOiBmb3JlZ3JvdW5kQmxhY2tcblxuICBjb25zdCBwYWxldHRlID0gY3JlYXRlUGFsZXR0ZShsaW5lU2V0dXAsIHdoaXRlLCBibGFjaylcbiAgY29uc3QgbmV3TGluZSA9IHJlc2V0ICsgJ1xcbicgKyBsaW5lU2V0dXBcblxuICBsZXQgb3V0cHV0ID0gbGluZVNldHVwIC8vIHNldHVwIGNvbG9yc1xuXG4gIGZvciAobGV0IHkgPSAtMTsgeSA8IHNpemUgKyAxOyB5ICs9IDIpIHtcbiAgICBmb3IgKGxldCB4ID0gLTE7IHggPCBzaXplOyB4KyspIHtcbiAgICAgIG91dHB1dCArPSBwYWxldHRlW21rQ29kZShkYXRhLCBzaXplLCB4LCB5KV1cbiAgICB9XG5cbiAgICBvdXRwdXQgKz0gcGFsZXR0ZVtta0NvZGUoZGF0YSwgc2l6ZSwgc2l6ZSwgeSldICsgbmV3TGluZVxuICB9XG5cbiAgb3V0cHV0ICs9IHJlc2V0XG5cbiAgaWYgKHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiKG51bGwsIG91dHB1dClcbiAgfVxuXG4gIHJldHVybiBvdXRwdXRcbn1cbiJdLCJuYW1lcyI6WyJiYWNrZ3JvdW5kV2hpdGUiLCJiYWNrZ3JvdW5kQmxhY2siLCJmb3JlZ3JvdW5kV2hpdGUiLCJmb3JlZ3JvdW5kQmxhY2siLCJyZXNldCIsImxpbmVTZXR1cE5vcm1hbCIsImxpbmVTZXR1cEludmVyc2UiLCJjcmVhdGVQYWxldHRlIiwibGluZVNldHVwIiwibWtDb2RlUGl4ZWwiLCJtb2R1bGVzIiwic2l6ZSIsIngiLCJ5Iiwic2l6ZVBsdXMiLCJpZHgiLCJta0NvZGUiLCJleHBvcnRzIiwicmVuZGVyIiwicXJEYXRhIiwib3B0aW9ucyIsImNiIiwiZGF0YSIsImludmVyc2UiLCJ3aGl0ZSIsImJsYWNrIiwicGFsZXR0ZSIsIm5ld0xpbmUiLCJvdXRwdXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/renderer/terminal/terminal-small.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/renderer/terminal/terminal.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/renderer/terminal/terminal.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("// let Utils = require('./utils')\nexports.render = function(qrData, options, cb) {\n    const size = qrData.modules.size;\n    const data = qrData.modules.data;\n    // let opts = Utils.getOptions(options)\n    // use same scheme as https://github.com/gtanner/qrcode-terminal because it actually works! =)\n    const black = \"\\x1b[40m  \\x1b[0m\";\n    const white = \"\\x1b[47m  \\x1b[0m\";\n    let output = \"\";\n    const hMargin = Array(size + 3).join(white);\n    const vMargin = Array(2).join(white);\n    output += hMargin + \"\\n\";\n    for(let i = 0; i < size; ++i){\n        output += white;\n        for(let j = 0; j < size; j++){\n            // let topModule = data[i * size + j]\n            // let bottomModule = data[(i + 1) * size + j]\n            output += data[i * size + j] ? black : white // getBlockChar(topModule, bottomModule)\n            ;\n        }\n        // output += white+'\\n'\n        output += vMargin + \"\\n\";\n    }\n    output += hMargin + \"\\n\";\n    if (typeof cb === \"function\") {\n        cb(null, output);\n    }\n    return output;\n} /*\nexports.renderToFile = function renderToFile (path, qrData, options, cb) {\n  if (typeof cb === 'undefined') {\n    cb = options\n    options = undefined\n  }\n\n  let fs = require('fs')\n  let utf8 = exports.render(qrData, options)\n  fs.writeFile(path, utf8, cb)\n}\n*/ ;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS4zL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL3JlbmRlcmVyL3Rlcm1pbmFsL3Rlcm1pbmFsLmpzIiwibWFwcGluZ3MiOiJBQUFBLGlDQUFpQztBQUVqQ0EsY0FBYyxHQUFHLFNBQVVFLE1BQU0sRUFBRUMsT0FBTyxFQUFFQyxFQUFFO0lBQzVDLE1BQU1DLE9BQU9ILE9BQU9JLE9BQU8sQ0FBQ0QsSUFBSTtJQUNoQyxNQUFNRSxPQUFPTCxPQUFPSSxPQUFPLENBQUNDLElBQUk7SUFFaEMsdUNBQXVDO0lBRXZDLDhGQUE4RjtJQUM5RixNQUFNQyxRQUFRO0lBQ2QsTUFBTUMsUUFBUTtJQUVkLElBQUlDLFNBQVM7SUFDYixNQUFNQyxVQUFVQyxNQUFNUCxPQUFPLEdBQUdRLElBQUksQ0FBQ0o7SUFDckMsTUFBTUssVUFBVUYsTUFBTSxHQUFHQyxJQUFJLENBQUNKO0lBRTlCQyxVQUFVQyxVQUFVO0lBQ3BCLElBQUssSUFBSUksSUFBSSxHQUFHQSxJQUFJVixNQUFNLEVBQUVVLEVBQUc7UUFDN0JMLFVBQVVEO1FBQ1YsSUFBSyxJQUFJTyxJQUFJLEdBQUdBLElBQUlYLE1BQU1XLElBQUs7WUFDN0IscUNBQXFDO1lBQ3JDLDhDQUE4QztZQUU5Q04sVUFBVUgsSUFBSSxDQUFDUSxJQUFJVixPQUFPVyxFQUFFLEdBQUdSLFFBQVFDLE1BQUssd0NBQXdDOztRQUN0RjtRQUNBLHVCQUF1QjtRQUN2QkMsVUFBVUksVUFBVTtJQUN0QjtJQUVBSixVQUFVQyxVQUFVO0lBRXBCLElBQUksT0FBT1AsT0FBTyxZQUFZO1FBQzVCQSxHQUFHLE1BQU1NO0lBQ1g7SUFFQSxPQUFPQTtBQUNULEVBQ0E7Ozs7Ozs7Ozs7O0FBV0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbWFydC1hdWRpdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9xcmNvZGVAMS41LjMvbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvcmVuZGVyZXIvdGVybWluYWwvdGVybWluYWwuanM/ZDFmZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBsZXQgVXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJylcblxuZXhwb3J0cy5yZW5kZXIgPSBmdW5jdGlvbiAocXJEYXRhLCBvcHRpb25zLCBjYikge1xuICBjb25zdCBzaXplID0gcXJEYXRhLm1vZHVsZXMuc2l6ZVxuICBjb25zdCBkYXRhID0gcXJEYXRhLm1vZHVsZXMuZGF0YVxuXG4gIC8vIGxldCBvcHRzID0gVXRpbHMuZ2V0T3B0aW9ucyhvcHRpb25zKVxuXG4gIC8vIHVzZSBzYW1lIHNjaGVtZSBhcyBodHRwczovL2dpdGh1Yi5jb20vZ3Rhbm5lci9xcmNvZGUtdGVybWluYWwgYmVjYXVzZSBpdCBhY3R1YWxseSB3b3JrcyEgPSlcbiAgY29uc3QgYmxhY2sgPSAnXFx4MWJbNDBtICBcXHgxYlswbSdcbiAgY29uc3Qgd2hpdGUgPSAnXFx4MWJbNDdtICBcXHgxYlswbSdcblxuICBsZXQgb3V0cHV0ID0gJydcbiAgY29uc3QgaE1hcmdpbiA9IEFycmF5KHNpemUgKyAzKS5qb2luKHdoaXRlKVxuICBjb25zdCB2TWFyZ2luID0gQXJyYXkoMikuam9pbih3aGl0ZSlcblxuICBvdXRwdXQgKz0gaE1hcmdpbiArICdcXG4nXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2l6ZTsgKytpKSB7XG4gICAgb3V0cHV0ICs9IHdoaXRlXG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBzaXplOyBqKyspIHtcbiAgICAgIC8vIGxldCB0b3BNb2R1bGUgPSBkYXRhW2kgKiBzaXplICsgal1cbiAgICAgIC8vIGxldCBib3R0b21Nb2R1bGUgPSBkYXRhWyhpICsgMSkgKiBzaXplICsgal1cblxuICAgICAgb3V0cHV0ICs9IGRhdGFbaSAqIHNpemUgKyBqXSA/IGJsYWNrIDogd2hpdGUvLyBnZXRCbG9ja0NoYXIodG9wTW9kdWxlLCBib3R0b21Nb2R1bGUpXG4gICAgfVxuICAgIC8vIG91dHB1dCArPSB3aGl0ZSsnXFxuJ1xuICAgIG91dHB1dCArPSB2TWFyZ2luICsgJ1xcbidcbiAgfVxuXG4gIG91dHB1dCArPSBoTWFyZ2luICsgJ1xcbidcblxuICBpZiAodHlwZW9mIGNiID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IobnVsbCwgb3V0cHV0KVxuICB9XG5cbiAgcmV0dXJuIG91dHB1dFxufVxuLypcbmV4cG9ydHMucmVuZGVyVG9GaWxlID0gZnVuY3Rpb24gcmVuZGVyVG9GaWxlIChwYXRoLCBxckRhdGEsIG9wdGlvbnMsIGNiKSB7XG4gIGlmICh0eXBlb2YgY2IgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgY2IgPSBvcHRpb25zXG4gICAgb3B0aW9ucyA9IHVuZGVmaW5lZFxuICB9XG5cbiAgbGV0IGZzID0gcmVxdWlyZSgnZnMnKVxuICBsZXQgdXRmOCA9IGV4cG9ydHMucmVuZGVyKHFyRGF0YSwgb3B0aW9ucylcbiAgZnMud3JpdGVGaWxlKHBhdGgsIHV0ZjgsIGNiKVxufVxuKi9cbiJdLCJuYW1lcyI6WyJleHBvcnRzIiwicmVuZGVyIiwicXJEYXRhIiwib3B0aW9ucyIsImNiIiwic2l6ZSIsIm1vZHVsZXMiLCJkYXRhIiwiYmxhY2siLCJ3aGl0ZSIsIm91dHB1dCIsImhNYXJnaW4iLCJBcnJheSIsImpvaW4iLCJ2TWFyZ2luIiwiaSIsImoiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/renderer/terminal/terminal.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/renderer/utf8.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/renderer/utf8.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const Utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/renderer/utils.js\");\nconst BLOCK_CHAR = {\n    WW: \" \",\n    WB: \"▄\",\n    BB: \"█\",\n    BW: \"▀\"\n};\nconst INVERTED_BLOCK_CHAR = {\n    BB: \" \",\n    BW: \"▄\",\n    WW: \"█\",\n    WB: \"▀\"\n};\nfunction getBlockChar(top, bottom, blocks) {\n    if (top && bottom) return blocks.BB;\n    if (top && !bottom) return blocks.BW;\n    if (!top && bottom) return blocks.WB;\n    return blocks.WW;\n}\nexports.render = function(qrData, options, cb) {\n    const opts = Utils.getOptions(options);\n    let blocks = BLOCK_CHAR;\n    if (opts.color.dark.hex === \"#ffffff\" || opts.color.light.hex === \"#000000\") {\n        blocks = INVERTED_BLOCK_CHAR;\n    }\n    const size = qrData.modules.size;\n    const data = qrData.modules.data;\n    let output = \"\";\n    let hMargin = Array(size + opts.margin * 2 + 1).join(blocks.WW);\n    hMargin = Array(opts.margin / 2 + 1).join(hMargin + \"\\n\");\n    const vMargin = Array(opts.margin + 1).join(blocks.WW);\n    output += hMargin;\n    for(let i = 0; i < size; i += 2){\n        output += vMargin;\n        for(let j = 0; j < size; j++){\n            const topModule = data[i * size + j];\n            const bottomModule = data[(i + 1) * size + j];\n            output += getBlockChar(topModule, bottomModule, blocks);\n        }\n        output += vMargin + \"\\n\";\n    }\n    output += hMargin.slice(0, -1);\n    if (typeof cb === \"function\") {\n        cb(null, output);\n    }\n    return output;\n};\nexports.renderToFile = function renderToFile(path, qrData, options, cb) {\n    if (typeof cb === \"undefined\") {\n        cb = options;\n        options = undefined;\n    }\n    const fs = __webpack_require__(/*! fs */ \"fs\");\n    const utf8 = exports.render(qrData, options);\n    fs.writeFile(path, utf8, cb);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcXJjb2RlQDEuNS4zL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL3JlbmRlcmVyL3V0ZjguanMiLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsUUFBUUMsbUJBQU9BLENBQUM7QUFFdEIsTUFBTUMsYUFBYTtJQUNqQkMsSUFBSTtJQUNKQyxJQUFJO0lBQ0pDLElBQUk7SUFDSkMsSUFBSTtBQUNOO0FBRUEsTUFBTUMsc0JBQXNCO0lBQzFCRixJQUFJO0lBQ0pDLElBQUk7SUFDSkgsSUFBSTtJQUNKQyxJQUFJO0FBQ047QUFFQSxTQUFTSSxhQUFjQyxHQUFHLEVBQUVDLE1BQU0sRUFBRUMsTUFBTTtJQUN4QyxJQUFJRixPQUFPQyxRQUFRLE9BQU9DLE9BQU9OLEVBQUU7SUFDbkMsSUFBSUksT0FBTyxDQUFDQyxRQUFRLE9BQU9DLE9BQU9MLEVBQUU7SUFDcEMsSUFBSSxDQUFDRyxPQUFPQyxRQUFRLE9BQU9DLE9BQU9QLEVBQUU7SUFDcEMsT0FBT08sT0FBT1IsRUFBRTtBQUNsQjtBQUVBUyxjQUFjLEdBQUcsU0FBVUUsTUFBTSxFQUFFQyxPQUFPLEVBQUVDLEVBQUU7SUFDNUMsTUFBTUMsT0FBT2pCLE1BQU1rQixVQUFVLENBQUNIO0lBQzlCLElBQUlKLFNBQVNUO0lBQ2IsSUFBSWUsS0FBS0UsS0FBSyxDQUFDQyxJQUFJLENBQUNDLEdBQUcsS0FBSyxhQUFhSixLQUFLRSxLQUFLLENBQUNHLEtBQUssQ0FBQ0QsR0FBRyxLQUFLLFdBQVc7UUFDM0VWLFNBQVNKO0lBQ1g7SUFFQSxNQUFNZ0IsT0FBT1QsT0FBT1UsT0FBTyxDQUFDRCxJQUFJO0lBQ2hDLE1BQU1FLE9BQU9YLE9BQU9VLE9BQU8sQ0FBQ0MsSUFBSTtJQUVoQyxJQUFJQyxTQUFTO0lBQ2IsSUFBSUMsVUFBVUMsTUFBTUwsT0FBUU4sS0FBS1ksTUFBTSxHQUFHLElBQUssR0FBR0MsSUFBSSxDQUFDbkIsT0FBT1IsRUFBRTtJQUNoRXdCLFVBQVVDLE1BQU0sS0FBTUMsTUFBTSxHQUFHLElBQUssR0FBR0MsSUFBSSxDQUFDSCxVQUFVO0lBRXRELE1BQU1JLFVBQVVILE1BQU1YLEtBQUtZLE1BQU0sR0FBRyxHQUFHQyxJQUFJLENBQUNuQixPQUFPUixFQUFFO0lBRXJEdUIsVUFBVUM7SUFDVixJQUFLLElBQUlLLElBQUksR0FBR0EsSUFBSVQsTUFBTVMsS0FBSyxFQUFHO1FBQ2hDTixVQUFVSztRQUNWLElBQUssSUFBSUUsSUFBSSxHQUFHQSxJQUFJVixNQUFNVSxJQUFLO1lBQzdCLE1BQU1DLFlBQVlULElBQUksQ0FBQ08sSUFBSVQsT0FBT1UsRUFBRTtZQUNwQyxNQUFNRSxlQUFlVixJQUFJLENBQUMsQ0FBQ08sSUFBSSxLQUFLVCxPQUFPVSxFQUFFO1lBRTdDUCxVQUFVbEIsYUFBYTBCLFdBQVdDLGNBQWN4QjtRQUNsRDtRQUVBZSxVQUFVSyxVQUFVO0lBQ3RCO0lBRUFMLFVBQVVDLFFBQVFTLEtBQUssQ0FBQyxHQUFHLENBQUM7SUFFNUIsSUFBSSxPQUFPcEIsT0FBTyxZQUFZO1FBQzVCQSxHQUFHLE1BQU1VO0lBQ1g7SUFFQSxPQUFPQTtBQUNUO0FBRUFkLG9CQUFvQixHQUFHLFNBQVN5QixhQUFjQyxJQUFJLEVBQUV4QixNQUFNLEVBQUVDLE9BQU8sRUFBRUMsRUFBRTtJQUNyRSxJQUFJLE9BQU9BLE9BQU8sYUFBYTtRQUM3QkEsS0FBS0Q7UUFDTEEsVUFBVXdCO0lBQ1o7SUFFQSxNQUFNQyxLQUFLdkMsbUJBQU9BLENBQUM7SUFDbkIsTUFBTXdDLE9BQU83QixRQUFRQyxNQUFNLENBQUNDLFFBQVFDO0lBQ3BDeUIsR0FBR0UsU0FBUyxDQUFDSixNQUFNRyxNQUFNekI7QUFDM0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbWFydC1hdWRpdC8uL25vZGVfbW9kdWxlcy8ucG5wbS9xcmNvZGVAMS41LjMvbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvcmVuZGVyZXIvdXRmOC5qcz9hNzVlIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpXG5cbmNvbnN0IEJMT0NLX0NIQVIgPSB7XG4gIFdXOiAnICcsXG4gIFdCOiAn4paEJyxcbiAgQkI6ICfilognLFxuICBCVzogJ+KWgCdcbn1cblxuY29uc3QgSU5WRVJURURfQkxPQ0tfQ0hBUiA9IHtcbiAgQkI6ICcgJyxcbiAgQlc6ICfiloQnLFxuICBXVzogJ+KWiCcsXG4gIFdCOiAn4paAJ1xufVxuXG5mdW5jdGlvbiBnZXRCbG9ja0NoYXIgKHRvcCwgYm90dG9tLCBibG9ja3MpIHtcbiAgaWYgKHRvcCAmJiBib3R0b20pIHJldHVybiBibG9ja3MuQkJcbiAgaWYgKHRvcCAmJiAhYm90dG9tKSByZXR1cm4gYmxvY2tzLkJXXG4gIGlmICghdG9wICYmIGJvdHRvbSkgcmV0dXJuIGJsb2Nrcy5XQlxuICByZXR1cm4gYmxvY2tzLldXXG59XG5cbmV4cG9ydHMucmVuZGVyID0gZnVuY3Rpb24gKHFyRGF0YSwgb3B0aW9ucywgY2IpIHtcbiAgY29uc3Qgb3B0cyA9IFV0aWxzLmdldE9wdGlvbnMob3B0aW9ucylcbiAgbGV0IGJsb2NrcyA9IEJMT0NLX0NIQVJcbiAgaWYgKG9wdHMuY29sb3IuZGFyay5oZXggPT09ICcjZmZmZmZmJyB8fCBvcHRzLmNvbG9yLmxpZ2h0LmhleCA9PT0gJyMwMDAwMDAnKSB7XG4gICAgYmxvY2tzID0gSU5WRVJURURfQkxPQ0tfQ0hBUlxuICB9XG5cbiAgY29uc3Qgc2l6ZSA9IHFyRGF0YS5tb2R1bGVzLnNpemVcbiAgY29uc3QgZGF0YSA9IHFyRGF0YS5tb2R1bGVzLmRhdGFcblxuICBsZXQgb3V0cHV0ID0gJydcbiAgbGV0IGhNYXJnaW4gPSBBcnJheShzaXplICsgKG9wdHMubWFyZ2luICogMikgKyAxKS5qb2luKGJsb2Nrcy5XVylcbiAgaE1hcmdpbiA9IEFycmF5KChvcHRzLm1hcmdpbiAvIDIpICsgMSkuam9pbihoTWFyZ2luICsgJ1xcbicpXG5cbiAgY29uc3Qgdk1hcmdpbiA9IEFycmF5KG9wdHMubWFyZ2luICsgMSkuam9pbihibG9ja3MuV1cpXG5cbiAgb3V0cHV0ICs9IGhNYXJnaW5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaXplOyBpICs9IDIpIHtcbiAgICBvdXRwdXQgKz0gdk1hcmdpblxuICAgIGZvciAobGV0IGogPSAwOyBqIDwgc2l6ZTsgaisrKSB7XG4gICAgICBjb25zdCB0b3BNb2R1bGUgPSBkYXRhW2kgKiBzaXplICsgal1cbiAgICAgIGNvbnN0IGJvdHRvbU1vZHVsZSA9IGRhdGFbKGkgKyAxKSAqIHNpemUgKyBqXVxuXG4gICAgICBvdXRwdXQgKz0gZ2V0QmxvY2tDaGFyKHRvcE1vZHVsZSwgYm90dG9tTW9kdWxlLCBibG9ja3MpXG4gICAgfVxuXG4gICAgb3V0cHV0ICs9IHZNYXJnaW4gKyAnXFxuJ1xuICB9XG5cbiAgb3V0cHV0ICs9IGhNYXJnaW4uc2xpY2UoMCwgLTEpXG5cbiAgaWYgKHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiKG51bGwsIG91dHB1dClcbiAgfVxuXG4gIHJldHVybiBvdXRwdXRcbn1cblxuZXhwb3J0cy5yZW5kZXJUb0ZpbGUgPSBmdW5jdGlvbiByZW5kZXJUb0ZpbGUgKHBhdGgsIHFyRGF0YSwgb3B0aW9ucywgY2IpIHtcbiAgaWYgKHR5cGVvZiBjYiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjYiA9IG9wdGlvbnNcbiAgICBvcHRpb25zID0gdW5kZWZpbmVkXG4gIH1cblxuICBjb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJylcbiAgY29uc3QgdXRmOCA9IGV4cG9ydHMucmVuZGVyKHFyRGF0YSwgb3B0aW9ucylcbiAgZnMud3JpdGVGaWxlKHBhdGgsIHV0ZjgsIGNiKVxufVxuIl0sIm5hbWVzIjpbIlV0aWxzIiwicmVxdWlyZSIsIkJMT0NLX0NIQVIiLCJXVyIsIldCIiwiQkIiLCJCVyIsIklOVkVSVEVEX0JMT0NLX0NIQVIiLCJnZXRCbG9ja0NoYXIiLCJ0b3AiLCJib3R0b20iLCJibG9ja3MiLCJleHBvcnRzIiwicmVuZGVyIiwicXJEYXRhIiwib3B0aW9ucyIsImNiIiwib3B0cyIsImdldE9wdGlvbnMiLCJjb2xvciIsImRhcmsiLCJoZXgiLCJsaWdodCIsInNpemUiLCJtb2R1bGVzIiwiZGF0YSIsIm91dHB1dCIsImhNYXJnaW4iLCJBcnJheSIsIm1hcmdpbiIsImpvaW4iLCJ2TWFyZ2luIiwiaSIsImoiLCJ0b3BNb2R1bGUiLCJib3R0b21Nb2R1bGUiLCJzbGljZSIsInJlbmRlclRvRmlsZSIsInBhdGgiLCJ1bmRlZmluZWQiLCJmcyIsInV0ZjgiLCJ3cml0ZUZpbGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/renderer/utf8.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/renderer/utils.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/renderer/utils.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("function hex2rgba(hex) {\n    if (typeof hex === \"number\") {\n        hex = hex.toString();\n    }\n    if (typeof hex !== \"string\") {\n        throw new Error(\"Color should be defined as hex string\");\n    }\n    let hexCode = hex.slice().replace(\"#\", \"\").split(\"\");\n    if (hexCode.length < 3 || hexCode.length === 5 || hexCode.length > 8) {\n        throw new Error(\"Invalid hex color: \" + hex);\n    }\n    // Convert from short to long form (fff -> ffffff)\n    if (hexCode.length === 3 || hexCode.length === 4) {\n        hexCode = Array.prototype.concat.apply([], hexCode.map(function(c) {\n            return [\n                c,\n                c\n            ];\n        }));\n    }\n    // Add default alpha value\n    if (hexCode.length === 6) hexCode.push(\"F\", \"F\");\n    const hexValue = parseInt(hexCode.join(\"\"), 16);\n    return {\n        r: hexValue >> 24 & 255,\n        g: hexValue >> 16 & 255,\n        b: hexValue >> 8 & 255,\n        a: hexValue & 255,\n        hex: \"#\" + hexCode.slice(0, 6).join(\"\")\n    };\n}\nexports.getOptions = function getOptions(options) {\n    if (!options) options = {};\n    if (!options.color) options.color = {};\n    const margin = typeof options.margin === \"undefined\" || options.margin === null || options.margin < 0 ? 4 : options.margin;\n    const width = options.width && options.width >= 21 ? options.width : undefined;\n    const scale = options.scale || 4;\n    return {\n        width: width,\n        scale: width ? 4 : scale,\n        margin: margin,\n        color: {\n            dark: hex2rgba(options.color.dark || \"#000000ff\"),\n            light: hex2rgba(options.color.light || \"#ffffffff\")\n        },\n        type: options.type,\n        rendererOpts: options.rendererOpts || {}\n    };\n};\nexports.getScale = function getScale(qrSize, opts) {\n    return opts.width && opts.width >= qrSize + opts.margin * 2 ? opts.width / (qrSize + opts.margin * 2) : opts.scale;\n};\nexports.getImageWidth = function getImageWidth(qrSize, opts) {\n    const scale = exports.getScale(qrSize, opts);\n    return Math.floor((qrSize + opts.margin * 2) * scale);\n};\nexports.qrToImageData = function qrToImageData(imgData, qr, opts) {\n    const size = qr.modules.size;\n    const data = qr.modules.data;\n    const scale = exports.getScale(size, opts);\n    const symbolSize = Math.floor((size + opts.margin * 2) * scale);\n    const scaledMargin = opts.margin * scale;\n    const palette = [\n        opts.color.light,\n        opts.color.dark\n    ];\n    for(let i = 0; i < symbolSize; i++){\n        for(let j = 0; j < symbolSize; j++){\n            let posDst = (i * symbolSize + j) * 4;\n            let pxColor = opts.color.light;\n            if (i >= scaledMargin && j >= scaledMargin && i < symbolSize - scaledMargin && j < symbolSize - scaledMargin) {\n                const iSrc = Math.floor((i - scaledMargin) / scale);\n                const jSrc = Math.floor((j - scaledMargin) / scale);\n                pxColor = palette[data[iSrc * size + jSrc] ? 1 : 0];\n            }\n            imgData[posDst++] = pxColor.r;\n            imgData[posDst++] = pxColor.g;\n            imgData[posDst++] = pxColor.b;\n            imgData[posDst] = pxColor.a;\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/renderer/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/server.js":
/*!***************************************************************************!*\
  !*** ./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/server.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const canPromise = __webpack_require__(/*! ./can-promise */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/can-promise.js\");\nconst QRCode = __webpack_require__(/*! ./core/qrcode */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/core/qrcode.js\");\nconst PngRenderer = __webpack_require__(/*! ./renderer/png */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/renderer/png.js\");\nconst Utf8Renderer = __webpack_require__(/*! ./renderer/utf8 */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/renderer/utf8.js\");\nconst TerminalRenderer = __webpack_require__(/*! ./renderer/terminal */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/renderer/terminal.js\");\nconst SvgRenderer = __webpack_require__(/*! ./renderer/svg */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/renderer/svg.js\");\nfunction checkParams(text, opts, cb) {\n    if (typeof text === \"undefined\") {\n        throw new Error(\"String required as first argument\");\n    }\n    if (typeof cb === \"undefined\") {\n        cb = opts;\n        opts = {};\n    }\n    if (typeof cb !== \"function\") {\n        if (!canPromise()) {\n            throw new Error(\"Callback required as last argument\");\n        } else {\n            opts = cb || {};\n            cb = null;\n        }\n    }\n    return {\n        opts: opts,\n        cb: cb\n    };\n}\nfunction getTypeFromFilename(path) {\n    return path.slice((path.lastIndexOf(\".\") - 1 >>> 0) + 2).toLowerCase();\n}\nfunction getRendererFromType(type) {\n    switch(type){\n        case \"svg\":\n            return SvgRenderer;\n        case \"txt\":\n        case \"utf8\":\n            return Utf8Renderer;\n        case \"png\":\n        case \"image/png\":\n        default:\n            return PngRenderer;\n    }\n}\nfunction getStringRendererFromType(type) {\n    switch(type){\n        case \"svg\":\n            return SvgRenderer;\n        case \"terminal\":\n            return TerminalRenderer;\n        case \"utf8\":\n        default:\n            return Utf8Renderer;\n    }\n}\nfunction render(renderFunc, text, params) {\n    if (!params.cb) {\n        return new Promise(function(resolve, reject) {\n            try {\n                const data = QRCode.create(text, params.opts);\n                return renderFunc(data, params.opts, function(err, data) {\n                    return err ? reject(err) : resolve(data);\n                });\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n    try {\n        const data = QRCode.create(text, params.opts);\n        return renderFunc(data, params.opts, params.cb);\n    } catch (e) {\n        params.cb(e);\n    }\n}\nexports.create = QRCode.create;\nexports.toCanvas = __webpack_require__(/*! ./browser */ \"(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/browser.js\").toCanvas;\nexports.toString = function toString(text, opts, cb) {\n    const params = checkParams(text, opts, cb);\n    const type = params.opts ? params.opts.type : undefined;\n    const renderer = getStringRendererFromType(type);\n    return render(renderer.render, text, params);\n};\nexports.toDataURL = function toDataURL(text, opts, cb) {\n    const params = checkParams(text, opts, cb);\n    const renderer = getRendererFromType(params.opts.type);\n    return render(renderer.renderToDataURL, text, params);\n};\nexports.toBuffer = function toBuffer(text, opts, cb) {\n    const params = checkParams(text, opts, cb);\n    const renderer = getRendererFromType(params.opts.type);\n    return render(renderer.renderToBuffer, text, params);\n};\nexports.toFile = function toFile(path, text, opts, cb) {\n    if (typeof path !== \"string\" || !(typeof text === \"string\" || typeof text === \"object\")) {\n        throw new Error(\"Invalid argument\");\n    }\n    if (arguments.length < 3 && !canPromise()) {\n        throw new Error(\"Too few arguments provided\");\n    }\n    const params = checkParams(text, opts, cb);\n    const type = params.opts.type || getTypeFromFilename(path);\n    const renderer = getRendererFromType(type);\n    const renderToFile = renderer.renderToFile.bind(null, path);\n    return render(renderToFile, text, params);\n};\nexports.toFileStream = function toFileStream(stream, text, opts) {\n    if (arguments.length < 2) {\n        throw new Error(\"Too few arguments provided\");\n    }\n    const params = checkParams(text, opts, stream.emit.bind(stream, \"error\"));\n    const renderer = getRendererFromType(\"png\") // Only png support for now\n    ;\n    const renderToFileStream = renderer.renderToFileStream.bind(null, stream);\n    render(renderToFileStream, text, params);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/qrcode@1.5.3/node_modules/qrcode/lib/server.js\n");

/***/ })

};
;