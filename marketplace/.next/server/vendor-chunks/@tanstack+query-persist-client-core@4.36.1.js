"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@tanstack+query-persist-client-core@4.36.1";
exports.ids = ["vendor-chunks/@tanstack+query-persist-client-core@4.36.1"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@tanstack+query-persist-client-core@4.36.1/node_modules/@tanstack/query-persist-client-core/build/lib/persist.mjs":
/*!**********************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@tanstack+query-persist-client-core@4.36.1/node_modules/@tanstack/query-persist-client-core/build/lib/persist.mjs ***!
  \**********************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   persistQueryClient: () => (/* binding */ persistQueryClient),\n/* harmony export */   persistQueryClientRestore: () => (/* binding */ persistQueryClientRestore),\n/* harmony export */   persistQueryClientSave: () => (/* binding */ persistQueryClientSave),\n/* harmony export */   persistQueryClientSubscribe: () => (/* binding */ persistQueryClientSubscribe)\n/* harmony export */ });\n/* harmony import */ var _tanstack_query_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tanstack/query-core */ \"(ssr)/./node_modules/.pnpm/@tanstack+query-core@4.36.1/node_modules/@tanstack/query-core/build/lib/hydration.mjs\");\n\n/**\n * Checks if emitted event is about cache change and not about observers.\n * Useful for persist, where we only want to trigger save when cache is changed.\n */ const cacheableEventTypes = [\n    \"added\",\n    \"removed\",\n    \"updated\"\n];\nfunction isCacheableEventType(eventType) {\n    return cacheableEventTypes.includes(eventType);\n}\n/**\n * Restores persisted data to the QueryCache\n *  - data obtained from persister.restoreClient\n *  - data is hydrated using hydrateOptions\n * If data is expired, busted, empty, or throws, it runs persister.removeClient\n */ async function persistQueryClientRestore({ queryClient, persister, maxAge = 1000 * 60 * 60 * 24, buster = \"\", hydrateOptions }) {\n    try {\n        const persistedClient = await persister.restoreClient();\n        if (persistedClient) {\n            if (persistedClient.timestamp) {\n                const expired = Date.now() - persistedClient.timestamp > maxAge;\n                const busted = persistedClient.buster !== buster;\n                if (expired || busted) {\n                    persister.removeClient();\n                } else {\n                    (0,_tanstack_query_core__WEBPACK_IMPORTED_MODULE_0__.hydrate)(queryClient, persistedClient.clientState, hydrateOptions);\n                }\n            } else {\n                persister.removeClient();\n            }\n        }\n    } catch (err) {\n        if (true) {\n            queryClient.getLogger().error(err);\n            queryClient.getLogger().warn(\"Encountered an error attempting to restore client cache from persisted location. As a precaution, the persisted cache will be discarded.\");\n        }\n        persister.removeClient();\n    }\n}\n/**\n * Persists data from the QueryCache\n *  - data dehydrated using dehydrateOptions\n *  - data is persisted using persister.persistClient\n */ async function persistQueryClientSave({ queryClient, persister, buster = \"\", dehydrateOptions }) {\n    const persistClient = {\n        buster,\n        timestamp: Date.now(),\n        clientState: (0,_tanstack_query_core__WEBPACK_IMPORTED_MODULE_0__.dehydrate)(queryClient, dehydrateOptions)\n    };\n    await persister.persistClient(persistClient);\n}\n/**\n * Subscribe to QueryCache and MutationCache updates (for persisting)\n * @returns an unsubscribe function (to discontinue monitoring)\n */ function persistQueryClientSubscribe(props) {\n    const unsubscribeQueryCache = props.queryClient.getQueryCache().subscribe((event)=>{\n        if (isCacheableEventType(event.type)) {\n            persistQueryClientSave(props);\n        }\n    });\n    const unusbscribeMutationCache = props.queryClient.getMutationCache().subscribe((event)=>{\n        if (isCacheableEventType(event.type)) {\n            persistQueryClientSave(props);\n        }\n    });\n    return ()=>{\n        unsubscribeQueryCache();\n        unusbscribeMutationCache();\n    };\n}\n/**\n * Restores persisted data to QueryCache and persists further changes.\n */ function persistQueryClient(props) {\n    let hasUnsubscribed = false;\n    let persistQueryClientUnsubscribe;\n    const unsubscribe = ()=>{\n        hasUnsubscribed = true;\n        persistQueryClientUnsubscribe == null ? void 0 : persistQueryClientUnsubscribe();\n    }; // Attempt restore\n    const restorePromise = persistQueryClientRestore(props).then(()=>{\n        if (!hasUnsubscribed) {\n            // Subscribe to changes in the query cache to trigger the save\n            persistQueryClientUnsubscribe = persistQueryClientSubscribe(props);\n        }\n    });\n    return [\n        unsubscribe,\n        restorePromise\n    ];\n}\n //# sourceMappingURL=persist.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@tanstack+query-persist-client-core@4.36.1/node_modules/@tanstack/query-persist-client-core/build/lib/persist.mjs\n");

/***/ })

};
;