"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@walletconnect+legacy-provider@2.0.0";
exports.ids = ["vendor-chunks/@walletconnect+legacy-provider@2.0.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@walletconnect+legacy-provider@2.0.0/node_modules/@walletconnect/legacy-provider/dist/cjs/index.js":
/*!*******************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@walletconnect+legacy-provider@2.0.0/node_modules/@walletconnect/legacy-provider/dist/cjs/index.js ***!
  \*******************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/.pnpm/tslib@2.6.2/node_modules/tslib/tslib.es6.mjs\");\nconst events_1 = tslib_1.__importDefault(__webpack_require__(/*! events */ \"events\"));\nconst jsonrpc_provider_1 = __webpack_require__(/*! @walletconnect/jsonrpc-provider */ \"(ssr)/./node_modules/.pnpm/@walletconnect+jsonrpc-provider@1.0.13/node_modules/@walletconnect/jsonrpc-provider/dist/esm/index.js\");\nconst jsonrpc_http_connection_1 = __webpack_require__(/*! @walletconnect/jsonrpc-http-connection */ \"(ssr)/./node_modules/.pnpm/@walletconnect+jsonrpc-http-connection@1.0.7/node_modules/@walletconnect/jsonrpc-http-connection/dist/esm/index.js\");\nconst legacy_types_1 = __webpack_require__(/*! @walletconnect/legacy-types */ \"(ssr)/./node_modules/.pnpm/@walletconnect+legacy-types@2.0.0/node_modules/@walletconnect/legacy-types/dist/cjs/index.js\");\nconst legacy_utils_1 = __webpack_require__(/*! @walletconnect/legacy-utils */ \"(ssr)/./node_modules/.pnpm/@walletconnect+legacy-utils@2.0.0/node_modules/@walletconnect/legacy-utils/dist/cjs/index.js\");\nconst signer_1 = __webpack_require__(/*! ./signer */ \"(ssr)/./node_modules/.pnpm/@walletconnect+legacy-provider@2.0.0/node_modules/@walletconnect/legacy-provider/dist/cjs/signer.js\");\nclass WalletConnectProvider {\n    constructor(opts){\n        this.events = new events_1.default();\n        this.rpc = {\n            infuraId: opts === null || opts === void 0 ? void 0 : opts.infuraId,\n            custom: opts === null || opts === void 0 ? void 0 : opts.rpc\n        };\n        this.signer = new jsonrpc_provider_1.JsonRpcProvider(new signer_1.SignerConnection(opts));\n        const chainId = this.signer.connection.chainId || (opts === null || opts === void 0 ? void 0 : opts.chainId) || 1;\n        this.http = this.setHttpProvider(chainId);\n        this.registerEventListeners();\n    }\n    get connected() {\n        return this.signer.connection.connected;\n    }\n    get connector() {\n        return this.signer.connection.connector;\n    }\n    get accounts() {\n        return this.signer.connection.accounts;\n    }\n    get chainId() {\n        return this.signer.connection.chainId;\n    }\n    get rpcUrl() {\n        var _a;\n        return ((_a = this.http) === null || _a === void 0 ? void 0 : _a.connection).url || \"\";\n    }\n    request(args) {\n        return tslib_1.__awaiter(this, void 0, void 0, function*() {\n            switch(args.method){\n                case \"eth_requestAccounts\":\n                    yield this.connect();\n                    return this.signer.connection.accounts;\n                case \"eth_accounts\":\n                    return this.signer.connection.accounts;\n                case \"eth_chainId\":\n                    return this.signer.connection.chainId;\n                default:\n                    break;\n            }\n            if (legacy_types_1.SIGNING_METHODS.includes(args.method)) {\n                return this.signer.request(args);\n            }\n            if (typeof this.http === \"undefined\") {\n                throw new Error(`Cannot request JSON-RPC method (${args.method}) without provided rpc url`);\n            }\n            return this.http.request(args);\n        });\n    }\n    sendAsync(args, callback) {\n        this.request(args).then((response)=>callback(null, response)).catch((error)=>callback(error, undefined));\n    }\n    enable() {\n        return tslib_1.__awaiter(this, void 0, void 0, function*() {\n            const accounts = yield this.request({\n                method: \"eth_requestAccounts\"\n            });\n            return accounts;\n        });\n    }\n    connect() {\n        return tslib_1.__awaiter(this, void 0, void 0, function*() {\n            if (!this.signer.connection.connected) {\n                yield this.signer.connect();\n            }\n        });\n    }\n    disconnect() {\n        return tslib_1.__awaiter(this, void 0, void 0, function*() {\n            if (this.signer.connection.connected) {\n                yield this.signer.disconnect();\n            }\n        });\n    }\n    on(event, listener) {\n        this.events.on(event, listener);\n    }\n    once(event, listener) {\n        this.events.once(event, listener);\n    }\n    removeListener(event, listener) {\n        this.events.removeListener(event, listener);\n    }\n    off(event, listener) {\n        this.events.off(event, listener);\n    }\n    get isWalletConnect() {\n        return true;\n    }\n    registerEventListeners() {\n        this.signer.connection.on(\"accountsChanged\", (accounts)=>{\n            this.events.emit(\"accountsChanged\", accounts);\n        });\n        this.signer.connection.on(\"chainChanged\", (chainId)=>{\n            this.http = this.setHttpProvider(chainId);\n            this.events.emit(\"chainChanged\", chainId);\n        });\n        this.signer.on(\"disconnect\", ()=>{\n            this.events.emit(\"disconnect\");\n        });\n    }\n    setHttpProvider(chainId) {\n        const rpcUrl = legacy_utils_1.getRpcUrl(chainId, this.rpc);\n        if (typeof rpcUrl === \"undefined\") return undefined;\n        const http = new jsonrpc_provider_1.JsonRpcProvider(new jsonrpc_http_connection_1.HttpConnection(rpcUrl));\n        return http;\n    }\n}\nexports[\"default\"] = WalletConnectProvider; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@walletconnect+legacy-provider@2.0.0/node_modules/@walletconnect/legacy-provider/dist/cjs/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@walletconnect+legacy-provider@2.0.0/node_modules/@walletconnect/legacy-provider/dist/cjs/signer.js":
/*!********************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@walletconnect+legacy-provider@2.0.0/node_modules/@walletconnect/legacy-provider/dist/cjs/signer.js ***!
  \********************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.SignerConnection = void 0;\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/.pnpm/tslib@2.6.2/node_modules/tslib/tslib.es6.mjs\");\nconst events_1 = tslib_1.__importDefault(__webpack_require__(/*! events */ \"events\"));\nconst legacy_client_1 = tslib_1.__importDefault(__webpack_require__(/*! @walletconnect/legacy-client */ \"(ssr)/./node_modules/.pnpm/@walletconnect+legacy-client@2.0.0/node_modules/@walletconnect/legacy-client/dist/cjs/index.js\"));\nconst legacy_modal_1 = tslib_1.__importDefault(__webpack_require__(/*! @walletconnect/legacy-modal */ \"(ssr)/./node_modules/.pnpm/@walletconnect+legacy-modal@2.0.0/node_modules/@walletconnect/legacy-modal/dist/cjs/index.js\"));\nconst jsonrpc_types_1 = __webpack_require__(/*! @walletconnect/jsonrpc-types */ \"(ssr)/./node_modules/.pnpm/@walletconnect+jsonrpc-types@1.0.3/node_modules/@walletconnect/jsonrpc-types/dist/esm/index.js\");\nconst jsonrpc_utils_1 = __webpack_require__(/*! @walletconnect/jsonrpc-utils */ \"(ssr)/./node_modules/.pnpm/@walletconnect+jsonrpc-utils@1.0.8/node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js\");\nclass SignerConnection extends jsonrpc_types_1.IJsonRpcConnection {\n    constructor(opts){\n        super();\n        this.events = new events_1.default();\n        this.accounts = [];\n        this.chainId = 1;\n        this.pending = false;\n        this.bridge = \"https://bridge.walletconnect.org\";\n        this.qrcode = true;\n        this.qrcodeModalOptions = undefined;\n        this.opts = opts;\n        this.chainId = (opts === null || opts === void 0 ? void 0 : opts.chainId) || this.chainId;\n        this.wc = this.register(opts);\n    }\n    get connected() {\n        return typeof this.wc !== \"undefined\" && this.wc.connected;\n    }\n    get connecting() {\n        return this.pending;\n    }\n    get connector() {\n        this.wc = this.register(this.opts);\n        return this.wc;\n    }\n    on(event, listener) {\n        this.events.on(event, listener);\n    }\n    once(event, listener) {\n        this.events.once(event, listener);\n    }\n    off(event, listener) {\n        this.events.off(event, listener);\n    }\n    removeListener(event, listener) {\n        this.events.removeListener(event, listener);\n    }\n    open(chainId) {\n        return tslib_1.__awaiter(this, void 0, void 0, function*() {\n            if (this.connected) {\n                this.onOpen();\n                return;\n            }\n            return new Promise((resolve, reject)=>{\n                this.on(\"error\", (err)=>{\n                    reject(err);\n                });\n                this.on(\"open\", ()=>{\n                    resolve();\n                });\n                this.create(chainId);\n            });\n        });\n    }\n    close() {\n        return tslib_1.__awaiter(this, void 0, void 0, function*() {\n            if (typeof this.wc === \"undefined\") return;\n            if (this.wc.connected) {\n                this.wc.killSession();\n            }\n            this.onClose();\n        });\n    }\n    send(payload) {\n        return tslib_1.__awaiter(this, void 0, void 0, function*() {\n            this.wc = this.register(this.opts);\n            if (!this.connected) yield this.open();\n            this.sendPayload(payload).then((res)=>this.events.emit(\"payload\", res)).catch((e)=>this.events.emit(\"payload\", jsonrpc_utils_1.formatJsonRpcError(payload.id, e.message)));\n        });\n    }\n    register(opts) {\n        if (this.wc) return this.wc;\n        this.opts = opts || this.opts;\n        this.bridge = (opts === null || opts === void 0 ? void 0 : opts.connector) ? opts.connector.bridge : (opts === null || opts === void 0 ? void 0 : opts.bridge) || \"https://bridge.walletconnect.org\";\n        this.qrcode = typeof (opts === null || opts === void 0 ? void 0 : opts.qrcode) === \"undefined\" || opts.qrcode !== false;\n        this.chainId = typeof (opts === null || opts === void 0 ? void 0 : opts.chainId) !== \"undefined\" ? opts.chainId : this.chainId;\n        this.qrcodeModalOptions = opts === null || opts === void 0 ? void 0 : opts.qrcodeModalOptions;\n        const connectorOpts = {\n            bridge: this.bridge,\n            qrcodeModal: this.qrcode ? legacy_modal_1.default : undefined,\n            qrcodeModalOptions: this.qrcodeModalOptions,\n            storageId: opts === null || opts === void 0 ? void 0 : opts.storageId,\n            signingMethods: opts === null || opts === void 0 ? void 0 : opts.signingMethods,\n            clientMeta: opts === null || opts === void 0 ? void 0 : opts.clientMeta\n        };\n        this.wc = typeof (opts === null || opts === void 0 ? void 0 : opts.connector) !== \"undefined\" ? opts.connector : new legacy_client_1.default(connectorOpts);\n        if (typeof this.wc === \"undefined\") {\n            throw new Error(\"Failed to register WalletConnect connector\");\n        }\n        if (this.wc.accounts.length) {\n            this.accounts = this.wc.accounts;\n        }\n        if (this.wc.chainId) {\n            this.chainId = this.wc.chainId;\n        }\n        this.registerConnectorEvents();\n        return this.wc;\n    }\n    onOpen(wc) {\n        this.pending = false;\n        if (wc) {\n            this.wc = wc;\n        }\n        this.events.emit(\"open\");\n    }\n    onClose() {\n        this.pending = false;\n        if (this.wc) {\n            this.wc = undefined;\n        }\n        this.events.emit(\"close\");\n    }\n    onError(payload, message = \"Failed or Rejected Request\", code = -32000) {\n        const errorPayload = {\n            id: payload.id,\n            jsonrpc: payload.jsonrpc,\n            error: {\n                code,\n                message\n            }\n        };\n        this.events.emit(\"payload\", errorPayload);\n        return errorPayload;\n    }\n    create(chainId) {\n        this.wc = this.register(this.opts);\n        this.chainId = chainId || this.chainId;\n        if (this.connected || this.pending) return;\n        this.pending = true;\n        this.registerConnectorEvents();\n        this.wc.createSession({\n            chainId: this.chainId\n        }).then(()=>this.events.emit(\"created\")).catch((e)=>this.events.emit(\"error\", e));\n    }\n    registerConnectorEvents() {\n        this.wc = this.register(this.opts);\n        this.wc.on(\"connect\", (err)=>{\n            var _a, _b;\n            if (err) {\n                this.events.emit(\"error\", err);\n                return;\n            }\n            this.accounts = ((_a = this.wc) === null || _a === void 0 ? void 0 : _a.accounts) || [];\n            this.chainId = ((_b = this.wc) === null || _b === void 0 ? void 0 : _b.chainId) || this.chainId;\n            this.onOpen();\n        });\n        this.wc.on(\"disconnect\", (err)=>{\n            if (err) {\n                this.events.emit(\"error\", err);\n                return;\n            }\n            this.onClose();\n        });\n        this.wc.on(\"modal_closed\", ()=>{\n            this.events.emit(\"error\", new Error(\"User closed modal\"));\n        });\n        this.wc.on(\"session_update\", (error, payload)=>{\n            const { accounts, chainId } = payload.params[0];\n            if (!this.accounts || accounts && this.accounts !== accounts) {\n                this.accounts = accounts;\n                this.events.emit(\"accountsChanged\", accounts);\n            }\n            if (!this.chainId || chainId && this.chainId !== chainId) {\n                this.chainId = chainId;\n                this.events.emit(\"chainChanged\", chainId);\n            }\n        });\n    }\n    sendPayload(payload) {\n        return tslib_1.__awaiter(this, void 0, void 0, function*() {\n            this.wc = this.register(this.opts);\n            try {\n                const response = yield this.wc.unsafeSend(payload);\n                return this.sanitizeResponse(response);\n            } catch (error) {\n                return this.onError(payload, error.message);\n            }\n        });\n    }\n    sanitizeResponse(response) {\n        return typeof response.error !== \"undefined\" && typeof response.error.code === \"undefined\" ? jsonrpc_utils_1.formatJsonRpcError(response.id, response.error.message, response.error.data) : response;\n    }\n}\nexports.SignerConnection = SignerConnection;\nexports[\"default\"] = SignerConnection; //# sourceMappingURL=signer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@walletconnect+legacy-provider@2.0.0/node_modules/@walletconnect/legacy-provider/dist/cjs/signer.js\n");

/***/ })

};
;