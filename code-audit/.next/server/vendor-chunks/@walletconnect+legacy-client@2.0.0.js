"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@walletconnect+legacy-client@2.0.0";
exports.ids = ["vendor-chunks/@walletconnect+legacy-client@2.0.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@walletconnect+legacy-client@2.0.0/node_modules/@walletconnect/legacy-client/dist/cjs/core.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@walletconnect+legacy-client@2.0.0/node_modules/@walletconnect/legacy-client/dist/cjs/core.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/.pnpm/tslib@2.6.2/node_modules/tslib/tslib.es6.mjs\");\nconst legacy_types_1 = __webpack_require__(/*! @walletconnect/legacy-types */ \"(ssr)/./node_modules/.pnpm/@walletconnect+legacy-types@2.0.0/node_modules/@walletconnect/legacy-types/dist/cjs/index.js\");\nconst legacy_utils_1 = __webpack_require__(/*! @walletconnect/legacy-utils */ \"(ssr)/./node_modules/.pnpm/@walletconnect+legacy-utils@2.0.0/node_modules/@walletconnect/legacy-utils/dist/cjs/index.js\");\nconst socket_1 = tslib_1.__importDefault(__webpack_require__(/*! ./socket */ \"(ssr)/./node_modules/.pnpm/@walletconnect+legacy-client@2.0.0/node_modules/@walletconnect/legacy-client/dist/cjs/socket.js\"));\nconst events_1 = tslib_1.__importDefault(__webpack_require__(/*! ./events */ \"(ssr)/./node_modules/.pnpm/@walletconnect+legacy-client@2.0.0/node_modules/@walletconnect/legacy-client/dist/cjs/events.js\"));\nconst storage_1 = tslib_1.__importDefault(__webpack_require__(/*! ./storage */ \"(ssr)/./node_modules/.pnpm/@walletconnect+legacy-client@2.0.0/node_modules/@walletconnect/legacy-client/dist/cjs/storage.js\"));\nconst url_1 = __webpack_require__(/*! ./url */ \"(ssr)/./node_modules/.pnpm/@walletconnect+legacy-client@2.0.0/node_modules/@walletconnect/legacy-client/dist/cjs/url.js\");\nclass Connector {\n    constructor(opts){\n        this.protocol = \"wc\";\n        this.version = 1;\n        this._bridge = \"\";\n        this._key = null;\n        this._clientId = \"\";\n        this._clientMeta = null;\n        this._peerId = \"\";\n        this._peerMeta = null;\n        this._handshakeId = 0;\n        this._handshakeTopic = \"\";\n        this._connected = false;\n        this._accounts = [];\n        this._chainId = 0;\n        this._networkId = 0;\n        this._rpcUrl = \"\";\n        this._eventManager = new events_1.default();\n        this._clientMeta = legacy_utils_1.getClientMeta() || opts.connectorOpts.clientMeta || null;\n        this._cryptoLib = opts.cryptoLib;\n        this._sessionStorage = opts.sessionStorage || new storage_1.default(opts.connectorOpts.storageId);\n        this._qrcodeModal = opts.connectorOpts.qrcodeModal;\n        this._qrcodeModalOptions = opts.connectorOpts.qrcodeModalOptions;\n        this._signingMethods = [\n            ...legacy_types_1.SIGNING_METHODS,\n            ...opts.connectorOpts.signingMethods || []\n        ];\n        if (!opts.connectorOpts.bridge && !opts.connectorOpts.uri && !opts.connectorOpts.session) {\n            throw new Error(legacy_types_1.ERROR_MISSING_REQUIRED);\n        }\n        if (opts.connectorOpts.bridge) {\n            this.bridge = url_1.getBridgeUrl(opts.connectorOpts.bridge);\n        }\n        if (opts.connectorOpts.uri) {\n            this.uri = opts.connectorOpts.uri;\n        }\n        const session = opts.connectorOpts.session || this._getStorageSession();\n        if (session) {\n            this.session = session;\n        }\n        if (this.handshakeId) {\n            this._subscribeToSessionResponse(this.handshakeId, \"Session request rejected\");\n        }\n        this._transport = opts.transport || new socket_1.default({\n            protocol: this.protocol,\n            version: this.version,\n            url: this.bridge,\n            subscriptions: [\n                this.clientId\n            ]\n        });\n        this._subscribeToInternalEvents();\n        this._initTransport();\n        if (opts.connectorOpts.uri) {\n            this._subscribeToSessionRequest();\n        }\n        if (opts.pushServerOpts) {\n            this._registerPushServer(opts.pushServerOpts);\n        }\n    }\n    set bridge(value) {\n        if (!value) {\n            return;\n        }\n        this._bridge = value;\n    }\n    get bridge() {\n        return this._bridge;\n    }\n    set key(value) {\n        if (!value) {\n            return;\n        }\n        const key = legacy_utils_1.convertHexToArrayBuffer(value);\n        this._key = key;\n    }\n    get key() {\n        if (this._key) {\n            const key = legacy_utils_1.convertArrayBufferToHex(this._key, true);\n            return key;\n        }\n        return \"\";\n    }\n    set clientId(value) {\n        if (!value) {\n            return;\n        }\n        this._clientId = value;\n    }\n    get clientId() {\n        let clientId = this._clientId;\n        if (!clientId) {\n            clientId = this._clientId = legacy_utils_1.uuid();\n        }\n        return this._clientId;\n    }\n    set peerId(value) {\n        if (!value) {\n            return;\n        }\n        this._peerId = value;\n    }\n    get peerId() {\n        return this._peerId;\n    }\n    set clientMeta(value) {}\n    get clientMeta() {\n        let clientMeta = this._clientMeta;\n        if (!clientMeta) {\n            clientMeta = this._clientMeta = legacy_utils_1.getClientMeta();\n        }\n        return clientMeta;\n    }\n    set peerMeta(value) {\n        this._peerMeta = value;\n    }\n    get peerMeta() {\n        const peerMeta = this._peerMeta;\n        return peerMeta;\n    }\n    set handshakeTopic(value) {\n        if (!value) {\n            return;\n        }\n        this._handshakeTopic = value;\n    }\n    get handshakeTopic() {\n        return this._handshakeTopic;\n    }\n    set handshakeId(value) {\n        if (!value) {\n            return;\n        }\n        this._handshakeId = value;\n    }\n    get handshakeId() {\n        return this._handshakeId;\n    }\n    get uri() {\n        const _uri = this._formatUri();\n        return _uri;\n    }\n    set uri(value) {\n        if (!value) {\n            return;\n        }\n        const { handshakeTopic, bridge, key } = this._parseUri(value);\n        this.handshakeTopic = handshakeTopic;\n        this.bridge = bridge;\n        this.key = key;\n    }\n    set chainId(value) {\n        this._chainId = value;\n    }\n    get chainId() {\n        const chainId = this._chainId;\n        return chainId;\n    }\n    set networkId(value) {\n        this._networkId = value;\n    }\n    get networkId() {\n        const networkId = this._networkId;\n        return networkId;\n    }\n    set accounts(value) {\n        this._accounts = value;\n    }\n    get accounts() {\n        const accounts = this._accounts;\n        return accounts;\n    }\n    set rpcUrl(value) {\n        this._rpcUrl = value;\n    }\n    get rpcUrl() {\n        const rpcUrl = this._rpcUrl;\n        return rpcUrl;\n    }\n    set connected(value) {}\n    get connected() {\n        return this._connected;\n    }\n    set pending(value) {}\n    get pending() {\n        return !!this._handshakeTopic;\n    }\n    get session() {\n        return {\n            connected: this.connected,\n            accounts: this.accounts,\n            chainId: this.chainId,\n            bridge: this.bridge,\n            key: this.key,\n            clientId: this.clientId,\n            clientMeta: this.clientMeta,\n            peerId: this.peerId,\n            peerMeta: this.peerMeta,\n            handshakeId: this.handshakeId,\n            handshakeTopic: this.handshakeTopic\n        };\n    }\n    set session(value) {\n        if (!value) {\n            return;\n        }\n        this._connected = value.connected;\n        this.accounts = value.accounts;\n        this.chainId = value.chainId;\n        this.bridge = value.bridge;\n        this.key = value.key;\n        this.clientId = value.clientId;\n        this.clientMeta = value.clientMeta;\n        this.peerId = value.peerId;\n        this.peerMeta = value.peerMeta;\n        this.handshakeId = value.handshakeId;\n        this.handshakeTopic = value.handshakeTopic;\n    }\n    on(event, callback) {\n        const eventEmitter = {\n            event,\n            callback\n        };\n        this._eventManager.subscribe(eventEmitter);\n    }\n    off(event) {\n        this._eventManager.unsubscribe(event);\n    }\n    createInstantRequest(instantRequest) {\n        return tslib_1.__awaiter(this, void 0, void 0, function*() {\n            this._key = yield this._generateKey();\n            const request = this._formatRequest({\n                method: \"wc_instantRequest\",\n                params: [\n                    {\n                        peerId: this.clientId,\n                        peerMeta: this.clientMeta,\n                        request: this._formatRequest(instantRequest)\n                    }\n                ]\n            });\n            this.handshakeId = request.id;\n            this.handshakeTopic = legacy_utils_1.uuid();\n            this._eventManager.trigger({\n                event: \"display_uri\",\n                params: [\n                    this.uri\n                ]\n            });\n            this.on(\"modal_closed\", ()=>{\n                throw new Error(legacy_types_1.ERROR_QRCODE_MODAL_USER_CLOSED);\n            });\n            const endInstantRequest = ()=>{\n                this.killSession();\n            };\n            try {\n                const result = yield this._sendCallRequest(request);\n                if (result) {\n                    endInstantRequest();\n                }\n                return result;\n            } catch (error) {\n                endInstantRequest();\n                throw error;\n            }\n        });\n    }\n    connect(opts) {\n        return tslib_1.__awaiter(this, void 0, void 0, function*() {\n            if (!this._qrcodeModal) {\n                throw new Error(legacy_types_1.ERROR_QRCODE_MODAL_NOT_PROVIDED);\n            }\n            if (this.connected) {\n                return {\n                    chainId: this.chainId,\n                    accounts: this.accounts\n                };\n            }\n            yield this.createSession(opts);\n            return new Promise((resolve, reject)=>tslib_1.__awaiter(this, void 0, void 0, function*() {\n                    this.on(\"modal_closed\", ()=>reject(new Error(legacy_types_1.ERROR_QRCODE_MODAL_USER_CLOSED)));\n                    this.on(\"connect\", (error, payload)=>{\n                        if (error) {\n                            return reject(error);\n                        }\n                        resolve(payload.params[0]);\n                    });\n                }));\n        });\n    }\n    createSession(opts) {\n        return tslib_1.__awaiter(this, void 0, void 0, function*() {\n            if (this._connected) {\n                throw new Error(legacy_types_1.ERROR_SESSION_CONNECTED);\n            }\n            if (this.pending) {\n                return;\n            }\n            this._key = yield this._generateKey();\n            const request = this._formatRequest({\n                method: \"wc_sessionRequest\",\n                params: [\n                    {\n                        peerId: this.clientId,\n                        peerMeta: this.clientMeta,\n                        chainId: opts && opts.chainId ? opts.chainId : null\n                    }\n                ]\n            });\n            this.handshakeId = request.id;\n            this.handshakeTopic = legacy_utils_1.uuid();\n            this._sendSessionRequest(request, \"Session update rejected\", {\n                topic: this.handshakeTopic\n            });\n            this._eventManager.trigger({\n                event: \"display_uri\",\n                params: [\n                    this.uri\n                ]\n            });\n        });\n    }\n    approveSession(sessionStatus) {\n        if (this._connected) {\n            throw new Error(legacy_types_1.ERROR_SESSION_CONNECTED);\n        }\n        this.chainId = sessionStatus.chainId;\n        this.accounts = sessionStatus.accounts;\n        this.networkId = sessionStatus.networkId || 0;\n        this.rpcUrl = sessionStatus.rpcUrl || \"\";\n        const sessionParams = {\n            approved: true,\n            chainId: this.chainId,\n            networkId: this.networkId,\n            accounts: this.accounts,\n            rpcUrl: this.rpcUrl,\n            peerId: this.clientId,\n            peerMeta: this.clientMeta\n        };\n        const response = {\n            id: this.handshakeId,\n            jsonrpc: \"2.0\",\n            result: sessionParams\n        };\n        this._sendResponse(response);\n        this._connected = true;\n        this._setStorageSession();\n        this._eventManager.trigger({\n            event: \"connect\",\n            params: [\n                {\n                    peerId: this.peerId,\n                    peerMeta: this.peerMeta,\n                    chainId: this.chainId,\n                    accounts: this.accounts\n                }\n            ]\n        });\n    }\n    rejectSession(sessionError) {\n        if (this._connected) {\n            throw new Error(legacy_types_1.ERROR_SESSION_CONNECTED);\n        }\n        const message = sessionError && sessionError.message ? sessionError.message : legacy_types_1.ERROR_SESSION_REJECTED;\n        const response = this._formatResponse({\n            id: this.handshakeId,\n            error: {\n                message\n            }\n        });\n        this._sendResponse(response);\n        this._connected = false;\n        this._eventManager.trigger({\n            event: \"disconnect\",\n            params: [\n                {\n                    message\n                }\n            ]\n        });\n        this._removeStorageSession();\n    }\n    updateSession(sessionStatus) {\n        if (!this._connected) {\n            throw new Error(legacy_types_1.ERROR_SESSION_DISCONNECTED);\n        }\n        this.chainId = sessionStatus.chainId;\n        this.accounts = sessionStatus.accounts;\n        this.networkId = sessionStatus.networkId || 0;\n        this.rpcUrl = sessionStatus.rpcUrl || \"\";\n        const sessionParams = {\n            approved: true,\n            chainId: this.chainId,\n            networkId: this.networkId,\n            accounts: this.accounts,\n            rpcUrl: this.rpcUrl\n        };\n        const request = this._formatRequest({\n            method: \"wc_sessionUpdate\",\n            params: [\n                sessionParams\n            ]\n        });\n        this._sendSessionRequest(request, \"Session update rejected\");\n        this._eventManager.trigger({\n            event: \"session_update\",\n            params: [\n                {\n                    chainId: this.chainId,\n                    accounts: this.accounts\n                }\n            ]\n        });\n        this._manageStorageSession();\n    }\n    killSession(sessionError) {\n        return tslib_1.__awaiter(this, void 0, void 0, function*() {\n            const message = sessionError ? sessionError.message : \"Session Disconnected\";\n            const sessionParams = {\n                approved: false,\n                chainId: null,\n                networkId: null,\n                accounts: null\n            };\n            const request = this._formatRequest({\n                method: \"wc_sessionUpdate\",\n                params: [\n                    sessionParams\n                ]\n            });\n            yield this._sendRequest(request);\n            this._handleSessionDisconnect(message);\n        });\n    }\n    sendTransaction(tx) {\n        return tslib_1.__awaiter(this, void 0, void 0, function*() {\n            if (!this._connected) {\n                throw new Error(legacy_types_1.ERROR_SESSION_DISCONNECTED);\n            }\n            const parsedTx = tx;\n            const request = this._formatRequest({\n                method: \"eth_sendTransaction\",\n                params: [\n                    parsedTx\n                ]\n            });\n            const result = yield this._sendCallRequest(request);\n            return result;\n        });\n    }\n    signTransaction(tx) {\n        return tslib_1.__awaiter(this, void 0, void 0, function*() {\n            if (!this._connected) {\n                throw new Error(legacy_types_1.ERROR_SESSION_DISCONNECTED);\n            }\n            const parsedTx = tx;\n            const request = this._formatRequest({\n                method: \"eth_signTransaction\",\n                params: [\n                    parsedTx\n                ]\n            });\n            const result = yield this._sendCallRequest(request);\n            return result;\n        });\n    }\n    signMessage(params) {\n        return tslib_1.__awaiter(this, void 0, void 0, function*() {\n            if (!this._connected) {\n                throw new Error(legacy_types_1.ERROR_SESSION_DISCONNECTED);\n            }\n            const request = this._formatRequest({\n                method: \"eth_sign\",\n                params\n            });\n            const result = yield this._sendCallRequest(request);\n            return result;\n        });\n    }\n    signPersonalMessage(params) {\n        return tslib_1.__awaiter(this, void 0, void 0, function*() {\n            if (!this._connected) {\n                throw new Error(legacy_types_1.ERROR_SESSION_DISCONNECTED);\n            }\n            const request = this._formatRequest({\n                method: \"personal_sign\",\n                params\n            });\n            const result = yield this._sendCallRequest(request);\n            return result;\n        });\n    }\n    signTypedData(params) {\n        return tslib_1.__awaiter(this, void 0, void 0, function*() {\n            if (!this._connected) {\n                throw new Error(legacy_types_1.ERROR_SESSION_DISCONNECTED);\n            }\n            const request = this._formatRequest({\n                method: \"eth_signTypedData\",\n                params\n            });\n            const result = yield this._sendCallRequest(request);\n            return result;\n        });\n    }\n    updateChain(chainParams) {\n        return tslib_1.__awaiter(this, void 0, void 0, function*() {\n            if (!this._connected) {\n                throw new Error(\"Session currently disconnected\");\n            }\n            const request = this._formatRequest({\n                method: \"wallet_updateChain\",\n                params: [\n                    chainParams\n                ]\n            });\n            const result = yield this._sendCallRequest(request);\n            return result;\n        });\n    }\n    unsafeSend(request, options) {\n        this._sendRequest(request, options);\n        this._eventManager.trigger({\n            event: \"call_request_sent\",\n            params: [\n                {\n                    request,\n                    options\n                }\n            ]\n        });\n        return new Promise((resolve, reject)=>{\n            this._subscribeToResponse(request.id, (error, payload)=>{\n                if (error) {\n                    reject(error);\n                    return;\n                }\n                if (!payload) {\n                    throw new Error(legacy_types_1.ERROR_MISSING_JSON_RPC);\n                }\n                resolve(payload);\n            });\n        });\n    }\n    sendCustomRequest(request, options) {\n        return tslib_1.__awaiter(this, void 0, void 0, function*() {\n            if (!this._connected) {\n                throw new Error(legacy_types_1.ERROR_SESSION_DISCONNECTED);\n            }\n            switch(request.method){\n                case \"eth_accounts\":\n                    return this.accounts;\n                case \"eth_chainId\":\n                    return legacy_utils_1.convertNumberToHex(this.chainId);\n                case \"eth_sendTransaction\":\n                case \"eth_signTransaction\":\n                    if (request.params) {}\n                    break;\n                case \"personal_sign\":\n                    if (request.params) {}\n                    break;\n                default:\n                    break;\n            }\n            const formattedRequest = this._formatRequest(request);\n            const result = yield this._sendCallRequest(formattedRequest, options);\n            return result;\n        });\n    }\n    approveRequest(response) {\n        if (legacy_utils_1.isJsonRpcResponseSuccess(response)) {\n            const formattedResponse = this._formatResponse(response);\n            this._sendResponse(formattedResponse);\n        } else {\n            throw new Error(legacy_types_1.ERROR_MISSING_RESULT);\n        }\n    }\n    rejectRequest(response) {\n        if (legacy_utils_1.isJsonRpcResponseError(response)) {\n            const formattedResponse = this._formatResponse(response);\n            this._sendResponse(formattedResponse);\n        } else {\n            throw new Error(legacy_types_1.ERROR_MISSING_ERROR);\n        }\n    }\n    transportClose() {\n        this._transport.close();\n    }\n    _sendRequest(request, options) {\n        return tslib_1.__awaiter(this, void 0, void 0, function*() {\n            const callRequest = this._formatRequest(request);\n            const encryptionPayload = yield this._encrypt(callRequest);\n            const topic = typeof (options === null || options === void 0 ? void 0 : options.topic) !== \"undefined\" ? options.topic : this.peerId;\n            const payload = JSON.stringify(encryptionPayload);\n            const silent = typeof (options === null || options === void 0 ? void 0 : options.forcePushNotification) !== \"undefined\" ? !options.forcePushNotification : legacy_utils_1.isSilentPayload(callRequest);\n            this._transport.send(payload, topic, silent);\n        });\n    }\n    _sendResponse(response) {\n        return tslib_1.__awaiter(this, void 0, void 0, function*() {\n            const encryptionPayload = yield this._encrypt(response);\n            const topic = this.peerId;\n            const payload = JSON.stringify(encryptionPayload);\n            const silent = true;\n            this._transport.send(payload, topic, silent);\n        });\n    }\n    _sendSessionRequest(request, errorMsg, options) {\n        return tslib_1.__awaiter(this, void 0, void 0, function*() {\n            this._sendRequest(request, options);\n            this._subscribeToSessionResponse(request.id, errorMsg);\n        });\n    }\n    _sendCallRequest(request, options) {\n        this._sendRequest(request, options);\n        this._eventManager.trigger({\n            event: \"call_request_sent\",\n            params: [\n                {\n                    request,\n                    options\n                }\n            ]\n        });\n        return this._subscribeToCallResponse(request.id);\n    }\n    _formatRequest(request) {\n        if (typeof request.method === \"undefined\") {\n            throw new Error(legacy_types_1.ERROR_MISSING_METHOD);\n        }\n        const formattedRequest = {\n            id: typeof request.id === \"undefined\" ? legacy_utils_1.payloadId() : request.id,\n            jsonrpc: \"2.0\",\n            method: request.method,\n            params: typeof request.params === \"undefined\" ? [] : request.params\n        };\n        return formattedRequest;\n    }\n    _formatResponse(response) {\n        if (typeof response.id === \"undefined\") {\n            throw new Error(legacy_types_1.ERROR_MISSING_ID);\n        }\n        const baseResponse = {\n            id: response.id,\n            jsonrpc: \"2.0\"\n        };\n        if (legacy_utils_1.isJsonRpcResponseError(response)) {\n            const error = legacy_utils_1.formatRpcError(response.error);\n            const errorResponse = Object.assign(Object.assign(Object.assign({}, baseResponse), response), {\n                error\n            });\n            return errorResponse;\n        } else if (legacy_utils_1.isJsonRpcResponseSuccess(response)) {\n            const successResponse = Object.assign(Object.assign({}, baseResponse), response);\n            return successResponse;\n        }\n        throw new Error(legacy_types_1.ERROR_INVALID_RESPONSE);\n    }\n    _handleSessionDisconnect(errorMsg) {\n        const message = errorMsg || \"Session Disconnected\";\n        if (!this._connected) {\n            if (this._qrcodeModal) {\n                this._qrcodeModal.close();\n            }\n            legacy_utils_1.removeLocal(legacy_types_1.MOBILE_LINK_CHOICE_KEY);\n        }\n        if (this._connected) {\n            this._connected = false;\n        }\n        if (this._handshakeId) {\n            this._handshakeId = 0;\n        }\n        if (this._handshakeTopic) {\n            this._handshakeTopic = \"\";\n        }\n        if (this._peerId) {\n            this._peerId = \"\";\n        }\n        this._eventManager.trigger({\n            event: \"disconnect\",\n            params: [\n                {\n                    message\n                }\n            ]\n        });\n        this._removeStorageSession();\n        this.transportClose();\n    }\n    _handleSessionResponse(errorMsg, sessionParams) {\n        if (sessionParams) {\n            if (sessionParams.approved) {\n                if (!this._connected) {\n                    this._connected = true;\n                    if (sessionParams.chainId) {\n                        this.chainId = sessionParams.chainId;\n                    }\n                    if (sessionParams.accounts) {\n                        this.accounts = sessionParams.accounts;\n                    }\n                    if (sessionParams.peerId && !this.peerId) {\n                        this.peerId = sessionParams.peerId;\n                    }\n                    if (sessionParams.peerMeta && !this.peerMeta) {\n                        this.peerMeta = sessionParams.peerMeta;\n                    }\n                    this._eventManager.trigger({\n                        event: \"connect\",\n                        params: [\n                            {\n                                peerId: this.peerId,\n                                peerMeta: this.peerMeta,\n                                chainId: this.chainId,\n                                accounts: this.accounts\n                            }\n                        ]\n                    });\n                } else {\n                    if (sessionParams.chainId) {\n                        this.chainId = sessionParams.chainId;\n                    }\n                    if (sessionParams.accounts) {\n                        this.accounts = sessionParams.accounts;\n                    }\n                    this._eventManager.trigger({\n                        event: \"session_update\",\n                        params: [\n                            {\n                                chainId: this.chainId,\n                                accounts: this.accounts\n                            }\n                        ]\n                    });\n                }\n                this._manageStorageSession();\n            } else {\n                this._handleSessionDisconnect(errorMsg);\n            }\n        } else {\n            this._handleSessionDisconnect(errorMsg);\n        }\n    }\n    _handleIncomingMessages(socketMessage) {\n        return tslib_1.__awaiter(this, void 0, void 0, function*() {\n            const activeTopics = [\n                this.clientId,\n                this.handshakeTopic\n            ];\n            if (!activeTopics.includes(socketMessage.topic)) {\n                return;\n            }\n            let encryptionPayload;\n            try {\n                encryptionPayload = JSON.parse(socketMessage.payload);\n            } catch (error) {\n                return;\n            }\n            const payload = yield this._decrypt(encryptionPayload);\n            if (payload) {\n                this._eventManager.trigger(payload);\n            }\n        });\n    }\n    _subscribeToSessionRequest() {\n        this._transport.subscribe(this.handshakeTopic);\n    }\n    _subscribeToResponse(id, callback) {\n        this.on(`response:${id}`, callback);\n    }\n    _subscribeToSessionResponse(id, errorMsg) {\n        this._subscribeToResponse(id, (error, payload)=>{\n            if (error) {\n                this._handleSessionResponse(error.message);\n                return;\n            }\n            if (legacy_utils_1.isJsonRpcResponseSuccess(payload)) {\n                this._handleSessionResponse(errorMsg, payload.result);\n            } else if (payload.error && payload.error.message) {\n                this._handleSessionResponse(payload.error.message);\n            } else {\n                this._handleSessionResponse(errorMsg);\n            }\n        });\n    }\n    _subscribeToCallResponse(id) {\n        return new Promise((resolve, reject)=>{\n            this._subscribeToResponse(id, (error, payload)=>{\n                if (error) {\n                    reject(error);\n                    return;\n                }\n                if (legacy_utils_1.isJsonRpcResponseSuccess(payload)) {\n                    resolve(payload.result);\n                } else if (payload.error && payload.error.message) {\n                    reject(payload.error);\n                } else {\n                    reject(new Error(legacy_types_1.ERROR_INVALID_RESPONSE));\n                }\n            });\n        });\n    }\n    _subscribeToInternalEvents() {\n        this.on(\"display_uri\", ()=>{\n            if (this._qrcodeModal) {\n                this._qrcodeModal.open(this.uri, ()=>{\n                    this._eventManager.trigger({\n                        event: \"modal_closed\",\n                        params: []\n                    });\n                }, this._qrcodeModalOptions);\n            }\n        });\n        this.on(\"connect\", ()=>{\n            if (this._qrcodeModal) {\n                this._qrcodeModal.close();\n            }\n        });\n        this.on(\"call_request_sent\", (error, payload)=>{\n            const { request } = payload.params[0];\n            if (legacy_utils_1.isMobile() && this._signingMethods.includes(request.method)) {\n                const mobileLinkUrl = legacy_utils_1.getLocal(legacy_types_1.MOBILE_LINK_CHOICE_KEY);\n                if (mobileLinkUrl) {\n                    window.location.href = mobileLinkUrl.href;\n                }\n            }\n        });\n        this.on(\"wc_sessionRequest\", (error, payload)=>{\n            if (error) {\n                this._eventManager.trigger({\n                    event: \"error\",\n                    params: [\n                        {\n                            code: \"SESSION_REQUEST_ERROR\",\n                            message: error.toString()\n                        }\n                    ]\n                });\n            }\n            this.handshakeId = payload.id;\n            this.peerId = payload.params[0].peerId;\n            this.peerMeta = payload.params[0].peerMeta;\n            const internalPayload = Object.assign(Object.assign({}, payload), {\n                method: \"session_request\"\n            });\n            this._eventManager.trigger(internalPayload);\n        });\n        this.on(\"wc_sessionUpdate\", (error, payload)=>{\n            if (error) {\n                this._handleSessionResponse(error.message);\n            }\n            this._handleSessionResponse(\"Session disconnected\", payload.params[0]);\n        });\n    }\n    _initTransport() {\n        this._transport.on(\"message\", (socketMessage)=>this._handleIncomingMessages(socketMessage));\n        this._transport.on(\"open\", ()=>this._eventManager.trigger({\n                event: \"transport_open\",\n                params: []\n            }));\n        this._transport.on(\"close\", ()=>this._eventManager.trigger({\n                event: \"transport_close\",\n                params: []\n            }));\n        this._transport.on(\"error\", ()=>this._eventManager.trigger({\n                event: \"transport_error\",\n                params: [\n                    \"Websocket connection failed\"\n                ]\n            }));\n        this._transport.open();\n    }\n    _formatUri() {\n        const protocol = this.protocol;\n        const handshakeTopic = this.handshakeTopic;\n        const version = this.version;\n        const bridge = encodeURIComponent(this.bridge);\n        const key = this.key;\n        const uri = `${protocol}:${handshakeTopic}@${version}?bridge=${bridge}&key=${key}`;\n        return uri;\n    }\n    _parseUri(uri) {\n        const result = legacy_utils_1.parseWalletConnectUri(uri);\n        if (result.protocol === this.protocol) {\n            if (!result.handshakeTopic) {\n                throw Error(\"Invalid or missing handshakeTopic parameter value\");\n            }\n            const handshakeTopic = result.handshakeTopic;\n            if (!result.bridge) {\n                throw Error(\"Invalid or missing bridge url parameter value\");\n            }\n            const bridge = decodeURIComponent(result.bridge);\n            if (!result.key) {\n                throw Error(\"Invalid or missing key parameter value\");\n            }\n            const key = result.key;\n            return {\n                handshakeTopic,\n                bridge,\n                key\n            };\n        } else {\n            throw new Error(legacy_types_1.ERROR_INVALID_URI);\n        }\n    }\n    _generateKey() {\n        return tslib_1.__awaiter(this, void 0, void 0, function*() {\n            if (this._cryptoLib) {\n                const result = yield this._cryptoLib.generateKey();\n                return result;\n            }\n            return null;\n        });\n    }\n    _encrypt(data) {\n        return tslib_1.__awaiter(this, void 0, void 0, function*() {\n            const key = this._key;\n            if (this._cryptoLib && key) {\n                const result = yield this._cryptoLib.encrypt(data, key);\n                return result;\n            }\n            return null;\n        });\n    }\n    _decrypt(payload) {\n        return tslib_1.__awaiter(this, void 0, void 0, function*() {\n            const key = this._key;\n            if (this._cryptoLib && key) {\n                const result = yield this._cryptoLib.decrypt(payload, key);\n                return result;\n            }\n            return null;\n        });\n    }\n    _getStorageSession() {\n        let result = null;\n        if (this._sessionStorage) {\n            result = this._sessionStorage.getSession();\n        }\n        return result;\n    }\n    _setStorageSession() {\n        if (this._sessionStorage) {\n            this._sessionStorage.setSession(this.session);\n        }\n    }\n    _removeStorageSession() {\n        if (this._sessionStorage) {\n            this._sessionStorage.removeSession();\n        }\n    }\n    _manageStorageSession() {\n        if (this._connected) {\n            this._setStorageSession();\n        } else {\n            this._removeStorageSession();\n        }\n    }\n    _registerPushServer(pushServerOpts) {\n        if (!pushServerOpts.url || typeof pushServerOpts.url !== \"string\") {\n            throw Error(\"Invalid or missing pushServerOpts.url parameter value\");\n        }\n        if (!pushServerOpts.type || typeof pushServerOpts.type !== \"string\") {\n            throw Error(\"Invalid or missing pushServerOpts.type parameter value\");\n        }\n        if (!pushServerOpts.token || typeof pushServerOpts.token !== \"string\") {\n            throw Error(\"Invalid or missing pushServerOpts.token parameter value\");\n        }\n        const pushSubscription = {\n            bridge: this.bridge,\n            topic: this.clientId,\n            type: pushServerOpts.type,\n            token: pushServerOpts.token,\n            peerName: \"\",\n            language: pushServerOpts.language || \"\"\n        };\n        this.on(\"connect\", (error, payload)=>tslib_1.__awaiter(this, void 0, void 0, function*() {\n                if (error) {\n                    throw error;\n                }\n                if (pushServerOpts.peerMeta) {\n                    const peerName = payload.params[0].peerMeta.name;\n                    pushSubscription.peerName = peerName;\n                }\n                try {\n                    const response = yield fetch(`${pushServerOpts.url}/new`, {\n                        method: \"POST\",\n                        headers: {\n                            Accept: \"application/json\",\n                            \"Content-Type\": \"application/json\"\n                        },\n                        body: JSON.stringify(pushSubscription)\n                    });\n                    const json = yield response.json();\n                    if (!json.success) {\n                        throw Error(\"Failed to register in Push Server\");\n                    }\n                } catch (error) {\n                    throw Error(\"Failed to register in Push Server\");\n                }\n            }));\n    }\n}\nexports[\"default\"] = Connector; //# sourceMappingURL=core.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@walletconnect+legacy-client@2.0.0/node_modules/@walletconnect/legacy-client/dist/cjs/core.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@walletconnect+legacy-client@2.0.0/node_modules/@walletconnect/legacy-client/dist/cjs/crypto.js":
/*!****************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@walletconnect+legacy-client@2.0.0/node_modules/@walletconnect/legacy-client/dist/cjs/crypto.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.decrypt = exports.encrypt = exports.verifyHmac = exports.generateKey = void 0;\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/.pnpm/tslib@2.6.2/node_modules/tslib/tslib.es6.mjs\");\nconst crypto = tslib_1.__importStar(__webpack_require__(/*! @walletconnect/crypto */ \"(ssr)/./node_modules/.pnpm/@walletconnect+crypto@1.0.3/node_modules/@walletconnect/crypto/dist/cjs/node/index.js\"));\nconst encoding = tslib_1.__importStar(__webpack_require__(/*! @walletconnect/encoding */ \"(ssr)/./node_modules/.pnpm/@walletconnect+encoding@1.0.2/node_modules/@walletconnect/encoding/dist/esm/index.js\"));\nconst legacy_utils_1 = __webpack_require__(/*! @walletconnect/legacy-utils */ \"(ssr)/./node_modules/.pnpm/@walletconnect+legacy-utils@2.0.0/node_modules/@walletconnect/legacy-utils/dist/cjs/index.js\");\nfunction generateKey(length) {\n    return tslib_1.__awaiter(this, void 0, void 0, function*() {\n        const _length = (length || 256) / 8;\n        const bytes = crypto.randomBytes(_length);\n        const result = legacy_utils_1.convertBufferToArrayBuffer(encoding.arrayToBuffer(bytes));\n        return result;\n    });\n}\nexports.generateKey = generateKey;\nfunction verifyHmac(payload, key) {\n    return tslib_1.__awaiter(this, void 0, void 0, function*() {\n        const cipherText = encoding.hexToArray(payload.data);\n        const iv = encoding.hexToArray(payload.iv);\n        const hmac = encoding.hexToArray(payload.hmac);\n        const hmacHex = encoding.arrayToHex(hmac, false);\n        const unsigned = encoding.concatArrays(cipherText, iv);\n        const chmac = yield crypto.hmacSha256Sign(key, unsigned);\n        const chmacHex = encoding.arrayToHex(chmac, false);\n        if (encoding.removeHexPrefix(hmacHex) === encoding.removeHexPrefix(chmacHex)) {\n            return true;\n        }\n        return false;\n    });\n}\nexports.verifyHmac = verifyHmac;\nfunction encrypt(data, key, providedIv) {\n    return tslib_1.__awaiter(this, void 0, void 0, function*() {\n        const _key = encoding.bufferToArray(legacy_utils_1.convertArrayBufferToBuffer(key));\n        const ivArrayBuffer = providedIv || (yield generateKey(128));\n        const iv = encoding.bufferToArray(legacy_utils_1.convertArrayBufferToBuffer(ivArrayBuffer));\n        const ivHex = encoding.arrayToHex(iv, false);\n        const contentString = JSON.stringify(data);\n        const content = encoding.utf8ToArray(contentString);\n        const cipherText = yield crypto.aesCbcEncrypt(iv, _key, content);\n        const cipherTextHex = encoding.arrayToHex(cipherText, false);\n        const unsigned = encoding.concatArrays(cipherText, iv);\n        const hmac = yield crypto.hmacSha256Sign(_key, unsigned);\n        const hmacHex = encoding.arrayToHex(hmac, false);\n        return {\n            data: cipherTextHex,\n            hmac: hmacHex,\n            iv: ivHex\n        };\n    });\n}\nexports.encrypt = encrypt;\nfunction decrypt(payload, key) {\n    return tslib_1.__awaiter(this, void 0, void 0, function*() {\n        const _key = encoding.bufferToArray(legacy_utils_1.convertArrayBufferToBuffer(key));\n        if (!_key) {\n            throw new Error(\"Missing key: required for decryption\");\n        }\n        const verified = yield verifyHmac(payload, _key);\n        if (!verified) {\n            return null;\n        }\n        const cipherText = encoding.hexToArray(payload.data);\n        const iv = encoding.hexToArray(payload.iv);\n        const buffer = yield crypto.aesCbcDecrypt(iv, _key, cipherText);\n        const utf8 = encoding.arrayToUtf8(buffer);\n        let data;\n        try {\n            data = JSON.parse(utf8);\n        } catch (error) {\n            return null;\n        }\n        return data;\n    });\n}\nexports.decrypt = decrypt; //# sourceMappingURL=crypto.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@walletconnect+legacy-client@2.0.0/node_modules/@walletconnect/legacy-client/dist/cjs/crypto.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@walletconnect+legacy-client@2.0.0/node_modules/@walletconnect/legacy-client/dist/cjs/events.js":
/*!****************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@walletconnect+legacy-client@2.0.0/node_modules/@walletconnect/legacy-client/dist/cjs/events.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst legacy_utils_1 = __webpack_require__(/*! @walletconnect/legacy-utils */ \"(ssr)/./node_modules/.pnpm/@walletconnect+legacy-utils@2.0.0/node_modules/@walletconnect/legacy-utils/dist/cjs/index.js\");\nclass EventManager {\n    constructor(){\n        this._eventEmitters = [];\n    }\n    subscribe(eventEmitter) {\n        this._eventEmitters.push(eventEmitter);\n    }\n    unsubscribe(event) {\n        this._eventEmitters = this._eventEmitters.filter((x)=>x.event !== event);\n    }\n    trigger(payload) {\n        let eventEmitters = [];\n        let event;\n        if (legacy_utils_1.isJsonRpcRequest(payload)) {\n            event = payload.method;\n        } else if (legacy_utils_1.isJsonRpcResponseSuccess(payload) || legacy_utils_1.isJsonRpcResponseError(payload)) {\n            event = `response:${payload.id}`;\n        } else if (legacy_utils_1.isInternalEvent(payload)) {\n            event = payload.event;\n        } else {\n            event = \"\";\n        }\n        if (event) {\n            eventEmitters = this._eventEmitters.filter((eventEmitter)=>eventEmitter.event === event);\n        }\n        if ((!eventEmitters || !eventEmitters.length) && !legacy_utils_1.isReservedEvent(event) && !legacy_utils_1.isInternalEvent(event)) {\n            eventEmitters = this._eventEmitters.filter((eventEmitter)=>eventEmitter.event === \"call_request\");\n        }\n        eventEmitters.forEach((eventEmitter)=>{\n            if (legacy_utils_1.isJsonRpcResponseError(payload)) {\n                const error = new Error(payload.error.message);\n                eventEmitter.callback(error, null);\n            } else {\n                eventEmitter.callback(null, payload);\n            }\n        });\n    }\n}\nexports[\"default\"] = EventManager; //# sourceMappingURL=events.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHdhbGxldGNvbm5lY3QrbGVnYWN5LWNsaWVudEAyLjAuMC9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvbGVnYWN5LWNsaWVudC9kaXN0L2Nqcy9ldmVudHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsTUFBTUMsaUJBQWlCQyxtQkFBT0EsQ0FBQyw0SkFBNkI7QUFDNUQsTUFBTUM7SUFDRkMsYUFBYztRQUNWLElBQUksQ0FBQ0MsY0FBYyxHQUFHLEVBQUU7SUFDNUI7SUFDQUMsVUFBVUMsWUFBWSxFQUFFO1FBQ3BCLElBQUksQ0FBQ0YsY0FBYyxDQUFDRyxJQUFJLENBQUNEO0lBQzdCO0lBQ0FFLFlBQVlDLEtBQUssRUFBRTtRQUNmLElBQUksQ0FBQ0wsY0FBYyxHQUFHLElBQUksQ0FBQ0EsY0FBYyxDQUFDTSxNQUFNLENBQUNDLENBQUFBLElBQUtBLEVBQUVGLEtBQUssS0FBS0E7SUFDdEU7SUFDQUcsUUFBUUMsT0FBTyxFQUFFO1FBQ2IsSUFBSUMsZ0JBQWdCLEVBQUU7UUFDdEIsSUFBSUw7UUFDSixJQUFJVCxlQUFlZSxnQkFBZ0IsQ0FBQ0YsVUFBVTtZQUMxQ0osUUFBUUksUUFBUUcsTUFBTTtRQUMxQixPQUNLLElBQUloQixlQUFlaUIsd0JBQXdCLENBQUNKLFlBQVliLGVBQWVrQixzQkFBc0IsQ0FBQ0wsVUFBVTtZQUN6R0osUUFBUSxDQUFDLFNBQVMsRUFBRUksUUFBUU0sRUFBRSxDQUFDLENBQUM7UUFDcEMsT0FDSyxJQUFJbkIsZUFBZW9CLGVBQWUsQ0FBQ1AsVUFBVTtZQUM5Q0osUUFBUUksUUFBUUosS0FBSztRQUN6QixPQUNLO1lBQ0RBLFFBQVE7UUFDWjtRQUNBLElBQUlBLE9BQU87WUFDUEssZ0JBQWdCLElBQUksQ0FBQ1YsY0FBYyxDQUFDTSxNQUFNLENBQUMsQ0FBQ0osZUFBaUJBLGFBQWFHLEtBQUssS0FBS0E7UUFDeEY7UUFDQSxJQUFJLENBQUMsQ0FBQ0ssaUJBQWlCLENBQUNBLGNBQWNPLE1BQU0sS0FDeEMsQ0FBQ3JCLGVBQWVzQixlQUFlLENBQUNiLFVBQ2hDLENBQUNULGVBQWVvQixlQUFlLENBQUNYLFFBQVE7WUFDeENLLGdCQUFnQixJQUFJLENBQUNWLGNBQWMsQ0FBQ00sTUFBTSxDQUFDLENBQUNKLGVBQWlCQSxhQUFhRyxLQUFLLEtBQUs7UUFDeEY7UUFDQUssY0FBY1MsT0FBTyxDQUFDLENBQUNqQjtZQUNuQixJQUFJTixlQUFla0Isc0JBQXNCLENBQUNMLFVBQVU7Z0JBQ2hELE1BQU1XLFFBQVEsSUFBSUMsTUFBTVosUUFBUVcsS0FBSyxDQUFDRSxPQUFPO2dCQUM3Q3BCLGFBQWFxQixRQUFRLENBQUNILE9BQU87WUFDakMsT0FDSztnQkFDRGxCLGFBQWFxQixRQUFRLENBQUMsTUFBTWQ7WUFDaEM7UUFDSjtJQUNKO0FBQ0o7QUFDQWYsa0JBQWUsR0FBR0ksY0FDbEIsa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc21hcnQtYXVkaXQvLi9ub2RlX21vZHVsZXMvLnBucG0vQHdhbGxldGNvbm5lY3QrbGVnYWN5LWNsaWVudEAyLjAuMC9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvbGVnYWN5LWNsaWVudC9kaXN0L2Nqcy9ldmVudHMuanM/ODViNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGxlZ2FjeV91dGlsc18xID0gcmVxdWlyZShcIkB3YWxsZXRjb25uZWN0L2xlZ2FjeS11dGlsc1wiKTtcbmNsYXNzIEV2ZW50TWFuYWdlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuX2V2ZW50RW1pdHRlcnMgPSBbXTtcbiAgICB9XG4gICAgc3Vic2NyaWJlKGV2ZW50RW1pdHRlcikge1xuICAgICAgICB0aGlzLl9ldmVudEVtaXR0ZXJzLnB1c2goZXZlbnRFbWl0dGVyKTtcbiAgICB9XG4gICAgdW5zdWJzY3JpYmUoZXZlbnQpIHtcbiAgICAgICAgdGhpcy5fZXZlbnRFbWl0dGVycyA9IHRoaXMuX2V2ZW50RW1pdHRlcnMuZmlsdGVyKHggPT4geC5ldmVudCAhPT0gZXZlbnQpO1xuICAgIH1cbiAgICB0cmlnZ2VyKHBheWxvYWQpIHtcbiAgICAgICAgbGV0IGV2ZW50RW1pdHRlcnMgPSBbXTtcbiAgICAgICAgbGV0IGV2ZW50O1xuICAgICAgICBpZiAobGVnYWN5X3V0aWxzXzEuaXNKc29uUnBjUmVxdWVzdChwYXlsb2FkKSkge1xuICAgICAgICAgICAgZXZlbnQgPSBwYXlsb2FkLm1ldGhvZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChsZWdhY3lfdXRpbHNfMS5pc0pzb25ScGNSZXNwb25zZVN1Y2Nlc3MocGF5bG9hZCkgfHwgbGVnYWN5X3V0aWxzXzEuaXNKc29uUnBjUmVzcG9uc2VFcnJvcihwYXlsb2FkKSkge1xuICAgICAgICAgICAgZXZlbnQgPSBgcmVzcG9uc2U6JHtwYXlsb2FkLmlkfWA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobGVnYWN5X3V0aWxzXzEuaXNJbnRlcm5hbEV2ZW50KHBheWxvYWQpKSB7XG4gICAgICAgICAgICBldmVudCA9IHBheWxvYWQuZXZlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBldmVudCA9IFwiXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV2ZW50KSB7XG4gICAgICAgICAgICBldmVudEVtaXR0ZXJzID0gdGhpcy5fZXZlbnRFbWl0dGVycy5maWx0ZXIoKGV2ZW50RW1pdHRlcikgPT4gZXZlbnRFbWl0dGVyLmV2ZW50ID09PSBldmVudCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCghZXZlbnRFbWl0dGVycyB8fCAhZXZlbnRFbWl0dGVycy5sZW5ndGgpICYmXG4gICAgICAgICAgICAhbGVnYWN5X3V0aWxzXzEuaXNSZXNlcnZlZEV2ZW50KGV2ZW50KSAmJlxuICAgICAgICAgICAgIWxlZ2FjeV91dGlsc18xLmlzSW50ZXJuYWxFdmVudChldmVudCkpIHtcbiAgICAgICAgICAgIGV2ZW50RW1pdHRlcnMgPSB0aGlzLl9ldmVudEVtaXR0ZXJzLmZpbHRlcigoZXZlbnRFbWl0dGVyKSA9PiBldmVudEVtaXR0ZXIuZXZlbnQgPT09IFwiY2FsbF9yZXF1ZXN0XCIpO1xuICAgICAgICB9XG4gICAgICAgIGV2ZW50RW1pdHRlcnMuZm9yRWFjaCgoZXZlbnRFbWl0dGVyKSA9PiB7XG4gICAgICAgICAgICBpZiAobGVnYWN5X3V0aWxzXzEuaXNKc29uUnBjUmVzcG9uc2VFcnJvcihwYXlsb2FkKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKHBheWxvYWQuZXJyb3IubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgZXZlbnRFbWl0dGVyLmNhbGxiYWNrKGVycm9yLCBudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGV2ZW50RW1pdHRlci5jYWxsYmFjayhudWxsLCBwYXlsb2FkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gRXZlbnRNYW5hZ2VyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXZlbnRzLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImxlZ2FjeV91dGlsc18xIiwicmVxdWlyZSIsIkV2ZW50TWFuYWdlciIsImNvbnN0cnVjdG9yIiwiX2V2ZW50RW1pdHRlcnMiLCJzdWJzY3JpYmUiLCJldmVudEVtaXR0ZXIiLCJwdXNoIiwidW5zdWJzY3JpYmUiLCJldmVudCIsImZpbHRlciIsIngiLCJ0cmlnZ2VyIiwicGF5bG9hZCIsImV2ZW50RW1pdHRlcnMiLCJpc0pzb25ScGNSZXF1ZXN0IiwibWV0aG9kIiwiaXNKc29uUnBjUmVzcG9uc2VTdWNjZXNzIiwiaXNKc29uUnBjUmVzcG9uc2VFcnJvciIsImlkIiwiaXNJbnRlcm5hbEV2ZW50IiwibGVuZ3RoIiwiaXNSZXNlcnZlZEV2ZW50IiwiZm9yRWFjaCIsImVycm9yIiwiRXJyb3IiLCJtZXNzYWdlIiwiY2FsbGJhY2siLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@walletconnect+legacy-client@2.0.0/node_modules/@walletconnect/legacy-client/dist/cjs/events.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@walletconnect+legacy-client@2.0.0/node_modules/@walletconnect/legacy-client/dist/cjs/index.js":
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@walletconnect+legacy-client@2.0.0/node_modules/@walletconnect/legacy-client/dist/cjs/index.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/.pnpm/tslib@2.6.2/node_modules/tslib/tslib.es6.mjs\");\nconst core_1 = tslib_1.__importDefault(__webpack_require__(/*! ./core */ \"(ssr)/./node_modules/.pnpm/@walletconnect+legacy-client@2.0.0/node_modules/@walletconnect/legacy-client/dist/cjs/core.js\"));\nconst cryptoLib = tslib_1.__importStar(__webpack_require__(/*! ./crypto */ \"(ssr)/./node_modules/.pnpm/@walletconnect+legacy-client@2.0.0/node_modules/@walletconnect/legacy-client/dist/cjs/crypto.js\"));\nclass WalletConnect extends core_1.default {\n    constructor(connectorOpts, pushServerOpts){\n        super({\n            cryptoLib,\n            connectorOpts,\n            pushServerOpts\n        });\n    }\n}\nexports[\"default\"] = WalletConnect; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHdhbGxldGNvbm5lY3QrbGVnYWN5LWNsaWVudEAyLjAuMC9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvbGVnYWN5LWNsaWVudC9kaXN0L2Nqcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxVQUFVQyxtQkFBT0EsQ0FBQyxzRkFBTztBQUMvQixNQUFNQyxTQUFTRixRQUFRRyxlQUFlLENBQUNGLG1CQUFPQSxDQUFDLHdJQUFRO0FBQ3ZELE1BQU1HLFlBQVlKLFFBQVFLLFlBQVksQ0FBQ0osbUJBQU9BLENBQUMsNElBQVU7QUFDekQsTUFBTUssc0JBQXNCSixPQUFPSyxPQUFPO0lBQ3RDQyxZQUFZQyxhQUFhLEVBQUVDLGNBQWMsQ0FBRTtRQUN2QyxLQUFLLENBQUM7WUFDRk47WUFDQUs7WUFDQUM7UUFDSjtJQUNKO0FBQ0o7QUFDQVosa0JBQWUsR0FBR1EsZUFDbEIsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc21hcnQtYXVkaXQvLi9ub2RlX21vZHVsZXMvLnBucG0vQHdhbGxldGNvbm5lY3QrbGVnYWN5LWNsaWVudEAyLjAuMC9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvbGVnYWN5LWNsaWVudC9kaXN0L2Nqcy9pbmRleC5qcz8yNzdlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdHNsaWJfMSA9IHJlcXVpcmUoXCJ0c2xpYlwiKTtcbmNvbnN0IGNvcmVfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2NvcmVcIikpO1xuY29uc3QgY3J5cHRvTGliID0gdHNsaWJfMS5fX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vY3J5cHRvXCIpKTtcbmNsYXNzIFdhbGxldENvbm5lY3QgZXh0ZW5kcyBjb3JlXzEuZGVmYXVsdCB7XG4gICAgY29uc3RydWN0b3IoY29ubmVjdG9yT3B0cywgcHVzaFNlcnZlck9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgY3J5cHRvTGliLFxuICAgICAgICAgICAgY29ubmVjdG9yT3B0cyxcbiAgICAgICAgICAgIHB1c2hTZXJ2ZXJPcHRzLFxuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBXYWxsZXRDb25uZWN0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwidHNsaWJfMSIsInJlcXVpcmUiLCJjb3JlXzEiLCJfX2ltcG9ydERlZmF1bHQiLCJjcnlwdG9MaWIiLCJfX2ltcG9ydFN0YXIiLCJXYWxsZXRDb25uZWN0IiwiZGVmYXVsdCIsImNvbnN0cnVjdG9yIiwiY29ubmVjdG9yT3B0cyIsInB1c2hTZXJ2ZXJPcHRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@walletconnect+legacy-client@2.0.0/node_modules/@walletconnect/legacy-client/dist/cjs/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@walletconnect+legacy-client@2.0.0/node_modules/@walletconnect/legacy-client/dist/cjs/network.js":
/*!*****************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@walletconnect+legacy-client@2.0.0/node_modules/@walletconnect/legacy-client/dist/cjs/network.js ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nclass NetworkMonitor {\n    constructor(){\n        this._eventEmitters = [];\n        if (false) {}\n    }\n    on(event, callback) {\n        this._eventEmitters.push({\n            event,\n            callback\n        });\n    }\n    trigger(event) {\n        let eventEmitters = [];\n        if (event) {\n            eventEmitters = this._eventEmitters.filter((eventEmitter)=>eventEmitter.event === event);\n        }\n        eventEmitters.forEach((eventEmitter)=>{\n            eventEmitter.callback();\n        });\n    }\n}\nexports[\"default\"] = NetworkMonitor; //# sourceMappingURL=network.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHdhbGxldGNvbm5lY3QrbGVnYWN5LWNsaWVudEAyLjAuMC9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvbGVnYWN5LWNsaWVudC9kaXN0L2Nqcy9uZXR3b3JrLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DO0lBQ0ZDLGFBQWM7UUFDVixJQUFJLENBQUNDLGNBQWMsR0FBRyxFQUFFO1FBQ3hCLElBQUksS0FBK0UsRUFBRSxFQUdwRjtJQUNMO0lBQ0FJLEdBQUdDLEtBQUssRUFBRUMsUUFBUSxFQUFFO1FBQ2hCLElBQUksQ0FBQ04sY0FBYyxDQUFDTyxJQUFJLENBQUM7WUFDckJGO1lBQ0FDO1FBQ0o7SUFDSjtJQUNBSCxRQUFRRSxLQUFLLEVBQUU7UUFDWCxJQUFJRyxnQkFBZ0IsRUFBRTtRQUN0QixJQUFJSCxPQUFPO1lBQ1BHLGdCQUFnQixJQUFJLENBQUNSLGNBQWMsQ0FBQ1MsTUFBTSxDQUFDLENBQUNDLGVBQWlCQSxhQUFhTCxLQUFLLEtBQUtBO1FBQ3hGO1FBQ0FHLGNBQWNHLE9BQU8sQ0FBQyxDQUFDRDtZQUNuQkEsYUFBYUosUUFBUTtRQUN6QjtJQUNKO0FBQ0o7QUFDQVYsa0JBQWUsR0FBR0UsZ0JBQ2xCLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL3NtYXJ0LWF1ZGl0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0B3YWxsZXRjb25uZWN0K2xlZ2FjeS1jbGllbnRAMi4wLjAvbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2xlZ2FjeS1jbGllbnQvZGlzdC9janMvbmV0d29yay5qcz9iZmY5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY2xhc3MgTmV0d29ya01vbml0b3Ige1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLl9ldmVudEVtaXR0ZXJzID0gW107XG4gICAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJvbmxpbmVcIiwgKCkgPT4gdGhpcy50cmlnZ2VyKFwib25saW5lXCIpKTtcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwib2ZmbGluZVwiLCAoKSA9PiB0aGlzLnRyaWdnZXIoXCJvZmZsaW5lXCIpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBvbihldmVudCwgY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5fZXZlbnRFbWl0dGVycy5wdXNoKHtcbiAgICAgICAgICAgIGV2ZW50LFxuICAgICAgICAgICAgY2FsbGJhY2ssXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB0cmlnZ2VyKGV2ZW50KSB7XG4gICAgICAgIGxldCBldmVudEVtaXR0ZXJzID0gW107XG4gICAgICAgIGlmIChldmVudCkge1xuICAgICAgICAgICAgZXZlbnRFbWl0dGVycyA9IHRoaXMuX2V2ZW50RW1pdHRlcnMuZmlsdGVyKChldmVudEVtaXR0ZXIpID0+IGV2ZW50RW1pdHRlci5ldmVudCA9PT0gZXZlbnQpO1xuICAgICAgICB9XG4gICAgICAgIGV2ZW50RW1pdHRlcnMuZm9yRWFjaCgoZXZlbnRFbWl0dGVyKSA9PiB7XG4gICAgICAgICAgICBldmVudEVtaXR0ZXIuY2FsbGJhY2soKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gTmV0d29ya01vbml0b3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1uZXR3b3JrLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIk5ldHdvcmtNb25pdG9yIiwiY29uc3RydWN0b3IiLCJfZXZlbnRFbWl0dGVycyIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJ0cmlnZ2VyIiwib24iLCJldmVudCIsImNhbGxiYWNrIiwicHVzaCIsImV2ZW50RW1pdHRlcnMiLCJmaWx0ZXIiLCJldmVudEVtaXR0ZXIiLCJmb3JFYWNoIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@walletconnect+legacy-client@2.0.0/node_modules/@walletconnect/legacy-client/dist/cjs/network.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@walletconnect+legacy-client@2.0.0/node_modules/@walletconnect/legacy-client/dist/cjs/socket.js":
/*!****************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@walletconnect+legacy-client@2.0.0/node_modules/@walletconnect/legacy-client/dist/cjs/socket.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/.pnpm/tslib@2.6.2/node_modules/tslib/tslib.es6.mjs\");\nconst legacy_utils_1 = __webpack_require__(/*! @walletconnect/legacy-utils */ \"(ssr)/./node_modules/.pnpm/@walletconnect+legacy-utils@2.0.0/node_modules/@walletconnect/legacy-utils/dist/cjs/index.js\");\nconst network_1 = tslib_1.__importDefault(__webpack_require__(/*! ./network */ \"(ssr)/./node_modules/.pnpm/@walletconnect+legacy-client@2.0.0/node_modules/@walletconnect/legacy-client/dist/cjs/network.js\"));\nconst WS = typeof global.WebSocket !== \"undefined\" ? global.WebSocket : __webpack_require__(/*! ws */ \"(ssr)/./node_modules/.pnpm/ws@8.13.0/node_modules/ws/index.js\");\nclass SocketTransport {\n    constructor(opts){\n        this.opts = opts;\n        this._queue = [];\n        this._events = [];\n        this._subscriptions = [];\n        this._protocol = opts.protocol;\n        this._version = opts.version;\n        this._url = \"\";\n        this._netMonitor = null;\n        this._socket = null;\n        this._nextSocket = null;\n        this._subscriptions = opts.subscriptions || [];\n        this._netMonitor = opts.netMonitor || new network_1.default();\n        if (!opts.url || typeof opts.url !== \"string\") {\n            throw new Error(\"Missing or invalid WebSocket url\");\n        }\n        this._url = opts.url;\n        this._netMonitor.on(\"online\", ()=>this._socketCreate());\n    }\n    set readyState(value) {}\n    get readyState() {\n        return this._socket ? this._socket.readyState : -1;\n    }\n    set connecting(value) {}\n    get connecting() {\n        return this.readyState === 0;\n    }\n    set connected(value) {}\n    get connected() {\n        return this.readyState === 1;\n    }\n    set closing(value) {}\n    get closing() {\n        return this.readyState === 2;\n    }\n    set closed(value) {}\n    get closed() {\n        return this.readyState === 3;\n    }\n    open() {\n        this._socketCreate();\n    }\n    close() {\n        this._socketClose();\n    }\n    send(message, topic, silent) {\n        if (!topic || typeof topic !== \"string\") {\n            throw new Error(\"Missing or invalid topic field\");\n        }\n        this._socketSend({\n            topic: topic,\n            type: \"pub\",\n            payload: message,\n            silent: !!silent\n        });\n    }\n    subscribe(topic) {\n        this._socketSend({\n            topic: topic,\n            type: \"sub\",\n            payload: \"\",\n            silent: true\n        });\n    }\n    on(event, callback) {\n        this._events.push({\n            event,\n            callback\n        });\n    }\n    _socketCreate() {\n        if (this._nextSocket) {\n            return;\n        }\n        const url = getWebSocketUrl(this._url, this._protocol, this._version);\n        this._nextSocket = new WS(url);\n        if (!this._nextSocket) {\n            throw new Error(\"Failed to create socket\");\n        }\n        this._nextSocket.onmessage = (event)=>this._socketReceive(event);\n        this._nextSocket.onopen = ()=>this._socketOpen();\n        this._nextSocket.onerror = (event)=>this._socketError(event);\n        this._nextSocket.onclose = ()=>{\n            setTimeout(()=>{\n                this._nextSocket = null;\n                this._socketCreate();\n            }, 1000);\n        };\n    }\n    _socketOpen() {\n        this._socketClose();\n        this._socket = this._nextSocket;\n        this._nextSocket = null;\n        this._queueSubscriptions();\n        this._pushQueue();\n    }\n    _socketClose() {\n        if (this._socket) {\n            this._socket.onclose = ()=>{};\n            this._socket.close();\n        }\n    }\n    _socketSend(socketMessage) {\n        const message = JSON.stringify(socketMessage);\n        if (this._socket && this._socket.readyState === 1) {\n            this._socket.send(message);\n        } else {\n            this._setToQueue(socketMessage);\n            this._socketCreate();\n        }\n    }\n    _socketReceive(event) {\n        return tslib_1.__awaiter(this, void 0, void 0, function*() {\n            let socketMessage;\n            try {\n                socketMessage = JSON.parse(event.data);\n            } catch (error) {\n                return;\n            }\n            this._socketSend({\n                topic: socketMessage.topic,\n                type: \"ack\",\n                payload: \"\",\n                silent: true\n            });\n            if (this._socket && this._socket.readyState === 1) {\n                const events = this._events.filter((event)=>event.event === \"message\");\n                if (events && events.length) {\n                    events.forEach((event)=>event.callback(socketMessage));\n                }\n            }\n        });\n    }\n    _socketError(e) {\n        const events = this._events.filter((event)=>event.event === \"error\");\n        if (events && events.length) {\n            events.forEach((event)=>event.callback(e));\n        }\n    }\n    _queueSubscriptions() {\n        const subscriptions = this._subscriptions;\n        subscriptions.forEach((topic)=>this._queue.push({\n                topic: topic,\n                type: \"sub\",\n                payload: \"\",\n                silent: true\n            }));\n        this._subscriptions = this.opts.subscriptions || [];\n    }\n    _setToQueue(socketMessage) {\n        this._queue.push(socketMessage);\n    }\n    _pushQueue() {\n        const queue = this._queue;\n        queue.forEach((socketMessage)=>this._socketSend(socketMessage));\n        this._queue = [];\n    }\n}\nfunction getWebSocketUrl(_url, protocol, version) {\n    var _a, _b;\n    const url = _url.startsWith(\"https\") ? _url.replace(\"https\", \"wss\") : _url.startsWith(\"http\") ? _url.replace(\"http\", \"ws\") : _url;\n    const splitUrl = url.split(\"?\");\n    const params = legacy_utils_1.isBrowser() ? {\n        protocol,\n        version,\n        env: \"browser\",\n        host: ((_a = legacy_utils_1.getLocation()) === null || _a === void 0 ? void 0 : _a.host) || \"\"\n    } : {\n        protocol,\n        version,\n        env: ((_b = legacy_utils_1.detectEnv()) === null || _b === void 0 ? void 0 : _b.name) || \"\"\n    };\n    const queryString = legacy_utils_1.appendToQueryString(legacy_utils_1.getQueryString(splitUrl[1] || \"\"), params);\n    return splitUrl[0] + \"?\" + queryString;\n}\nexports[\"default\"] = SocketTransport; //# sourceMappingURL=socket.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHdhbGxldGNvbm5lY3QrbGVnYWN5LWNsaWVudEAyLjAuMC9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvbGVnYWN5LWNsaWVudC9kaXN0L2Nqcy9zb2NrZXQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsTUFBTUMsVUFBVUMsbUJBQU9BLENBQUMsc0ZBQU87QUFDL0IsTUFBTUMsaUJBQWlCRCxtQkFBT0EsQ0FBQyw0SkFBNkI7QUFDNUQsTUFBTUUsWUFBWUgsUUFBUUksZUFBZSxDQUFDSCxtQkFBT0EsQ0FBQyw4SUFBVztBQUM3RCxNQUFNSSxLQUFLLE9BQU9DLE9BQU9DLFNBQVMsS0FBSyxjQUFjRCxPQUFPQyxTQUFTLEdBQUdOLG1CQUFPQSxDQUFDLHlFQUFJO0FBQ3BGLE1BQU1PO0lBQ0ZDLFlBQVlDLElBQUksQ0FBRTtRQUNkLElBQUksQ0FBQ0EsSUFBSSxHQUFHQTtRQUNaLElBQUksQ0FBQ0MsTUFBTSxHQUFHLEVBQUU7UUFDaEIsSUFBSSxDQUFDQyxPQUFPLEdBQUcsRUFBRTtRQUNqQixJQUFJLENBQUNDLGNBQWMsR0FBRyxFQUFFO1FBQ3hCLElBQUksQ0FBQ0MsU0FBUyxHQUFHSixLQUFLSyxRQUFRO1FBQzlCLElBQUksQ0FBQ0MsUUFBUSxHQUFHTixLQUFLTyxPQUFPO1FBQzVCLElBQUksQ0FBQ0MsSUFBSSxHQUFHO1FBQ1osSUFBSSxDQUFDQyxXQUFXLEdBQUc7UUFDbkIsSUFBSSxDQUFDQyxPQUFPLEdBQUc7UUFDZixJQUFJLENBQUNDLFdBQVcsR0FBRztRQUNuQixJQUFJLENBQUNSLGNBQWMsR0FBR0gsS0FBS1ksYUFBYSxJQUFJLEVBQUU7UUFDOUMsSUFBSSxDQUFDSCxXQUFXLEdBQUdULEtBQUthLFVBQVUsSUFBSSxJQUFJcEIsVUFBVXFCLE9BQU87UUFDM0QsSUFBSSxDQUFDZCxLQUFLZSxHQUFHLElBQUksT0FBT2Ys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RCxPQUFPLENBQUMsUUFBUSxRQUNyQjFEO0lBQ1YsTUFBTTJELFdBQVdwRCxJQUFJcUQsS0FBSyxDQUFDO0lBQzNCLE1BQU1DLFNBQVM3RSxlQUFlOEUsU0FBUyxLQUNqQztRQUNFakU7UUFDQUU7UUFDQWdFLEtBQUs7UUFDTEMsTUFBTSxDQUFDLENBQUNULEtBQUt2RSxlQUFlaUYsV0FBVyxFQUFDLE1BQU8sUUFBUVYsT0FBTyxLQUFLLElBQUksS0FBSyxJQUFJQSxHQUFHUyxJQUFJLEtBQUs7SUFDaEcsSUFDRTtRQUNFbkU7UUFDQUU7UUFDQWdFLEtBQUssQ0FBQyxDQUFDUCxLQUFLeEUsZUFBZWtGLFNBQVMsRUFBQyxNQUFPLFFBQVFWLE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsR0FBR1csSUFBSSxLQUFLO0lBQzdGO0lBQ0osTUFBTUMsY0FBY3BGLGVBQWVxRixtQkFBbUIsQ0FBQ3JGLGVBQWVzRixjQUFjLENBQUNYLFFBQVEsQ0FBQyxFQUFFLElBQUksS0FBS0U7SUFDekcsT0FBT0YsUUFBUSxDQUFDLEVBQUUsR0FBRyxNQUFNUztBQUMvQjtBQUNBeEYsa0JBQWUsR0FBR1UsaUJBQ2xCLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL3NtYXJ0LWF1ZGl0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0B3YWxsZXRjb25uZWN0K2xlZ2FjeS1jbGllbnRAMi4wLjAvbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2xlZ2FjeS1jbGllbnQvZGlzdC9janMvc29ja2V0LmpzPzhjYTAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB0c2xpYl8xID0gcmVxdWlyZShcInRzbGliXCIpO1xuY29uc3QgbGVnYWN5X3V0aWxzXzEgPSByZXF1aXJlKFwiQHdhbGxldGNvbm5lY3QvbGVnYWN5LXV0aWxzXCIpO1xuY29uc3QgbmV0d29ya18xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vbmV0d29ya1wiKSk7XG5jb25zdCBXUyA9IHR5cGVvZiBnbG9iYWwuV2ViU29ja2V0ICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsLldlYlNvY2tldCA6IHJlcXVpcmUoXCJ3c1wiKTtcbmNsYXNzIFNvY2tldFRyYW5zcG9ydCB7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICB0aGlzLm9wdHMgPSBvcHRzO1xuICAgICAgICB0aGlzLl9xdWV1ZSA9IFtdO1xuICAgICAgICB0aGlzLl9ldmVudHMgPSBbXTtcbiAgICAgICAgdGhpcy5fc3Vic2NyaXB0aW9ucyA9IFtdO1xuICAgICAgICB0aGlzLl9wcm90b2NvbCA9IG9wdHMucHJvdG9jb2w7XG4gICAgICAgIHRoaXMuX3ZlcnNpb24gPSBvcHRzLnZlcnNpb247XG4gICAgICAgIHRoaXMuX3VybCA9IFwiXCI7XG4gICAgICAgIHRoaXMuX25ldE1vbml0b3IgPSBudWxsO1xuICAgICAgICB0aGlzLl9zb2NrZXQgPSBudWxsO1xuICAgICAgICB0aGlzLl9uZXh0U29ja2V0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fc3Vic2NyaXB0aW9ucyA9IG9wdHMuc3Vic2NyaXB0aW9ucyB8fCBbXTtcbiAgICAgICAgdGhpcy5fbmV0TW9uaXRvciA9IG9wdHMubmV0TW9uaXRvciB8fCBuZXcgbmV0d29ya18xLmRlZmF1bHQoKTtcbiAgICAgICAgaWYgKCFvcHRzLnVybCB8fCB0eXBlb2Ygb3B0cy51cmwgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3Npbmcgb3IgaW52YWxpZCBXZWJTb2NrZXQgdXJsXCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3VybCA9IG9wdHMudXJsO1xuICAgICAgICB0aGlzLl9uZXRNb25pdG9yLm9uKFwib25saW5lXCIsICgpID0+IHRoaXMuX3NvY2tldENyZWF0ZSgpKTtcbiAgICB9XG4gICAgc2V0IHJlYWR5U3RhdGUodmFsdWUpIHtcbiAgICB9XG4gICAgZ2V0IHJlYWR5U3RhdGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zb2NrZXQgPyB0aGlzLl9zb2NrZXQucmVhZHlTdGF0ZSA6IC0xO1xuICAgIH1cbiAgICBzZXQgY29ubmVjdGluZyh2YWx1ZSkge1xuICAgIH1cbiAgICBnZXQgY29ubmVjdGluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVhZHlTdGF0ZSA9PT0gMDtcbiAgICB9XG4gICAgc2V0IGNvbm5lY3RlZCh2YWx1ZSkge1xuICAgIH1cbiAgICBnZXQgY29ubmVjdGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZWFkeVN0YXRlID09PSAxO1xuICAgIH1cbiAgICBzZXQgY2xvc2luZyh2YWx1ZSkge1xuICAgIH1cbiAgICBnZXQgY2xvc2luZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVhZHlTdGF0ZSA9PT0gMjtcbiAgICB9XG4gICAgc2V0IGNsb3NlZCh2YWx1ZSkge1xuICAgIH1cbiAgICBnZXQgY2xvc2VkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZWFkeVN0YXRlID09PSAzO1xuICAgIH1cbiAgICBvcGVuKCkge1xuICAgICAgICB0aGlzLl9zb2NrZXRDcmVhdGUoKTtcbiAgICB9XG4gICAgY2xvc2UoKSB7XG4gICAgICAgIHRoaXMuX3NvY2tldENsb3NlKCk7XG4gICAgfVxuICAgIHNlbmQobWVzc2FnZSwgdG9waWMsIHNpbGVudCkge1xuICAgICAgICBpZiAoIXRvcGljIHx8IHR5cGVvZiB0b3BpYyAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBvciBpbnZhbGlkIHRvcGljIGZpZWxkXCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3NvY2tldFNlbmQoe1xuICAgICAgICAgICAgdG9waWM6IHRvcGljLFxuICAgICAgICAgICAgdHlwZTogXCJwdWJcIixcbiAgICAgICAgICAgIHBheWxvYWQ6IG1lc3NhZ2UsXG4gICAgICAgICAgICBzaWxlbnQ6ICEhc2lsZW50LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgc3Vic2NyaWJlKHRvcGljKSB7XG4gICAgICAgIHRoaXMuX3NvY2tldFNlbmQoe1xuICAgICAgICAgICAgdG9waWM6IHRvcGljLFxuICAgICAgICAgICAgdHlwZTogXCJzdWJcIixcbiAgICAgICAgICAgIHBheWxvYWQ6IFwiXCIsXG4gICAgICAgICAgICBzaWxlbnQ6IHRydWUsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBvbihldmVudCwgY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5fZXZlbnRzLnB1c2goeyBldmVudCwgY2FsbGJhY2sgfSk7XG4gICAgfVxuICAgIF9zb2NrZXRDcmVhdGUoKSB7XG4gICAgICAgIGlmICh0aGlzLl9uZXh0U29ja2V0KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdXJsID0gZ2V0V2ViU29ja2V0VXJsKHRoaXMuX3VybCwgdGhpcy5fcHJvdG9jb2wsIHRoaXMuX3ZlcnNpb24pO1xuICAgICAgICB0aGlzLl9uZXh0U29ja2V0ID0gbmV3IFdTKHVybCk7XG4gICAgICAgIGlmICghdGhpcy5fbmV4dFNvY2tldCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGNyZWF0ZSBzb2NrZXRcIik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbmV4dFNvY2tldC5vbm1lc3NhZ2UgPSAoZXZlbnQpID0+IHRoaXMuX3NvY2tldFJlY2VpdmUoZXZlbnQpO1xuICAgICAgICB0aGlzLl9uZXh0U29ja2V0Lm9ub3BlbiA9ICgpID0+IHRoaXMuX3NvY2tldE9wZW4oKTtcbiAgICAgICAgdGhpcy5fbmV4dFNvY2tldC5vbmVycm9yID0gKGV2ZW50KSA9PiB0aGlzLl9zb2NrZXRFcnJvcihldmVudCk7XG4gICAgICAgIHRoaXMuX25leHRTb2NrZXQub25jbG9zZSA9ICgpID0+IHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX25leHRTb2NrZXQgPSBudWxsO1xuICAgICAgICAgICAgICAgIHRoaXMuX3NvY2tldENyZWF0ZSgpO1xuICAgICAgICAgICAgfSwgMTAwMCk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIF9zb2NrZXRPcGVuKCkge1xuICAgICAgICB0aGlzLl9zb2NrZXRDbG9zZSgpO1xuICAgICAgICB0aGlzLl9zb2NrZXQgPSB0aGlzLl9uZXh0U29ja2V0O1xuICAgICAgICB0aGlzLl9uZXh0U29ja2V0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcXVldWVTdWJzY3JpcHRpb25zKCk7XG4gICAgICAgIHRoaXMuX3B1c2hRdWV1ZSgpO1xuICAgIH1cbiAgICBfc29ja2V0Q2xvc2UoKSB7XG4gICAgICAgIGlmICh0aGlzLl9zb2NrZXQpIHtcbiAgICAgICAgICAgIHRoaXMuX3NvY2tldC5vbmNsb3NlID0gKCkgPT4ge1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuX3NvY2tldC5jbG9zZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9zb2NrZXRTZW5kKHNvY2tldE1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IEpTT04uc3RyaW5naWZ5KHNvY2tldE1lc3NhZ2UpO1xuICAgICAgICBpZiAodGhpcy5fc29ja2V0ICYmIHRoaXMuX3NvY2tldC5yZWFkeVN0YXRlID09PSAxKSB7XG4gICAgICAgICAgICB0aGlzLl9zb2NrZXQuc2VuZChtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3NldFRvUXVldWUoc29ja2V0TWVzc2FnZSk7XG4gICAgICAgICAgICB0aGlzLl9zb2NrZXRDcmVhdGUoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfc29ja2V0UmVjZWl2ZShldmVudCkge1xuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBsZXQgc29ja2V0TWVzc2FnZTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgc29ja2V0TWVzc2FnZSA9IEpTT04ucGFyc2UoZXZlbnQuZGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9zb2NrZXRTZW5kKHtcbiAgICAgICAgICAgICAgICB0b3BpYzogc29ja2V0TWVzc2FnZS50b3BpYyxcbiAgICAgICAgICAgICAgICB0eXBlOiBcImFja1wiLFxuICAgICAgICAgICAgICAgIHBheWxvYWQ6IFwiXCIsXG4gICAgICAgICAgICAgICAgc2lsZW50OiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAodGhpcy5fc29ja2V0ICYmIHRoaXMuX3NvY2tldC5yZWFkeVN0YXRlID09PSAxKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZXZlbnRzID0gdGhpcy5fZXZlbnRzLmZpbHRlcihldmVudCA9PiBldmVudC5ldmVudCA9PT0gXCJtZXNzYWdlXCIpO1xuICAgICAgICAgICAgICAgIGlmIChldmVudHMgJiYgZXZlbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBldmVudHMuZm9yRWFjaChldmVudCA9PiBldmVudC5jYWxsYmFjayhzb2NrZXRNZXNzYWdlKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgX3NvY2tldEVycm9yKGUpIHtcbiAgICAgICAgY29uc3QgZXZlbnRzID0gdGhpcy5fZXZlbnRzLmZpbHRlcihldmVudCA9PiBldmVudC5ldmVudCA9PT0gXCJlcnJvclwiKTtcbiAgICAgICAgaWYgKGV2ZW50cyAmJiBldmVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBldmVudHMuZm9yRWFjaChldmVudCA9PiBldmVudC5jYWxsYmFjayhlKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX3F1ZXVlU3Vic2NyaXB0aW9ucygpIHtcbiAgICAgICAgY29uc3Qgc3Vic2NyaXB0aW9ucyA9IHRoaXMuX3N1YnNjcmlwdGlvbnM7XG4gICAgICAgIHN1YnNjcmlwdGlvbnMuZm9yRWFjaCgodG9waWMpID0+IHRoaXMuX3F1ZXVlLnB1c2goe1xuICAgICAgICAgICAgdG9waWM6IHRvcGljLFxuICAgICAgICAgICAgdHlwZTogXCJzdWJcIixcbiAgICAgICAgICAgIHBheWxvYWQ6IFwiXCIsXG4gICAgICAgICAgICBzaWxlbnQ6IHRydWUsXG4gICAgICAgIH0pKTtcbiAgICAgICAgdGhpcy5fc3Vic2NyaXB0aW9ucyA9IHRoaXMub3B0cy5zdWJzY3JpcHRpb25zIHx8IFtdO1xuICAgIH1cbiAgICBfc2V0VG9RdWV1ZShzb2NrZXRNZXNzYWdlKSB7XG4gICAgICAgIHRoaXMuX3F1ZXVlLnB1c2goc29ja2V0TWVzc2FnZSk7XG4gICAgfVxuICAgIF9wdXNoUXVldWUoKSB7XG4gICAgICAgIGNvbnN0IHF1ZXVlID0gdGhpcy5fcXVldWU7XG4gICAgICAgIHF1ZXVlLmZvckVhY2goKHNvY2tldE1lc3NhZ2UpID0+IHRoaXMuX3NvY2tldFNlbmQoc29ja2V0TWVzc2FnZSkpO1xuICAgICAgICB0aGlzLl9xdWV1ZSA9IFtdO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldFdlYlNvY2tldFVybChfdXJsLCBwcm90b2NvbCwgdmVyc2lvbikge1xuICAgIHZhciBfYSwgX2I7XG4gICAgY29uc3QgdXJsID0gX3VybC5zdGFydHNXaXRoKFwiaHR0cHNcIilcbiAgICAgICAgPyBfdXJsLnJlcGxhY2UoXCJodHRwc1wiLCBcIndzc1wiKVxuICAgICAgICA6IF91cmwuc3RhcnRzV2l0aChcImh0dHBcIilcbiAgICAgICAgICAgID8gX3VybC5yZXBsYWNlKFwiaHR0cFwiLCBcIndzXCIpXG4gICAgICAgICAgICA6IF91cmw7XG4gICAgY29uc3Qgc3BsaXRVcmwgPSB1cmwuc3BsaXQoXCI/XCIpO1xuICAgIGNvbnN0IHBhcmFtcyA9IGxlZ2FjeV91dGlsc18xLmlzQnJvd3NlcigpXG4gICAgICAgID8ge1xuICAgICAgICAgICAgcHJvdG9jb2wsXG4gICAgICAgICAgICB2ZXJzaW9uLFxuICAgICAgICAgICAgZW52OiBcImJyb3dzZXJcIixcbiAgICAgICAgICAgIGhvc3Q6ICgoX2EgPSBsZWdhY3lfdXRpbHNfMS5nZXRMb2NhdGlvbigpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaG9zdCkgfHwgXCJcIixcbiAgICAgICAgfVxuICAgICAgICA6IHtcbiAgICAgICAgICAgIHByb3RvY29sLFxuICAgICAgICAgICAgdmVyc2lvbixcbiAgICAgICAgICAgIGVudjogKChfYiA9IGxlZ2FjeV91dGlsc18xLmRldGVjdEVudigpKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IubmFtZSkgfHwgXCJcIixcbiAgICAgICAgfTtcbiAgICBjb25zdCBxdWVyeVN0cmluZyA9IGxlZ2FjeV91dGlsc18xLmFwcGVuZFRvUXVlcnlTdHJpbmcobGVnYWN5X3V0aWxzXzEuZ2V0UXVlcnlTdHJpbmcoc3BsaXRVcmxbMV0gfHwgXCJcIiksIHBhcmFtcyk7XG4gICAgcmV0dXJuIHNwbGl0VXJsWzBdICsgXCI/XCIgKyBxdWVyeVN0cmluZztcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IFNvY2tldFRyYW5zcG9ydDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNvY2tldC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ0c2xpYl8xIiwicmVxdWlyZSIsImxlZ2FjeV91dGlsc18xIiwibmV0d29ya18xIiwiX19pbXBvcnREZWZhdWx0IiwiV1MiLCJnbG9iYWwiLCJXZWJTb2NrZXQiLCJTb2NrZXRUcmFuc3BvcnQiLCJjb25zdHJ1Y3RvciIsIm9wdHMiLCJfcXVldWUiLCJfZXZlbnRzIiwiX3N1YnNjcmlwdGlvbnMiLCJfcHJvdG9jb2wiLCJwcm90b2NvbCIsIl92ZXJzaW9uIiwidmVyc2lvbiIsIl91cmwiLCJfbmV0TW9uaXRvciIsIl9zb2NrZXQiLCJfbmV4dFNvY2tldCIsInN1YnNjcmlwdGlvbnMiLCJuZXRNb25pdG9yIiwiZGVmYXVsdCIsInVybCIsIkVycm9yIiwib24iLCJfc29ja2V0Q3JlYXRlIiwicmVhZHlTdGF0ZSIsImNvbm5lY3RpbmciLCJjb25uZWN0ZWQiLCJjbG9zaW5nIiwiY2xvc2VkIiwib3BlbiIsImNsb3NlIiwiX3NvY2tldENsb3NlIiwic2VuZCIsIm1lc3NhZ2UiLCJ0b3BpYyIsInNpbGVudCIsIl9zb2NrZXRTZW5kIiwidHlwZSIsInBheWxvYWQiLCJzdWJzY3JpYmUiLCJldmVudCIsImNhbGxiYWNrIiwicHVzaCIsImdldFdlYlNvY2tldFVybCIsIm9ubWVzc2FnZSIsIl9zb2NrZXRSZWNlaXZlIiwib25vcGVuIiwiX3NvY2tldE9wZW4iLCJvbmVycm9yIiwiX3NvY2tldEVycm9yIiwib25jbG9zZSIsInNldFRpbWVvdXQiLCJfcXVldWVTdWJzY3JpcHRpb25zIiwiX3B1c2hRdWV1ZSIsInNvY2tldE1lc3NhZ2UiLCJKU09OIiwic3RyaW5naWZ5IiwiX3NldFRvUXVldWUiLCJfX2F3YWl0ZXIiLCJwYXJzZSIsImRhdGEiLCJlcnJvciIsImV2ZW50cyIsImZpbHRlciIsImxlbmd0aCIsImZvckVhY2giLCJlIiwicXVldWUiLCJfYSIsIl9iIiwic3RhcnRzV2l0aCIsInJlcGxhY2UiLCJzcGxpdFVybCIsInNwbGl0IiwicGFyYW1zIiwiaXNCcm93c2VyIiwiZW52IiwiaG9zdCIsImdldExvY2F0aW9uIiwiZGV0ZWN0RW52IiwibmFtZSIsInF1ZXJ5U3RyaW5nIiwiYXBwZW5kVG9RdWVyeVN0cmluZyIsImdldFF1ZXJ5U3RyaW5nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@walletconnect+legacy-client@2.0.0/node_modules/@walletconnect/legacy-client/dist/cjs/socket.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@walletconnect+legacy-client@2.0.0/node_modules/@walletconnect/legacy-client/dist/cjs/storage.js":
/*!*****************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@walletconnect+legacy-client@2.0.0/node_modules/@walletconnect/legacy-client/dist/cjs/storage.js ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst legacy_utils_1 = __webpack_require__(/*! @walletconnect/legacy-utils */ \"(ssr)/./node_modules/.pnpm/@walletconnect+legacy-utils@2.0.0/node_modules/@walletconnect/legacy-utils/dist/cjs/index.js\");\nclass SessionStorage {\n    constructor(storageId = \"walletconnect\"){\n        this.storageId = storageId;\n    }\n    getSession() {\n        let session = null;\n        const json = legacy_utils_1.getLocal(this.storageId);\n        if (json && legacy_utils_1.isWalletConnectSession(json)) {\n            session = json;\n        }\n        return session;\n    }\n    setSession(session) {\n        legacy_utils_1.setLocal(this.storageId, session);\n        return session;\n    }\n    removeSession() {\n        legacy_utils_1.removeLocal(this.storageId);\n    }\n}\nexports[\"default\"] = SessionStorage; //# sourceMappingURL=storage.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHdhbGxldGNvbm5lY3QrbGVnYWN5LWNsaWVudEAyLjAuMC9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvbGVnYWN5LWNsaWVudC9kaXN0L2Nqcy9zdG9yYWdlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DLGlCQUFpQkMsbUJBQU9BLENBQUMsNEpBQTZCO0FBQzVELE1BQU1DO0lBQ0ZDLFlBQVlDLFlBQVksZUFBZSxDQUFFO1FBQ3JDLElBQUksQ0FBQ0EsU0FBUyxHQUFHQTtJQUNyQjtJQUNBQyxhQUFhO1FBQ1QsSUFBSUMsVUFBVTtRQUNkLE1BQU1DLE9BQU9QLGVBQWVRLFFBQVEsQ0FBQyxJQUFJLENBQUNKLFNBQVM7UUFDbkQsSUFBSUcsUUFBUVAsZUFBZVMsc0JBQXNCLENBQUNGLE9BQU87WUFDckRELFVBQVVDO1FBQ2Q7UUFDQSxPQUFPRDtJQUNYO0lBQ0FJLFdBQVdKLE9BQU8sRUFBRTtRQUNoQk4sZUFBZVcsUUFBUSxDQUFDLElBQUksQ0FBQ1AsU0FBUyxFQUFFRTtRQUN4QyxPQUFPQTtJQUNYO0lBQ0FNLGdCQUFnQjtRQUNaWixlQUFlYSxXQUFXLENBQUMsSUFBSSxDQUFDVCxTQUFTO0lBQzdDO0FBQ0o7QUFDQU4sa0JBQWUsR0FBR0ksZ0JBQ2xCLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL3NtYXJ0LWF1ZGl0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0B3YWxsZXRjb25uZWN0K2xlZ2FjeS1jbGllbnRAMi4wLjAvbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2xlZ2FjeS1jbGllbnQvZGlzdC9janMvc3RvcmFnZS5qcz8zNzFmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgbGVnYWN5X3V0aWxzXzEgPSByZXF1aXJlKFwiQHdhbGxldGNvbm5lY3QvbGVnYWN5LXV0aWxzXCIpO1xuY2xhc3MgU2Vzc2lvblN0b3JhZ2Uge1xuICAgIGNvbnN0cnVjdG9yKHN0b3JhZ2VJZCA9IFwid2FsbGV0Y29ubmVjdFwiKSB7XG4gICAgICAgIHRoaXMuc3RvcmFnZUlkID0gc3RvcmFnZUlkO1xuICAgIH1cbiAgICBnZXRTZXNzaW9uKCkge1xuICAgICAgICBsZXQgc2Vzc2lvbiA9IG51bGw7XG4gICAgICAgIGNvbnN0IGpzb24gPSBsZWdhY3lfdXRpbHNfMS5nZXRMb2NhbCh0aGlzLnN0b3JhZ2VJZCk7XG4gICAgICAgIGlmIChqc29uICYmIGxlZ2FjeV91dGlsc18xLmlzV2FsbGV0Q29ubmVjdFNlc3Npb24oanNvbikpIHtcbiAgICAgICAgICAgIHNlc3Npb24gPSBqc29uO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZXNzaW9uO1xuICAgIH1cbiAgICBzZXRTZXNzaW9uKHNlc3Npb24pIHtcbiAgICAgICAgbGVnYWN5X3V0aWxzXzEuc2V0TG9jYWwodGhpcy5zdG9yYWdlSWQsIHNlc3Npb24pO1xuICAgICAgICByZXR1cm4gc2Vzc2lvbjtcbiAgICB9XG4gICAgcmVtb3ZlU2Vzc2lvbigpIHtcbiAgICAgICAgbGVnYWN5X3V0aWxzXzEucmVtb3ZlTG9jYWwodGhpcy5zdG9yYWdlSWQpO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IFNlc3Npb25TdG9yYWdlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RvcmFnZS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJsZWdhY3lfdXRpbHNfMSIsInJlcXVpcmUiLCJTZXNzaW9uU3RvcmFnZSIsImNvbnN0cnVjdG9yIiwic3RvcmFnZUlkIiwiZ2V0U2Vzc2lvbiIsInNlc3Npb24iLCJqc29uIiwiZ2V0TG9jYWwiLCJpc1dhbGxldENvbm5lY3RTZXNzaW9uIiwic2V0U2Vzc2lvbiIsInNldExvY2FsIiwicmVtb3ZlU2Vzc2lvbiIsInJlbW92ZUxvY2FsIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@walletconnect+legacy-client@2.0.0/node_modules/@walletconnect/legacy-client/dist/cjs/storage.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@walletconnect+legacy-client@2.0.0/node_modules/@walletconnect/legacy-client/dist/cjs/url.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@walletconnect+legacy-client@2.0.0/node_modules/@walletconnect/legacy-client/dist/cjs/url.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getBridgeUrl = exports.shouldSelectRandomly = exports.selectRandomBridgeUrl = exports.randomBridgeIndex = exports.extractRootDomain = exports.extractHostname = void 0;\nconst domain = \"walletconnect.org\";\nconst alphanumerical = \"abcdefghijklmnopqrstuvwxyz0123456789\";\nconst bridges = alphanumerical.split(\"\").map((char)=>`https://${char}.bridge.walletconnect.org`);\nfunction extractHostname(url) {\n    let hostname = url.indexOf(\"//\") > -1 ? url.split(\"/\")[2] : url.split(\"/\")[0];\n    hostname = hostname.split(\":\")[0];\n    hostname = hostname.split(\"?\")[0];\n    return hostname;\n}\nexports.extractHostname = extractHostname;\nfunction extractRootDomain(url) {\n    return extractHostname(url).split(\".\").slice(-2).join(\".\");\n}\nexports.extractRootDomain = extractRootDomain;\nfunction randomBridgeIndex() {\n    return Math.floor(Math.random() * bridges.length);\n}\nexports.randomBridgeIndex = randomBridgeIndex;\nfunction selectRandomBridgeUrl() {\n    return bridges[randomBridgeIndex()];\n}\nexports.selectRandomBridgeUrl = selectRandomBridgeUrl;\nfunction shouldSelectRandomly(url) {\n    return extractRootDomain(url) === domain;\n}\nexports.shouldSelectRandomly = shouldSelectRandomly;\nfunction getBridgeUrl(url) {\n    if (shouldSelectRandomly(url)) {\n        return selectRandomBridgeUrl();\n    }\n    return url;\n}\nexports.getBridgeUrl = getBridgeUrl; //# sourceMappingURL=url.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHdhbGxldGNvbm5lY3QrbGVnYWN5LWNsaWVudEAyLjAuMC9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvbGVnYWN5LWNsaWVudC9kaXN0L2Nqcy91cmwuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELG9CQUFvQixHQUFHQSw0QkFBNEIsR0FBR0EsNkJBQTZCLEdBQUdBLHlCQUF5QixHQUFHQSx5QkFBeUIsR0FBR0EsdUJBQXVCLEdBQUcsS0FBSztBQUM3SyxNQUFNUSxTQUFTO0FBQ2YsTUFBTUMsaUJBQWlCO0FBQ3ZCLE1BQU1DLFVBQVVELGVBQWVFLEtBQUssQ0FBQyxJQUFJQyxHQUFHLENBQUNDLENBQUFBLE9BQVEsQ0FBQyxRQUFRLEVBQUVBLEtBQUsseUJBQXlCLENBQUM7QUFDL0YsU0FBU04sZ0JBQWdCTyxHQUFHO0lBQ3hCLElBQUlDLFdBQVdELElBQUlFLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSUYsSUFBSUgsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUdHLElBQUlILEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRTtJQUM3RUksV0FBV0EsU0FBU0osS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFO0lBQ2pDSSxXQUFXQSxTQUFTSixLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUU7SUFDakMsT0FBT0k7QUFDWDtBQUNBZix1QkFBdUIsR0FBR087QUFDMUIsU0FBU0Qsa0JBQWtCUSxHQUFHO0lBQzFCLE9BQU9QLGdCQUFnQk8sS0FDbEJILEtBQUssQ0FBQyxLQUNOTSxLQUFLLENBQUMsQ0FBQyxHQUNQQyxJQUFJLENBQUM7QUFDZDtBQUNBbEIseUJBQXlCLEdBQUdNO0FBQzVCLFNBQVNEO0lBQ0wsT0FBT2MsS0FBS0MsS0FBSyxDQUFDRCxLQUFLRSxNQUFNLEtBQUtYLFFBQVFZLE1BQU07QUFDcEQ7QUFDQXRCLHlCQUF5QixHQUFHSztBQUM1QixTQUFTRDtJQUNMLE9BQU9NLE9BQU8sQ0FBQ0wsb0JBQW9CO0FBQ3ZDO0FBQ0FMLDZCQUE2QixHQUFHSTtBQUNoQyxTQUFTRCxxQkFBcUJXLEdBQUc7SUFDN0IsT0FBT1Isa0JBQWtCUSxTQUFTTjtBQUN0QztBQUNBUiw0QkFBNEIsR0FBR0c7QUFDL0IsU0FBU0QsYUFBYVksR0FBRztJQUNyQixJQUFJWCxxQkFBcUJXLE1BQU07UUFDM0IsT0FBT1Y7SUFDWDtJQUNBLE9BQU9VO0FBQ1g7QUFDQWQsb0JBQW9CLEdBQUdFLGNBQ3ZCLCtCQUErQiIsInNvdXJjZXMiOlsid2VicGFjazovL3NtYXJ0LWF1ZGl0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0B3YWxsZXRjb25uZWN0K2xlZ2FjeS1jbGllbnRAMi4wLjAvbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2xlZ2FjeS1jbGllbnQvZGlzdC9janMvdXJsLmpzPzkzNmEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldEJyaWRnZVVybCA9IGV4cG9ydHMuc2hvdWxkU2VsZWN0UmFuZG9tbHkgPSBleHBvcnRzLnNlbGVjdFJhbmRvbUJyaWRnZVVybCA9IGV4cG9ydHMucmFuZG9tQnJpZGdlSW5kZXggPSBleHBvcnRzLmV4dHJhY3RSb290RG9tYWluID0gZXhwb3J0cy5leHRyYWN0SG9zdG5hbWUgPSB2b2lkIDA7XG5jb25zdCBkb21haW4gPSBcIndhbGxldGNvbm5lY3Qub3JnXCI7XG5jb25zdCBhbHBoYW51bWVyaWNhbCA9IFwiYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5XCI7XG5jb25zdCBicmlkZ2VzID0gYWxwaGFudW1lcmljYWwuc3BsaXQoXCJcIikubWFwKGNoYXIgPT4gYGh0dHBzOi8vJHtjaGFyfS5icmlkZ2Uud2FsbGV0Y29ubmVjdC5vcmdgKTtcbmZ1bmN0aW9uIGV4dHJhY3RIb3N0bmFtZSh1cmwpIHtcbiAgICBsZXQgaG9zdG5hbWUgPSB1cmwuaW5kZXhPZihcIi8vXCIpID4gLTEgPyB1cmwuc3BsaXQoXCIvXCIpWzJdIDogdXJsLnNwbGl0KFwiL1wiKVswXTtcbiAgICBob3N0bmFtZSA9IGhvc3RuYW1lLnNwbGl0KFwiOlwiKVswXTtcbiAgICBob3N0bmFtZSA9IGhvc3RuYW1lLnNwbGl0KFwiP1wiKVswXTtcbiAgICByZXR1cm4gaG9zdG5hbWU7XG59XG5leHBvcnRzLmV4dHJhY3RIb3N0bmFtZSA9IGV4dHJhY3RIb3N0bmFtZTtcbmZ1bmN0aW9uIGV4dHJhY3RSb290RG9tYWluKHVybCkge1xuICAgIHJldHVybiBleHRyYWN0SG9zdG5hbWUodXJsKVxuICAgICAgICAuc3BsaXQoXCIuXCIpXG4gICAgICAgIC5zbGljZSgtMilcbiAgICAgICAgLmpvaW4oXCIuXCIpO1xufVxuZXhwb3J0cy5leHRyYWN0Um9vdERvbWFpbiA9IGV4dHJhY3RSb290RG9tYWluO1xuZnVuY3Rpb24gcmFuZG9tQnJpZGdlSW5kZXgoKSB7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGJyaWRnZXMubGVuZ3RoKTtcbn1cbmV4cG9ydHMucmFuZG9tQnJpZGdlSW5kZXggPSByYW5kb21CcmlkZ2VJbmRleDtcbmZ1bmN0aW9uIHNlbGVjdFJhbmRvbUJyaWRnZVVybCgpIHtcbiAgICByZXR1cm4gYnJpZGdlc1tyYW5kb21CcmlkZ2VJbmRleCgpXTtcbn1cbmV4cG9ydHMuc2VsZWN0UmFuZG9tQnJpZGdlVXJsID0gc2VsZWN0UmFuZG9tQnJpZGdlVXJsO1xuZnVuY3Rpb24gc2hvdWxkU2VsZWN0UmFuZG9tbHkodXJsKSB7XG4gICAgcmV0dXJuIGV4dHJhY3RSb290RG9tYWluKHVybCkgPT09IGRvbWFpbjtcbn1cbmV4cG9ydHMuc2hvdWxkU2VsZWN0UmFuZG9tbHkgPSBzaG91bGRTZWxlY3RSYW5kb21seTtcbmZ1bmN0aW9uIGdldEJyaWRnZVVybCh1cmwpIHtcbiAgICBpZiAoc2hvdWxkU2VsZWN0UmFuZG9tbHkodXJsKSkge1xuICAgICAgICByZXR1cm4gc2VsZWN0UmFuZG9tQnJpZGdlVXJsKCk7XG4gICAgfVxuICAgIHJldHVybiB1cmw7XG59XG5leHBvcnRzLmdldEJyaWRnZVVybCA9IGdldEJyaWRnZVVybDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVybC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJnZXRCcmlkZ2VVcmwiLCJzaG91bGRTZWxlY3RSYW5kb21seSIsInNlbGVjdFJhbmRvbUJyaWRnZVVybCIsInJhbmRvbUJyaWRnZUluZGV4IiwiZXh0cmFjdFJvb3REb21haW4iLCJleHRyYWN0SG9zdG5hbWUiLCJkb21haW4iLCJhbHBoYW51bWVyaWNhbCIsImJyaWRnZXMiLCJzcGxpdCIsIm1hcCIsImNoYXIiLCJ1cmwiLCJob3N0bmFtZSIsImluZGV4T2YiLCJzbGljZSIsImpvaW4iLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJsZW5ndGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@walletconnect+legacy-client@2.0.0/node_modules/@walletconnect/legacy-client/dist/cjs/url.js\n");

/***/ })

};
;