"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@safe-global+safe-apps-provider@0.18.1_typescript@5.3.3_zod@3.22.4";
exports.ids = ["vendor-chunks/@safe-global+safe-apps-provider@0.18.1_typescript@5.3.3_zod@3.22.4"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@safe-global+safe-apps-provider@0.18.1_typescript@5.3.3_zod@3.22.4/node_modules/@safe-global/safe-apps-provider/dist/index.js":
/*!**********************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@safe-global+safe-apps-provider@0.18.1_typescript@5.3.3_zod@3.22.4/node_modules/@safe-global/safe-apps-provider/dist/index.js ***!
  \**********************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.SafeAppProvider = void 0;\nvar provider_1 = __webpack_require__(/*! ./provider */ \"(ssr)/./node_modules/.pnpm/@safe-global+safe-apps-provider@0.18.1_typescript@5.3.3_zod@3.22.4/node_modules/@safe-global/safe-apps-provider/dist/provider.js\");\nObject.defineProperty(exports, \"SafeAppProvider\", ({\n    enumerable: true,\n    get: function() {\n        return provider_1.SafeAppProvider;\n    }\n})); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNhZmUtZ2xvYmFsK3NhZmUtYXBwcy1wcm92aWRlckAwLjE4LjFfdHlwZXNjcmlwdEA1LjMuM196b2RAMy4yMi40L25vZGVfbW9kdWxlcy9Ac2FmZS1nbG9iYWwvc2FmZS1hcHBzLXByb3ZpZGVyL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHVCQUF1QixHQUFHLEtBQUs7QUFDL0IsSUFBSUcsYUFBYUMsbUJBQU9BLENBQUMsK0tBQVk7QUFDckNOLG1EQUFrRDtJQUFFTyxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPSCxXQUFXRCxlQUFlO0lBQUU7QUFBRSxDQUFDLEVBQUMsRUFDaEksaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc21hcnQtYXVkaXQvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNhZmUtZ2xvYmFsK3NhZmUtYXBwcy1wcm92aWRlckAwLjE4LjFfdHlwZXNjcmlwdEA1LjMuM196b2RAMy4yMi40L25vZGVfbW9kdWxlcy9Ac2FmZS1nbG9iYWwvc2FmZS1hcHBzLXByb3ZpZGVyL2Rpc3QvaW5kZXguanM/NGQzOCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU2FmZUFwcFByb3ZpZGVyID0gdm9pZCAwO1xudmFyIHByb3ZpZGVyXzEgPSByZXF1aXJlKFwiLi9wcm92aWRlclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlNhZmVBcHBQcm92aWRlclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdmlkZXJfMS5TYWZlQXBwUHJvdmlkZXI7IH0gfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJTYWZlQXBwUHJvdmlkZXIiLCJwcm92aWRlcl8xIiwicmVxdWlyZSIsImVudW1lcmFibGUiLCJnZXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@safe-global+safe-apps-provider@0.18.1_typescript@5.3.3_zod@3.22.4/node_modules/@safe-global/safe-apps-provider/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@safe-global+safe-apps-provider@0.18.1_typescript@5.3.3_zod@3.22.4/node_modules/@safe-global/safe-apps-provider/dist/provider.js":
/*!*************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@safe-global+safe-apps-provider@0.18.1_typescript@5.3.3_zod@3.22.4/node_modules/@safe-global/safe-apps-provider/dist/provider.js ***!
  \*************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.SafeAppProvider = void 0;\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/.pnpm/@safe-global+safe-apps-provider@0.18.1_typescript@5.3.3_zod@3.22.4/node_modules/@safe-global/safe-apps-provider/dist/utils.js\");\n// The API is based on Ethereum JavaScript API Provider Standard. Link: https://eips.ethereum.org/EIPS/eip-1193\nclass SafeAppProvider extends events_1.EventEmitter {\n    constructor(safe, sdk){\n        super();\n        this.submittedTxs = new Map();\n        this.safe = safe;\n        this.sdk = sdk;\n    }\n    async connect() {\n        this.emit(\"connect\", {\n            chainId: this.chainId\n        });\n        return;\n    }\n    async disconnect() {\n        return;\n    }\n    get chainId() {\n        return this.safe.chainId;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async request(request) {\n        const { method, params = [] } = request;\n        switch(method){\n            case \"eth_accounts\":\n                return [\n                    this.safe.safeAddress\n                ];\n            case \"net_version\":\n            case \"eth_chainId\":\n                return `0x${this.chainId.toString(16)}`;\n            case \"personal_sign\":\n                {\n                    const [message, address] = params;\n                    if (this.safe.safeAddress.toLowerCase() !== address.toLowerCase()) {\n                        throw new Error(\"The address or message hash is invalid\");\n                    }\n                    const response = await this.sdk.txs.signMessage(message);\n                    const signature = \"signature\" in response ? response.signature : undefined;\n                    return signature || \"0x\";\n                }\n            case \"eth_sign\":\n                {\n                    const [address, messageHash] = params;\n                    if (this.safe.safeAddress.toLowerCase() !== address.toLowerCase() || !messageHash.startsWith(\"0x\")) {\n                        throw new Error(\"The address or message hash is invalid\");\n                    }\n                    const response = await this.sdk.txs.signMessage(messageHash);\n                    const signature = \"signature\" in response ? response.signature : undefined;\n                    return signature || \"0x\";\n                }\n            case \"eth_signTypedData\":\n            case \"eth_signTypedData_v4\":\n                {\n                    const [address, typedData] = params;\n                    const parsedTypedData = typeof typedData === \"string\" ? JSON.parse(typedData) : typedData;\n                    if (this.safe.safeAddress.toLowerCase() !== address.toLowerCase()) {\n                        throw new Error(\"The address is invalid\");\n                    }\n                    const response = await this.sdk.txs.signTypedMessage(parsedTypedData);\n                    const signature = \"signature\" in response ? response.signature : undefined;\n                    return signature || \"0x\";\n                }\n            case \"eth_sendTransaction\":\n                // `value` or `data` can be explicitly set as `undefined` for example in Viem. The spread will overwrite the fallback value.\n                const tx = Object.assign(Object.assign({}, params[0]), {\n                    value: params[0].value || \"0\",\n                    data: params[0].data || \"0x\"\n                });\n                // Some ethereum libraries might pass the gas as a hex-encoded string\n                // We need to convert it to a number because the SDK expects a number and our backend only supports\n                // Decimal numbers\n                if (typeof tx.gas === \"string\" && tx.gas.startsWith(\"0x\")) {\n                    tx.gas = parseInt(tx.gas, 16);\n                }\n                const resp = await this.sdk.txs.send({\n                    txs: [\n                        tx\n                    ],\n                    params: {\n                        safeTxGas: tx.gas\n                    }\n                });\n                // Store fake transaction\n                this.submittedTxs.set(resp.safeTxHash, {\n                    from: this.safe.safeAddress,\n                    hash: resp.safeTxHash,\n                    gas: 0,\n                    gasPrice: \"0x00\",\n                    nonce: 0,\n                    input: tx.data,\n                    value: tx.value,\n                    to: tx.to,\n                    blockHash: null,\n                    blockNumber: null,\n                    transactionIndex: null\n                });\n                return resp.safeTxHash;\n            case \"eth_blockNumber\":\n                const block = await this.sdk.eth.getBlockByNumber([\n                    \"latest\"\n                ]);\n                return block.number;\n            case \"eth_getBalance\":\n                return this.sdk.eth.getBalance([\n                    (0, utils_1.getLowerCase)(params[0]),\n                    params[1]\n                ]);\n            case \"eth_getCode\":\n                return this.sdk.eth.getCode([\n                    (0, utils_1.getLowerCase)(params[0]),\n                    params[1]\n                ]);\n            case \"eth_getTransactionCount\":\n                return this.sdk.eth.getTransactionCount([\n                    (0, utils_1.getLowerCase)(params[0]),\n                    params[1]\n                ]);\n            case \"eth_getStorageAt\":\n                return this.sdk.eth.getStorageAt([\n                    (0, utils_1.getLowerCase)(params[0]),\n                    params[1],\n                    params[2]\n                ]);\n            case \"eth_getBlockByNumber\":\n                return this.sdk.eth.getBlockByNumber([\n                    params[0],\n                    params[1]\n                ]);\n            case \"eth_getBlockByHash\":\n                return this.sdk.eth.getBlockByHash([\n                    params[0],\n                    params[1]\n                ]);\n            case \"eth_getTransactionByHash\":\n                let txHash = params[0];\n                try {\n                    const resp = await this.sdk.txs.getBySafeTxHash(txHash);\n                    txHash = resp.txHash || txHash;\n                } catch (e) {}\n                // Use fake transaction if we don't have a real tx hash\n                if (this.submittedTxs.has(txHash)) {\n                    return this.submittedTxs.get(txHash);\n                }\n                return this.sdk.eth.getTransactionByHash([\n                    txHash\n                ]).then((tx)=>{\n                    // We set the tx hash to the one requested, as some provider assert this\n                    if (tx) {\n                        tx.hash = params[0];\n                    }\n                    return tx;\n                });\n            case \"eth_getTransactionReceipt\":\n                {\n                    let txHash = params[0];\n                    try {\n                        const resp = await this.sdk.txs.getBySafeTxHash(txHash);\n                        txHash = resp.txHash || txHash;\n                    } catch (e) {}\n                    return this.sdk.eth.getTransactionReceipt([\n                        txHash\n                    ]).then((tx)=>{\n                        // We set the tx hash to the one requested, as some provider assert this\n                        if (tx) {\n                            tx.transactionHash = params[0];\n                        }\n                        return tx;\n                    });\n                }\n            case \"eth_estimateGas\":\n                {\n                    return this.sdk.eth.getEstimateGas(params[0]);\n                }\n            case \"eth_call\":\n                {\n                    return this.sdk.eth.call([\n                        params[0],\n                        params[1]\n                    ]);\n                }\n            case \"eth_getLogs\":\n                return this.sdk.eth.getPastLogs([\n                    params[0]\n                ]);\n            case \"eth_gasPrice\":\n                return this.sdk.eth.getGasPrice();\n            case \"wallet_getPermissions\":\n                return this.sdk.wallet.getPermissions();\n            case \"wallet_requestPermissions\":\n                return this.sdk.wallet.requestPermissions(params[0]);\n            case \"safe_setSettings\":\n                return this.sdk.eth.setSafeSettings([\n                    params[0]\n                ]);\n            default:\n                throw Error(`\"${request.method}\" not implemented`);\n        }\n    }\n    // this method is needed for ethers v4\n    // https://github.com/ethers-io/ethers.js/blob/427e16826eb15d52d25c4f01027f8db22b74b76c/src.ts/providers/web3-provider.ts#L41-L55\n    send(request, callback) {\n        if (!request) callback(\"Undefined request\");\n        this.request(request).then((result)=>callback(null, {\n                jsonrpc: \"2.0\",\n                id: request.id,\n                result\n            })).catch((error)=>callback(error, null));\n    }\n}\nexports.SafeAppProvider = SafeAppProvider; //# sourceMappingURL=provider.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@safe-global+safe-apps-provider@0.18.1_typescript@5.3.3_zod@3.22.4/node_modules/@safe-global/safe-apps-provider/dist/provider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@safe-global+safe-apps-provider@0.18.1_typescript@5.3.3_zod@3.22.4/node_modules/@safe-global/safe-apps-provider/dist/utils.js":
/*!**********************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@safe-global+safe-apps-provider@0.18.1_typescript@5.3.3_zod@3.22.4/node_modules/@safe-global/safe-apps-provider/dist/utils.js ***!
  \**********************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getLowerCase = void 0;\nfunction getLowerCase(value) {\n    if (value) {\n        return value.toLowerCase();\n    }\n    return value;\n}\nexports.getLowerCase = getLowerCase; //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNhZmUtZ2xvYmFsK3NhZmUtYXBwcy1wcm92aWRlckAwLjE4LjFfdHlwZXNjcmlwdEA1LjMuM196b2RAMy4yMi40L25vZGVfbW9kdWxlcy9Ac2FmZS1nbG9iYWwvc2FmZS1hcHBzLXByb3ZpZGVyL2Rpc3QvdXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELG9CQUFvQixHQUFHLEtBQUs7QUFDNUIsU0FBU0UsYUFBYUQsS0FBSztJQUN2QixJQUFJQSxPQUFPO1FBQ1AsT0FBT0EsTUFBTUUsV0FBVztJQUM1QjtJQUNBLE9BQU9GO0FBQ1g7QUFDQUQsb0JBQW9CLEdBQUdFLGNBQ3ZCLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3NtYXJ0LWF1ZGl0Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzYWZlLWdsb2JhbCtzYWZlLWFwcHMtcHJvdmlkZXJAMC4xOC4xX3R5cGVzY3JpcHRANS4zLjNfem9kQDMuMjIuNC9ub2RlX21vZHVsZXMvQHNhZmUtZ2xvYmFsL3NhZmUtYXBwcy1wcm92aWRlci9kaXN0L3V0aWxzLmpzPzI0M2UiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldExvd2VyQ2FzZSA9IHZvaWQgMDtcbmZ1bmN0aW9uIGdldExvd2VyQ2FzZSh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWUudG9Mb3dlckNhc2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuZXhwb3J0cy5nZXRMb3dlckNhc2UgPSBnZXRMb3dlckNhc2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlscy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJnZXRMb3dlckNhc2UiLCJ0b0xvd2VyQ2FzZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@safe-global+safe-apps-provider@0.18.1_typescript@5.3.3_zod@3.22.4/node_modules/@safe-global/safe-apps-provider/dist/utils.js\n");

/***/ })

};
;