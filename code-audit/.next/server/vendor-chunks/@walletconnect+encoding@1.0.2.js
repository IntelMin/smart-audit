"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@walletconnect+encoding@1.0.2";
exports.ids = ["vendor-chunks/@walletconnect+encoding@1.0.2"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@walletconnect+encoding@1.0.2/node_modules/@walletconnect/encoding/dist/esm/index.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@walletconnect+encoding@1.0.2/node_modules/@walletconnect/encoding/dist/esm/index.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addHexPrefix: () => (/* binding */ addHexPrefix),\n/* harmony export */   arrayToBinary: () => (/* binding */ arrayToBinary),\n/* harmony export */   arrayToBuffer: () => (/* binding */ arrayToBuffer),\n/* harmony export */   arrayToHex: () => (/* binding */ arrayToHex),\n/* harmony export */   arrayToNumber: () => (/* binding */ arrayToNumber),\n/* harmony export */   arrayToUtf8: () => (/* binding */ arrayToUtf8),\n/* harmony export */   binaryToArray: () => (/* binding */ binaryToArray),\n/* harmony export */   binaryToBuffer: () => (/* binding */ binaryToBuffer),\n/* harmony export */   binaryToHex: () => (/* binding */ binaryToHex),\n/* harmony export */   binaryToNumber: () => (/* binding */ binaryToNumber),\n/* harmony export */   binaryToUtf8: () => (/* binding */ binaryToUtf8),\n/* harmony export */   bufferToArray: () => (/* binding */ bufferToArray),\n/* harmony export */   bufferToBinary: () => (/* binding */ bufferToBinary),\n/* harmony export */   bufferToHex: () => (/* binding */ bufferToHex),\n/* harmony export */   bufferToNumber: () => (/* binding */ bufferToNumber),\n/* harmony export */   bufferToUtf8: () => (/* binding */ bufferToUtf8),\n/* harmony export */   calcByteLength: () => (/* binding */ calcByteLength),\n/* harmony export */   concatArrays: () => (/* binding */ concatArrays),\n/* harmony export */   concatBuffers: () => (/* binding */ concatBuffers),\n/* harmony export */   getEncoding: () => (/* binding */ getEncoding),\n/* harmony export */   getType: () => (/* binding */ getType),\n/* harmony export */   hexToArray: () => (/* binding */ hexToArray),\n/* harmony export */   hexToBinary: () => (/* binding */ hexToBinary),\n/* harmony export */   hexToBuffer: () => (/* binding */ hexToBuffer),\n/* harmony export */   hexToNumber: () => (/* binding */ hexToNumber),\n/* harmony export */   hexToUtf8: () => (/* binding */ hexToUtf8),\n/* harmony export */   isArrayBuffer: () => (/* binding */ isArrayBuffer),\n/* harmony export */   isBinaryString: () => (/* binding */ isBinaryString),\n/* harmony export */   isBuffer: () => (/* binding */ isBuffer),\n/* harmony export */   isHexString: () => (/* binding */ isHexString),\n/* harmony export */   isTypedArray: () => (/* binding */ isTypedArray),\n/* harmony export */   numberToArray: () => (/* binding */ numberToArray),\n/* harmony export */   numberToBinary: () => (/* binding */ numberToBinary),\n/* harmony export */   numberToBuffer: () => (/* binding */ numberToBuffer),\n/* harmony export */   numberToHex: () => (/* binding */ numberToHex),\n/* harmony export */   numberToUtf8: () => (/* binding */ numberToUtf8),\n/* harmony export */   padLeft: () => (/* binding */ padLeft),\n/* harmony export */   padRight: () => (/* binding */ padRight),\n/* harmony export */   removeHexLeadingZeros: () => (/* binding */ removeHexLeadingZeros),\n/* harmony export */   removeHexPrefix: () => (/* binding */ removeHexPrefix),\n/* harmony export */   sanitizeBytes: () => (/* binding */ sanitizeBytes),\n/* harmony export */   sanitizeHex: () => (/* binding */ sanitizeHex),\n/* harmony export */   splitBytes: () => (/* binding */ splitBytes),\n/* harmony export */   swapBytes: () => (/* binding */ swapBytes),\n/* harmony export */   swapHex: () => (/* binding */ swapHex),\n/* harmony export */   trimLeft: () => (/* binding */ trimLeft),\n/* harmony export */   trimRight: () => (/* binding */ trimRight),\n/* harmony export */   utf8ToArray: () => (/* binding */ utf8ToArray),\n/* harmony export */   utf8ToBinary: () => (/* binding */ utf8ToBinary),\n/* harmony export */   utf8ToBuffer: () => (/* binding */ utf8ToBuffer),\n/* harmony export */   utf8ToHex: () => (/* binding */ utf8ToHex),\n/* harmony export */   utf8ToNumber: () => (/* binding */ utf8ToNumber)\n/* harmony export */ });\n/* harmony import */ var is_typedarray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! is-typedarray */ \"(ssr)/./node_modules/.pnpm/is-typedarray@1.0.0/node_modules/is-typedarray/index.js\");\n/* harmony import */ var is_typedarray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(is_typedarray__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var typedarray_to_buffer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! typedarray-to-buffer */ \"(ssr)/./node_modules/.pnpm/typedarray-to-buffer@3.1.5/node_modules/typedarray-to-buffer/index.js\");\n/* harmony import */ var typedarray_to_buffer__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(typedarray_to_buffer__WEBPACK_IMPORTED_MODULE_1__);\n\n\nconst ENC_HEX = \"hex\";\nconst ENC_UTF8 = \"utf8\";\nconst ENC_BIN = \"binary\";\nconst TYPE_BUFFER = \"buffer\";\nconst TYPE_ARRAY = \"array\";\nconst TYPE_TYPED_ARRAY = \"typed-array\";\nconst TYPE_ARRAY_BUFFER = \"array-buffer\";\nconst STRING_ZERO = \"0\";\nfunction bufferToArray(buf) {\n    return new Uint8Array(buf);\n}\nfunction bufferToHex(buf, prefixed = false) {\n    const hex = buf.toString(ENC_HEX);\n    return prefixed ? addHexPrefix(hex) : hex;\n}\nfunction bufferToUtf8(buf) {\n    return buf.toString(ENC_UTF8);\n}\nfunction bufferToNumber(buf) {\n    return buf.readUIntBE(0, buf.length);\n}\nfunction bufferToBinary(buf) {\n    return arrayToBinary(bufferToArray(buf));\n}\nfunction arrayToBuffer(arr) {\n    return typedarray_to_buffer__WEBPACK_IMPORTED_MODULE_1___default()(arr);\n}\nfunction arrayToHex(arr, prefixed = false) {\n    return bufferToHex(arrayToBuffer(arr), prefixed);\n}\nfunction arrayToUtf8(arr) {\n    return bufferToUtf8(arrayToBuffer(arr));\n}\nfunction arrayToNumber(arr) {\n    return bufferToNumber(arrayToBuffer(arr));\n}\nfunction arrayToBinary(arr) {\n    return Array.from(arr).map(numberToBinary).join(\"\");\n}\nfunction hexToBuffer(hex) {\n    return Buffer.from(removeHexPrefix(hex), ENC_HEX);\n}\nfunction hexToArray(hex) {\n    return bufferToArray(hexToBuffer(hex));\n}\nfunction hexToUtf8(hex) {\n    return bufferToUtf8(hexToBuffer(hex));\n}\nfunction hexToNumber(hex) {\n    return arrayToNumber(hexToArray(hex));\n}\nfunction hexToBinary(hex) {\n    return arrayToBinary(hexToArray(hex));\n}\nfunction utf8ToBuffer(utf8) {\n    return Buffer.from(utf8, ENC_UTF8);\n}\nfunction utf8ToArray(utf8) {\n    return bufferToArray(utf8ToBuffer(utf8));\n}\nfunction utf8ToHex(utf8, prefixed = false) {\n    return bufferToHex(utf8ToBuffer(utf8), prefixed);\n}\nfunction utf8ToNumber(utf8) {\n    const num = parseInt(utf8, 10);\n    assert(isDefined(num), \"Number can only safely store up to 53 bits\");\n    return num;\n}\nfunction utf8ToBinary(utf8) {\n    return arrayToBinary(utf8ToArray(utf8));\n}\nfunction numberToBuffer(num) {\n    return binaryToBuffer(numberToBinary(num));\n}\nfunction numberToArray(num) {\n    return binaryToArray(numberToBinary(num));\n}\nfunction numberToHex(num, prefixed) {\n    return binaryToHex(numberToBinary(num), prefixed);\n}\nfunction numberToUtf8(num) {\n    return `${num}`;\n}\nfunction numberToBinary(num) {\n    const bin = (num >>> 0).toString(2);\n    return sanitizeBytes(bin);\n}\nfunction binaryToBuffer(bin) {\n    return arrayToBuffer(binaryToArray(bin));\n}\nfunction binaryToArray(bin) {\n    return new Uint8Array(splitBytes(bin).map((x)=>parseInt(x, 2)));\n}\nfunction binaryToHex(bin, prefixed) {\n    return arrayToHex(binaryToArray(bin), prefixed);\n}\nfunction binaryToUtf8(bin) {\n    return arrayToUtf8(binaryToArray(bin));\n}\nfunction binaryToNumber(bin) {\n    return arrayToNumber(binaryToArray(bin));\n}\nfunction isBinaryString(str) {\n    if (typeof str !== \"string\" || !new RegExp(/^[01]+$/).test(str)) {\n        return false;\n    }\n    if (str.length % 8 !== 0) {\n        return false;\n    }\n    return true;\n}\nfunction isHexString(str, length) {\n    if (typeof str !== \"string\" || !str.match(/^0x[0-9A-Fa-f]*$/)) {\n        return false;\n    }\n    if (length && str.length !== 2 + 2 * length) {\n        return false;\n    }\n    return true;\n}\nfunction isBuffer(val) {\n    return Buffer.isBuffer(val);\n}\nfunction isTypedArray(val) {\n    return is_typedarray__WEBPACK_IMPORTED_MODULE_0___default().strict(val) && !isBuffer(val);\n}\nfunction isArrayBuffer(val) {\n    return !isTypedArray(val) && !isBuffer(val) && typeof val.byteLength !== \"undefined\";\n}\nfunction getType(val) {\n    if (isBuffer(val)) {\n        return TYPE_BUFFER;\n    } else if (isTypedArray(val)) {\n        return TYPE_TYPED_ARRAY;\n    } else if (isArrayBuffer(val)) {\n        return TYPE_ARRAY_BUFFER;\n    } else if (Array.isArray(val)) {\n        return TYPE_ARRAY;\n    } else {\n        return typeof val;\n    }\n}\nfunction getEncoding(str) {\n    if (isBinaryString(str)) {\n        return ENC_BIN;\n    }\n    if (isHexString(str)) {\n        return ENC_HEX;\n    }\n    return ENC_UTF8;\n}\nfunction concatBuffers(...args) {\n    const result = Buffer.concat(args);\n    return result;\n}\nfunction concatArrays(...args) {\n    let result = [];\n    args.forEach((arg)=>result = result.concat(Array.from(arg)));\n    return new Uint8Array([\n        ...result\n    ]);\n}\nfunction trimLeft(data, length) {\n    const diff = data.length - length;\n    if (diff > 0) {\n        data = data.slice(diff);\n    }\n    return data;\n}\nfunction trimRight(data, length) {\n    return data.slice(0, length);\n}\nfunction calcByteLength(length, byteSize = 8) {\n    const remainder = length % byteSize;\n    return remainder ? (length - remainder) / byteSize * byteSize + byteSize : length;\n}\nfunction splitBytes(str, byteSize = 8) {\n    const bytes = sanitizeBytes(str).match(new RegExp(`.{${byteSize}}`, \"gi\"));\n    return Array.from(bytes || []);\n}\nfunction swapBytes(str) {\n    return splitBytes(str).map(reverseString).join(\"\");\n}\nfunction swapHex(str) {\n    return binaryToHex(swapBytes(hexToBinary(str)));\n}\nfunction sanitizeBytes(str, byteSize = 8, padding = STRING_ZERO) {\n    return padLeft(str, calcByteLength(str.length, byteSize), padding);\n}\nfunction padLeft(str, length, padding = STRING_ZERO) {\n    return padString(str, length, true, padding);\n}\nfunction padRight(str, length, padding = STRING_ZERO) {\n    return padString(str, length, false, padding);\n}\nfunction removeHexPrefix(hex) {\n    return hex.replace(/^0x/, \"\");\n}\nfunction addHexPrefix(hex) {\n    return hex.startsWith(\"0x\") ? hex : `0x${hex}`;\n}\nfunction sanitizeHex(hex) {\n    hex = removeHexPrefix(hex);\n    hex = sanitizeBytes(hex, 2);\n    if (hex) {\n        hex = addHexPrefix(hex);\n    }\n    return hex;\n}\nfunction removeHexLeadingZeros(hex) {\n    const prefixed = hex.startsWith(\"0x\");\n    hex = removeHexPrefix(hex);\n    hex = hex.startsWith(STRING_ZERO) ? hex.substring(1) : hex;\n    return prefixed ? addHexPrefix(hex) : hex;\n}\nfunction isUndefined(value) {\n    return typeof value === \"undefined\";\n}\nfunction isDefined(value) {\n    return !isUndefined(value);\n}\nfunction assert(assertion, errorMessage) {\n    if (!assertion) {\n        throw new Error(errorMessage);\n    }\n}\nfunction reverseString(str) {\n    return str.split(\"\").reverse().join(\"\");\n}\nfunction padString(str, length, left, padding = STRING_ZERO) {\n    const diff = length - str.length;\n    let result = str;\n    if (diff > 0) {\n        const pad = padding.repeat(diff);\n        result = left ? pad + str : str + pad;\n    }\n    return result;\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@walletconnect+encoding@1.0.2/node_modules/@walletconnect/encoding/dist/esm/index.js\n");

/***/ })

};
;